# Copyright (C) 2010-2011   Christopher C. Hulbert
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

AT_SETUP([Write 2D double-precision array])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_2d_numeric_double.m],
[
try
    load test_write_2d_numeric.mat
    expdata = reshape(1:50,5,10);
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c double write_2d_numeric],[0],[ignore],
         [ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_double;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write 2D single-precision array])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_2d_numeric_single.m],
[
try
    load test_write_2d_numeric.mat
    expdata = single(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c single write_2d_numeric],[0],[ignore],
         [ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_single;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write 2D 64-bit integer array])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_SKIP_IF([test $HAVE_INT64 -eq 0])
AT_DATA([test_write_2d_numeric_int64.m],
[
try
    load test_write_2d_numeric.mat
    expdata = int64(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c int64 write_2d_numeric],[0],[ignore],
         [ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write 2D 64-bit unsigned integer array])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_SKIP_IF([test $HAVE_UINT64 -eq 0])
AT_DATA([test_write_2d_numeric_int64.m],
[
try
    load test_write_2d_numeric.mat
    expdata = uint64(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c uint64 write_2d_numeric],[0],[ignore],
         [ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write 2D 32-bit integer array])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_2d_numeric_int32.m],
[
try
    load test_write_2d_numeric.mat
    expdata = int32(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c int32 write_2d_numeric],[0],[ignore],
         [ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write 2D 32-bit unsigned integer array])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_2d_numeric_int32.m],
[
try
    load test_write_2d_numeric.mat
    expdata = uint32(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c uint32 write_2d_numeric],[0],[ignore],
         [ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write 2D 16-bit integer array])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_2d_numeric_int16.m],
[
try
    load test_write_2d_numeric.mat
    expdata = int16(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c int16 write_2d_numeric],[0],[ignore],
         [ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write 2D 16-bit unsigned integer array])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_2d_numeric_int16.m],
[
try
    load test_write_2d_numeric.mat
    expdata = uint16(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c uint16 write_2d_numeric],[0],[ignore],
         [ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write 2D 8-bit integer array])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_2d_numeric_int8.m],
[
try
    load test_write_2d_numeric.mat
    expdata = int8(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c int8 write_2d_numeric],[0],[ignore],
         [ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write 2D 8-bit unsigned integer array])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_2d_numeric_int8.m],
[
try
    load test_write_2d_numeric.mat
    expdata = uint8(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c uint8 write_2d_numeric],[0],[ignore],
         [ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write 2D double-precision complex array])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_complex_2d_numeric_double.m],
[
try
    load test_write_complex_2d_numeric.mat
    expdata = reshape((1:50) + j*(51:100),5,10);
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c double write_complex_2d_numeric],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_double;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write 2D single-precision complex array])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_complex_2d_numeric_single.m],
[
try
    load test_write_complex_2d_numeric.mat
    expdata = single(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c single write_complex_2d_numeric],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_single;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write 2D 64-bit integer complex array])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_SKIP_IF([test $HAVE_INT64 -eq 0])
AT_DATA([test_write_complex_2d_numeric_int64.m],
[
try
    load test_write_complex_2d_numeric.mat
    expdata = int64(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c int64 write_complex_2d_numeric],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int64;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write 2D 64-bit unsigned integer complex array])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_SKIP_IF([test $HAVE_UINT64 -eq 0])
AT_DATA([test_write_complex_2d_numeric_uint64.m],
[
try
    load test_write_complex_2d_numeric.mat
    expdata = uint64(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c uint64 write_complex_2d_numeric],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint64;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write 2D 32-bit integer complex array])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_complex_2d_numeric_int32.m],
[
try
    load test_write_complex_2d_numeric.mat
    expdata = int32(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c int32 write_complex_2d_numeric],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int32;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write 2D 32-bit unsigned integer complex array])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_complex_2d_numeric_uint32.m],
[
try
    load test_write_complex_2d_numeric.mat
    expdata = uint32(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c uint32 write_complex_2d_numeric],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint32;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write 2D 16-bit integer complex array])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_complex_2d_numeric_int16.m],
[
try
    load test_write_complex_2d_numeric.mat
    expdata = int16(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c int16 write_complex_2d_numeric],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int16;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write 2D 16-bit unsigned integer complex array])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_complex_2d_numeric_uint16.m],
[
try
    load test_write_complex_2d_numeric.mat
    expdata = uint16(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c uint16 write_complex_2d_numeric],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint16;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write 2D 8-bit integer complex array])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_complex_2d_numeric_int8.m],
[
try
    load test_write_complex_2d_numeric.mat
    expdata = int8(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c int8 write_complex_2d_numeric],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int8;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write 2D 8-bit unsigned integer complex array])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_complex_2d_numeric_uint8.m],
[
try
    load test_write_complex_2d_numeric.mat
    expdata = uint8(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c uint8 write_complex_2d_numeric],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint8;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write 2D sparse double-precision array])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_sparse_double.m],
[
try
    load test_write_sparse.mat
    expdata = zeros(5,10);
    expdata(1:4:end,1:2:end) = 1;
    expdata(2:4,2:2:end) = 1;
    expdata = expdata.*reshape(1:50,5,10);
    pass = true;
    pass = pass && isa(sparse_matrix,class(expdata));
    pass = pass && issparse(sparse_matrix);
    pass = pass && all(size(sparse_matrix)==size(expdata));
    pass = pass && all(sparse_matrix(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c double write_sparse],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_sparse_double;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write 2D sparse complex double-precision array])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_sparse_complex_double.m],
[
try
    load test_write_sparse_complex.mat
    expdata = zeros(5,10);
    expdata(1:4:end,1:2:end) = 1;
    expdata(2:4,2:2:end) = 1;
    expdata = expdata.*reshape((1:50) + j*(51:100),5,10);
    pass = true;
    pass = pass && isa(sparse_matrix,class(expdata));
    pass = pass && issparse(sparse_matrix);
    pass = pass && all(size(sparse_matrix)==size(expdata));
    pass = pass && all(sparse_matrix(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c double write_complex_sparse],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_sparse_complex_double;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write 2D empty array])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_empty.m],
[
try
    load test_write_empty_2d_numeric.mat
    expdata = zeros(0,10);
    pass = true;
    pass = pass && isa(empty,class(expdata));
    pass = pass && isempty(empty);
    pass = pass && all(size(empty)==size(expdata));
    pass = pass && all(empty(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c double write_empty_2d_numeric],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_empty;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write character array])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_char.m],
[
try
    load test_write_char.mat
    expdata = @<:@'abcdefghijklmnopqrstuvwxyz';
               'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
               '1234567890!@#$%^&*()-_=+`~';
               '@<:@{@:>@}\|;:''",<.>/?          '@:>@;
    pass = true;
    pass = pass && isequal(expdata,a);
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 write_char],[0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_char;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write empty structure array])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_empty_struct.m],
[
try
    load test_write_empty_struct.mat
    expdata1 = repmat(struct,0,1);
    expdata2 = repmat(struct('field1',zeros(0,0),'field2',zeros(0,0)),0,1);
    expdata3 = struct('field1',zeros(0,1),'field2',zeros(0,1));
    expdata4(1).field1 = zeros(0,1);
    expdata4(1).field2 = repmat(' ',0,1);
    expdata4(2).field1 = repmat(struct,0,1);
    expdata4(2).field2 = repmat({zeros(0,0)},0,1);
    pass = true;
    pass = pass && isequal(var1,expdata1);
    pass = pass && isequal(var2,expdata2);
    pass = pass && isequal(var3,expdata3);
    pass = pass && isequal(var4,expdata4(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 write_empty_struct],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_empty_struct;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write structure array with 2D double-precision fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_struct_2d_numeric.m],
[
try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape((1:12),3,4);
    expdata(1).field2 = reshape((13:24),3,4);
    expdata(2).field1 = reshape((25:36),3,4);
    expdata(2).field2 = reshape((37:48),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -z write_struct_2d_numeric],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write structure array with 2D single-precision fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_struct_2d_numeric.m],
[
try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(single((1:12)),3,4);
    expdata(1).field2 = reshape(single((13:24)),3,4);
    expdata(2).field1 = reshape(single((25:36)),3,4);
    expdata(2).field2 = reshape(single((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c single write_struct_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 64-bit signed integer fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_SKIP_IF([test $HAVE_INT64 -eq 0])
AT_DATA([test_write_struct_2d_numeric.m],
[
try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int64((1:12)),3,4);
    expdata(1).field2 = reshape(int64((13:24)),3,4);
    expdata(2).field1 = reshape(int64((25:36)),3,4);
    expdata(2).field2 = reshape(int64((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c int64 write_struct_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 64-bit unsigned integer fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_SKIP_IF([test $HAVE_UINT64 -eq 0])
AT_DATA([test_write_struct_2d_numeric.m],
[
try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint64((1:12)),3,4);
    expdata(1).field2 = reshape(uint64((13:24)),3,4);
    expdata(2).field1 = reshape(uint64((25:36)),3,4);
    expdata(2).field2 = reshape(uint64((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c uint64 write_struct_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 32-bit signed integer fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_struct_2d_numeric.m],
[
try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int32((1:12)),3,4);
    expdata(1).field2 = reshape(int32((13:24)),3,4);
    expdata(2).field1 = reshape(int32((25:36)),3,4);
    expdata(2).field2 = reshape(int32((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c int32 write_struct_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 32-bit unsigned integer fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_struct_2d_numeric.m],
[
try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint32((1:12)),3,4);
    expdata(1).field2 = reshape(uint32((13:24)),3,4);
    expdata(2).field1 = reshape(uint32((25:36)),3,4);
    expdata(2).field2 = reshape(uint32((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c uint32 write_struct_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 16-bit signed integer fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_struct_2d_numeric.m],
[
try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int16((1:12)),3,4);
    expdata(1).field2 = reshape(int16((13:24)),3,4);
    expdata(2).field1 = reshape(int16((25:36)),3,4);
    expdata(2).field2 = reshape(int16((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c int16 write_struct_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 16-bit unsigned integer fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_struct_2d_numeric.m],
[
try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint16((1:12)),3,4);
    expdata(1).field2 = reshape(uint16((13:24)),3,4);
    expdata(2).field1 = reshape(uint16((25:36)),3,4);
    expdata(2).field2 = reshape(uint16((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c uint16 write_struct_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 8-bit signed integer fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_struct_2d_numeric.m],
[
try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int8((1:12)),3,4);
    expdata(1).field2 = reshape(int8((13:24)),3,4);
    expdata(2).field1 = reshape(int8((25:36)),3,4);
    expdata(2).field2 = reshape(int8((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c int8 write_struct_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 8-bit unsigned integer fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_struct_2d_numeric.m],
[
try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint8((1:12)),3,4);
    expdata(1).field2 = reshape(uint8((13:24)),3,4);
    expdata(2).field1 = reshape(uint8((25:36)),3,4);
    expdata(2).field2 = reshape(uint8((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c uint8 write_struct_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write structure array with 2D double-precision complex fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_struct_complex_2d_numeric.m],
[
try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape((1:12) + j*(51:62),3,4);
    expdata(1).field2 = reshape((13:24) + j*(63:74),3,4);
    expdata(2).field1 = reshape((25:36) + j*(75:86),3,4);
    expdata(2).field2 = reshape((37:48) + j*(87:98),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -z write_struct_complex_2d_numeric],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write structure array with 2D single-precision complex fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_struct_complex_2d_numeric.m],
[
try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(single((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(single((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(single((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(single((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c single write_struct_complex_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 64-bit signed integer complex fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_SKIP_IF([test $HAVE_INT64 -eq 0])
AT_DATA([test_write_struct_complex_2d_numeric.m],
[
try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int64((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int64((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int64((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int64((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c int64 write_struct_complex_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 64-bit unsigned integer complex fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_SKIP_IF([test $HAVE_UINT64 -eq 0])
AT_DATA([test_write_struct_complex_2d_numeric.m],
[
try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint64((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint64((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint64((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint64((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c uint64 write_struct_complex_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 32-bit signed integer complex fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_struct_complex_2d_numeric.m],
[
try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int32((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int32((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int32((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int32((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c int32 write_struct_complex_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 32-bit unsigned integer complex fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_struct_complex_2d_numeric.m],
[
try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint32((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint32((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint32((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint32((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c uint32 write_struct_complex_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 16-bit signed integer complex fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_struct_complex_2d_numeric.m],
[
try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int16((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int16((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int16((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int16((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c int16 write_struct_complex_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 16-bit unsigned integer complex fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_struct_complex_2d_numeric.m],
[
try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint16((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint16((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint16((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint16((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c uint16 write_struct_complex_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 8-bit signed integer complex fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_struct_complex_2d_numeric.m],
[
try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int8((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int8((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int8((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int8((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c int8 write_struct_complex_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write structure array with 2D 8-bit unsigned integer complex fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_struct_complex_2d_numeric.m],
[
try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint8((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint8((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint8((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint8((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c uint8 write_struct_complex_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write empty cell array])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_empty_cell.m],
[
try
    load test_write_empty_cell.mat
    expdata1 = cell(0,1);
    expdata2 = {zeros(0,1);zeros(0,1)};
    pass = true;
    pass = pass && isequal(var1,expdata1);
    pass = pass && isequal(var2,expdata2);
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])AT_CHECK([$builddir/test_mat -v 7.3 write_empty_cell],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_empty_cell;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write cell array with 2D double-precision fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_cell_2d_numeric.m],
[
try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape((1:12),3,4);reshape((13:24),3,4);...
               reshape((25:36),3,4);reshape((37:48),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 write_cell_2d_numeric],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write cell array with 2D single-precision fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_cell_2d_numeric.m],
[
try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(single((1:12)),3,4);reshape(single((13:24)),3,4);...
               reshape(single((25:36)),3,4);reshape(single((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c single write_cell_2d_numeric],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 64-bit signed integer fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_SKIP_IF([test $HAVE_INT64 -eq 0])
AT_DATA([test_write_cell_2d_numeric.m],
[
try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int64((1:12)),3,4);reshape(int64((13:24)),3,4);...
               reshape(int64((25:36)),3,4);reshape(int64((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c int64 write_cell_2d_numeric],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 64-bit unsigned integer fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_SKIP_IF([test $HAVE_UINT64 -eq 0])
AT_DATA([test_write_cell_2d_numeric.m],
[
try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint64((1:12)),3,4);reshape(uint64((13:24)),3,4);...
               reshape(uint64((25:36)),3,4);reshape(uint64((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c uint64 write_cell_2d_numeric],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 32-bit signed integer fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_cell_2d_numeric.m],
[
try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int32((1:12)),3,4);reshape(int32((13:24)),3,4);...
               reshape(int32((25:36)),3,4);reshape(int32((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c int32 write_cell_2d_numeric],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 32-bit unsigned integer fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_cell_2d_numeric.m],
[
try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint32((1:12)),3,4);reshape(uint32((13:24)),3,4);...
               reshape(uint32((25:36)),3,4);reshape(uint32((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c uint32 write_cell_2d_numeric],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 16-bit signed integer fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_cell_2d_numeric.m],
[
try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int16((1:12)),3,4);reshape(int16((13:24)),3,4);...
               reshape(int16((25:36)),3,4);reshape(int16((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c int16 write_cell_2d_numeric],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 16-bit unsigned integer fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_cell_2d_numeric.m],
[
try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint16((1:12)),3,4);reshape(uint16((13:24)),3,4);...
               reshape(uint16((25:36)),3,4);reshape(uint16((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c uint16 write_cell_2d_numeric],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 8-bit signed integer fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_cell_2d_numeric.m],
[
try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int8((1:12)),3,4);reshape(int8((13:24)),3,4);...
               reshape(int8((25:36)),3,4);reshape(int8((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c int8 write_cell_2d_numeric],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 8-bit unsigned integer fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_cell_2d_numeric.m],
[
try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint8((1:12)),3,4);reshape(uint8((13:24)),3,4);...
               reshape(uint8((25:36)),3,4);reshape(uint8((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c uint8 write_cell_2d_numeric],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write cell array with 2D double-precision complex fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_cell_complex_2d_numeric.m],
[
try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape((1:12)+j*(51:62),3,4);...
               reshape((13:24)+j*(63:74),3,4);...
               reshape((25:36)+j*(75:86),3,4);...
               reshape((37:48)+j*(87:98),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 write_cell_complex_2d_numeric],[0],
         [ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write cell array with 2D single-precision complex fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_cell_complex_2d_numeric.m],
[
try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(single((1:12)+j*(51:62)),3,4);...
               reshape(single((13:24)+j*(63:74)),3,4);...
               reshape(single((25:36)+j*(75:86)),3,4);...
               reshape(single((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c single write_cell_complex_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 64-bit signed integer complex fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_SKIP_IF([test $HAVE_INT64 -eq 0])
AT_DATA([test_write_cell_complex_2d_numeric.m],
[
try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int64((1:12)+j*(51:62)),3,4);...
               reshape(int64((13:24)+j*(63:74)),3,4);...
               reshape(int64((25:36)+j*(75:86)),3,4);...
               reshape(int64((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c int64 write_cell_complex_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 64-bit unsigned integer complex fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_SKIP_IF([test $HAVE_UINT64 -eq 0])
AT_DATA([test_write_cell_complex_2d_numeric.m],
[
try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint64((1:12)+j*(51:62)),3,4);...
               reshape(uint64((13:24)+j*(63:74)),3,4);...
               reshape(uint64((25:36)+j*(75:86)),3,4);...
               reshape(uint64((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c uint64 write_cell_complex_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 32-bit signed integer complex fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_cell_complex_2d_numeric.m],
[
try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int32((1:12)+j*(51:62)),3,4);...
               reshape(int32((13:24)+j*(63:74)),3,4);...
               reshape(int32((25:36)+j*(75:86)),3,4);...
               reshape(int32((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c int32 write_cell_complex_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 32-bit unsigned integer complex fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_cell_complex_2d_numeric.m],
[
try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint32((1:12)+j*(51:62)),3,4);...
               reshape(uint32((13:24)+j*(63:74)),3,4);...
               reshape(uint32((25:36)+j*(75:86)),3,4);...
               reshape(uint32((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c uint32 write_cell_complex_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 16-bit signed integer complex fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_cell_complex_2d_numeric.m],
[
try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int16((1:12)+j*(51:62)),3,4);...
               reshape(int16((13:24)+j*(63:74)),3,4);...
               reshape(int16((25:36)+j*(75:86)),3,4);...
               reshape(int16((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c int16 write_cell_complex_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 16-bit unsigned integer complex fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_cell_complex_2d_numeric.m],
[
try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint16((1:12)+j*(51:62)),3,4);...
               reshape(uint16((13:24)+j*(63:74)),3,4);...
               reshape(uint16((25:36)+j*(75:86)),3,4);...
               reshape(uint16((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c uint16 write_cell_complex_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 8-bit signed integer complex fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_cell_complex_2d_numeric.m],
[
try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int8((1:12)+j*(51:62)),3,4);...
               reshape(int8((13:24)+j*(63:74)),3,4);...
               reshape(int8((25:36)+j*(75:86)),3,4);...
               reshape(int8((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c int8 write_cell_complex_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP

AT_SETUP([Write cell array with 2D 8-bit unsigned integer complex fields])
AT_SKIP_IF([test $MAT73 -ne 1])
AT_DATA([test_write_cell_complex_2d_numeric.m],
[
try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint8((1:12)+j*(51:62)),3,4);...
               reshape(uint8((13:24)+j*(63:74)),3,4);...
               reshape(uint8((25:36)+j*(75:86)),3,4);...
               reshape(uint8((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
])
AT_CHECK([$builddir/test_mat -v 7.3 -c uint8 write_cell_complex_2d_numeric],
         [0],[ignore],[ignore])
AT_SKIP_IF([test -z "$MATLABEXE"])
AT_CHECK([$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED],[0],[PASSED
],[ignore])
AT_CLEANUP
