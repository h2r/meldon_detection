#! /bin/sh
# Generated from ../../../src/matio/test/testsuite.at by GNU Autoconf 2.68.
#
# Copyright (C) 2009, 2010 Free Software Foundation, Inc.
#
# This test suite is free software; the Free Software Foundation gives
# unlimited permission to copy, distribute and modify it.
## -------------------- ##
## M4sh Initialization. ##
## -------------------- ##

# Be more Bourne compatible
DUALCASE=1; export DUALCASE # for MKS sh
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then :
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in #(
  *posix*) :
    set -o posix ;; #(
  *) :
     ;;
esac
fi


as_nl='
'
export as_nl
# Printing a long string crashes Solaris 7 /usr/bin/printf.
as_echo='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo
as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo$as_echo
# Prefer a ksh shell builtin over an external printf program on Solaris,
# but without wasting forks for bash or zsh.
if test -z "$BASH_VERSION$ZSH_VERSION" \
    && (test "X`print -r -- $as_echo`" = "X$as_echo") 2>/dev/null; then
  as_echo='print -r --'
  as_echo_n='print -rn --'
elif (test "X`printf %s $as_echo`" = "X$as_echo") 2>/dev/null; then
  as_echo='printf %s\n'
  as_echo_n='printf %s'
else
  if test "X`(/usr/ucb/echo -n -n $as_echo) 2>/dev/null`" = "X-n $as_echo"; then
    as_echo_body='eval /usr/ucb/echo -n "$1$as_nl"'
    as_echo_n='/usr/ucb/echo -n'
  else
    as_echo_body='eval expr "X$1" : "X\\(.*\\)"'
    as_echo_n_body='eval
      arg=$1;
      case $arg in #(
      *"$as_nl"*)
	expr "X$arg" : "X\\(.*\\)$as_nl";
	arg=`expr "X$arg" : ".*$as_nl\\(.*\\)"`;;
      esac;
      expr "X$arg" : "X\\(.*\\)" | tr -d "$as_nl"
    '
    export as_echo_n_body
    as_echo_n='sh -c $as_echo_n_body as_echo'
  fi
  export as_echo_body
  as_echo='sh -c $as_echo_body as_echo'
fi

# The user is always right.
if test "${PATH_SEPARATOR+set}" != set; then
  PATH_SEPARATOR=:
  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {
    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||
      PATH_SEPARATOR=';'
  }
fi


# IFS
# We need space, tab and new line, in precisely that order.  Quoting is
# there to prevent editors from complaining about space-tab.
# (If _AS_PATH_WALK were called with IFS unset, it would disable word
# splitting by setting IFS to empty value.)
IFS=" ""	$as_nl"

# Find who we are.  Look in the path if we contain no directory separator.
as_myself=
case $0 in #((
  *[\\/]* ) as_myself=$0 ;;
  *) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    test -r "$as_dir/$0" && as_myself=$as_dir/$0 && break
  done
IFS=$as_save_IFS

     ;;
esac
# We did not find ourselves, most probably we were run as `sh COMMAND'
# in which case we are not to be found in the path.
if test "x$as_myself" = x; then
  as_myself=$0
fi
if test ! -f "$as_myself"; then
  $as_echo "$as_myself: error: cannot find myself; rerun with an absolute file name" >&2
  exit 1
fi

# Unset variables that we do not need and which cause bugs (e.g. in
# pre-3.0 UWIN ksh).  But do not cause bugs in bash 2.01; the "|| exit 1"
# suppresses any "Segmentation fault" message there.  '((' could
# trigger a bug in pdksh 5.2.14.
for as_var in BASH_ENV ENV MAIL MAILPATH
do eval test x\${$as_var+set} = xset \
  && ( (unset $as_var) || exit 1) >/dev/null 2>&1 && unset $as_var || :
done
PS1='$ '
PS2='> '
PS4='+ '

# NLS nuisances.
LC_ALL=C
export LC_ALL
LANGUAGE=C
export LANGUAGE

# CDPATH.
(unset CDPATH) >/dev/null 2>&1 && unset CDPATH

if test "x$CONFIG_SHELL" = x; then
  as_bourne_compatible="if test -n \"\${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on \${1+\"\$@\"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '\${1+\"\$@\"}'='\"\$@\"'
  setopt NO_GLOB_SUBST
else
  case \`(set -o) 2>/dev/null\` in #(
  *posix*) :
    set -o posix ;; #(
  *) :
     ;;
esac
fi
"
  as_required="as_fn_return () { (exit \$1); }
as_fn_success () { as_fn_return 0; }
as_fn_failure () { as_fn_return 1; }
as_fn_ret_success () { return 0; }
as_fn_ret_failure () { return 1; }

exitcode=0
as_fn_success || { exitcode=1; echo as_fn_success failed.; }
as_fn_failure && { exitcode=1; echo as_fn_failure succeeded.; }
as_fn_ret_success || { exitcode=1; echo as_fn_ret_success failed.; }
as_fn_ret_failure && { exitcode=1; echo as_fn_ret_failure succeeded.; }
if ( set x; as_fn_ret_success y && test x = \"\$1\" ); then :

else
  exitcode=1; echo positional parameters were not saved.
fi
test x\$exitcode = x0 || exit 1"
  as_suggested="  as_lineno_1=";as_suggested=$as_suggested$LINENO;as_suggested=$as_suggested" as_lineno_1a=\$LINENO
  as_lineno_2=";as_suggested=$as_suggested$LINENO;as_suggested=$as_suggested" as_lineno_2a=\$LINENO
  eval 'test \"x\$as_lineno_1'\$as_run'\" != \"x\$as_lineno_2'\$as_run'\" &&
  test \"x\`expr \$as_lineno_1'\$as_run' + 1\`\" = \"x\$as_lineno_2'\$as_run'\"' || exit 1
test \$(( 1 + 1 )) = 2 || exit 1"
  if (eval "$as_required") 2>/dev/null; then :
  as_have_required=yes
else
  as_have_required=no
fi
  if test x$as_have_required = xyes && (eval "$as_suggested") 2>/dev/null; then :

else
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
as_found=false
for as_dir in /bin$PATH_SEPARATOR/usr/bin$PATH_SEPARATOR$PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  as_found=:
  case $as_dir in #(
	 /*)
	   for as_base in sh bash ksh sh5; do
	     # Try only shells that exist, to save several forks.
	     as_shell=$as_dir/$as_base
	     if { test -f "$as_shell" || test -f "$as_shell.exe"; } &&
		    { $as_echo "$as_bourne_compatible""$as_required" | as_run=a "$as_shell"; } 2>/dev/null; then :
  CONFIG_SHELL=$as_shell as_have_required=yes
		   if { $as_echo "$as_bourne_compatible""$as_suggested" | as_run=a "$as_shell"; } 2>/dev/null; then :
  break 2
fi
fi
	   done;;
       esac
  as_found=false
done
$as_found || { if { test -f "$SHELL" || test -f "$SHELL.exe"; } &&
	      { $as_echo "$as_bourne_compatible""$as_required" | as_run=a "$SHELL"; } 2>/dev/null; then :
  CONFIG_SHELL=$SHELL as_have_required=yes
fi; }
IFS=$as_save_IFS


      if test "x$CONFIG_SHELL" != x; then :
  # We cannot yet assume a decent shell, so we have to provide a
	# neutralization value for shells without unset; and this also
	# works around shells that cannot unset nonexistent variables.
	# Preserve -v and -x to the replacement shell.
	BASH_ENV=/dev/null
	ENV=/dev/null
	(unset BASH_ENV) >/dev/null 2>&1 && unset BASH_ENV ENV
	export CONFIG_SHELL
	case $- in # ((((
	  *v*x* | *x*v* ) as_opts=-vx ;;
	  *v* ) as_opts=-v ;;
	  *x* ) as_opts=-x ;;
	  * ) as_opts= ;;
	esac
	exec "$CONFIG_SHELL" $as_opts "$as_myself" ${1+"$@"}
fi

    if test x$as_have_required = xno; then :
  $as_echo "$0: This script requires a shell more modern than all"
  $as_echo "$0: the shells that I found on your system."
  if test x${ZSH_VERSION+set} = xset ; then
    $as_echo "$0: In particular, zsh $ZSH_VERSION has bugs and should"
    $as_echo "$0: be upgraded to zsh 4.3.4 or later."
  else
    $as_echo "$0: Please tell bug-autoconf@gnu.org about your system,
$0: including any error possibly output before this
$0: message. Then install a modern shell, or manually run
$0: the script under such a shell if you do have one."
  fi
  exit 1
fi
fi
fi
SHELL=${CONFIG_SHELL-/bin/sh}
export SHELL
# Unset more variables known to interfere with behavior of common tools.
CLICOLOR_FORCE= GREP_OPTIONS=
unset CLICOLOR_FORCE GREP_OPTIONS

## --------------------- ##
## M4sh Shell Functions. ##
## --------------------- ##
# as_fn_unset VAR
# ---------------
# Portably unset VAR.
as_fn_unset ()
{
  { eval $1=; unset $1;}
}
as_unset=as_fn_unset

# as_fn_set_status STATUS
# -----------------------
# Set $? to STATUS, without forking.
as_fn_set_status ()
{
  return $1
} # as_fn_set_status

# as_fn_exit STATUS
# -----------------
# Exit the shell with STATUS, even in a "trap 0" or "set -e" context.
as_fn_exit ()
{
  set +e
  as_fn_set_status $1
  exit $1
} # as_fn_exit

# as_fn_mkdir_p
# -------------
# Create "$as_dir" as a directory, including parents if necessary.
as_fn_mkdir_p ()
{

  case $as_dir in #(
  -*) as_dir=./$as_dir;;
  esac
  test -d "$as_dir" || eval $as_mkdir_p || {
    as_dirs=
    while :; do
      case $as_dir in #(
      *\'*) as_qdir=`$as_echo "$as_dir" | sed "s/'/'\\\\\\\\''/g"`;; #'(
      *) as_qdir=$as_dir;;
      esac
      as_dirs="'$as_qdir' $as_dirs"
      as_dir=`$as_dirname -- "$as_dir" ||
$as_expr X"$as_dir" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$as_dir" : 'X\(//\)[^/]' \| \
	 X"$as_dir" : 'X\(//\)$' \| \
	 X"$as_dir" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X"$as_dir" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
      test -d "$as_dir" && break
    done
    test -z "$as_dirs" || eval "mkdir $as_dirs"
  } || test -d "$as_dir" || as_fn_error $? "cannot create directory $as_dir"


} # as_fn_mkdir_p
# as_fn_append VAR VALUE
# ----------------------
# Append the text in VALUE to the end of the definition contained in VAR. Take
# advantage of any shell optimizations that allow amortized linear growth over
# repeated appends, instead of the typical quadratic growth present in naive
# implementations.
if (eval "as_var=1; as_var+=2; test x\$as_var = x12") 2>/dev/null; then :
  eval 'as_fn_append ()
  {
    eval $1+=\$2
  }'
else
  as_fn_append ()
  {
    eval $1=\$$1\$2
  }
fi # as_fn_append

# as_fn_arith ARG...
# ------------------
# Perform arithmetic evaluation on the ARGs, and store the result in the
# global $as_val. Take advantage of shells that can avoid forks. The arguments
# must be portable across $(()) and expr.
if (eval "test \$(( 1 + 1 )) = 2") 2>/dev/null; then :
  eval 'as_fn_arith ()
  {
    as_val=$(( $* ))
  }'
else
  as_fn_arith ()
  {
    as_val=`expr "$@" || test $? -eq 1`
  }
fi # as_fn_arith


# as_fn_error STATUS ERROR [LINENO LOG_FD]
# ----------------------------------------
# Output "`basename $0`: error: ERROR" to stderr. If LINENO and LOG_FD are
# provided, also output the error to LOG_FD, referencing LINENO. Then exit the
# script with STATUS, using 1 if that was 0.
as_fn_error ()
{
  as_status=$1; test $as_status -eq 0 && as_status=1
  if test "$4"; then
    as_lineno=${as_lineno-"$3"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
    $as_echo "$as_me:${as_lineno-$LINENO}: error: $2" >&$4
  fi
  $as_echo "$as_me: error: $2" >&2
  as_fn_exit $as_status
} # as_fn_error

if expr a : '\(a\)' >/dev/null 2>&1 &&
   test "X`expr 00001 : '.*\(...\)'`" = X001; then
  as_expr=expr
else
  as_expr=false
fi

if (basename -- /) >/dev/null 2>&1 && test "X`basename -- / 2>&1`" = "X/"; then
  as_basename=basename
else
  as_basename=false
fi

as_me=`$as_basename -- "$0" ||
$as_expr X/"$0" : '.*/\([^/][^/]*\)/*$' \| \
	 X"$0" : 'X\(//\)$' \| \
	 X"$0" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X/"$0" |
    sed '/^.*\/\([^/][^/]*\)\/*$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`

if (as_dir=`dirname -- /` && test "X$as_dir" = X/) >/dev/null 2>&1; then
  as_dirname=dirname
else
  as_dirname=false
fi

# Avoid depending upon Character Ranges.
as_cr_letters='abcdefghijklmnopqrstuvwxyz'
as_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
as_cr_Letters=$as_cr_letters$as_cr_LETTERS
as_cr_digits='0123456789'
as_cr_alnum=$as_cr_Letters$as_cr_digits


  as_lineno_1=$LINENO as_lineno_1a=$LINENO
  as_lineno_2=$LINENO as_lineno_2a=$LINENO
  eval 'test "x$as_lineno_1'$as_run'" != "x$as_lineno_2'$as_run'" &&
  test "x`expr $as_lineno_1'$as_run' + 1`" = "x$as_lineno_2'$as_run'"' || {
  # Blame Lee E. McMahon (1931-1989) for sed's syntax.  :-)
  sed -n '
    p
    /[$]LINENO/=
  ' <$as_myself |
    sed '
      s/[$]LINENO.*/&-/
      t lineno
      b
      :lineno
      N
      :loop
      s/[$]LINENO\([^'$as_cr_alnum'_].*\n\)\(.*\)/\2\1\2/
      t loop
      s/-\n.*//
    ' >$as_me.lineno &&
  chmod +x "$as_me.lineno" ||
    { $as_echo "$as_me: error: cannot create $as_me.lineno; rerun with a POSIX shell" >&2; as_fn_exit 1; }

  # Don't try to exec as it changes $[0], causing all sort of problems
  # (the dirname of $[0] is not the place where we might find the
  # original and so on.  Autoconf is especially sensitive to this).
  . "./$as_me.lineno"
  # Exit status is that of the last command.
  exit
}

ECHO_C= ECHO_N= ECHO_T=
case `echo -n x` in #(((((
-n*)
  case `echo 'xy\c'` in
  *c*) ECHO_T='	';;	# ECHO_T is single tab character.
  xy)  ECHO_C='\c';;
  *)   echo `echo ksh88 bug on AIX 6.1` > /dev/null
       ECHO_T='	';;
  esac;;
*)
  ECHO_N='-n';;
esac

rm -f conf$$ conf$$.exe conf$$.file
if test -d conf$$.dir; then
  rm -f conf$$.dir/conf$$.file
else
  rm -f conf$$.dir
  mkdir conf$$.dir 2>/dev/null
fi
if (echo >conf$$.file) 2>/dev/null; then
  if ln -s conf$$.file conf$$ 2>/dev/null; then
    as_ln_s='ln -s'
    # ... but there are two gotchas:
    # 1) On MSYS, both `ln -s file dir' and `ln file dir' fail.
    # 2) DJGPP < 2.04 has no symlinks; `ln -s' creates a wrapper executable.
    # In both cases, we have to default to `cp -p'.
    ln -s conf$$.file conf$$.dir 2>/dev/null && test ! -f conf$$.exe ||
      as_ln_s='cp -p'
  elif ln conf$$.file conf$$ 2>/dev/null; then
    as_ln_s=ln
  else
    as_ln_s='cp -p'
  fi
else
  as_ln_s='cp -p'
fi
rm -f conf$$ conf$$.exe conf$$.dir/conf$$.file conf$$.file
rmdir conf$$.dir 2>/dev/null

if mkdir -p . 2>/dev/null; then
  as_mkdir_p='mkdir -p "$as_dir"'
else
  test -d ./-p && rmdir ./-p
  as_mkdir_p=false
fi

if test -x / >/dev/null 2>&1; then
  as_test_x='test -x'
else
  if ls -dL / >/dev/null 2>&1; then
    as_ls_L_option=L
  else
    as_ls_L_option=
  fi
  as_test_x='
    eval sh -c '\''
      if test -d "$1"; then
	test -d "$1/.";
      else
	case $1 in #(
	-*)set "./$1";;
	esac;
	case `ls -ld'$as_ls_L_option' "$1" 2>/dev/null` in #((
	???[sx]*):;;*)false;;esac;fi
    '\'' sh
  '
fi
as_executable_p=$as_test_x

# Sed expression to map a string onto a valid CPP name.
as_tr_cpp="eval sed 'y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g'"

# Sed expression to map a string onto a valid variable name.
as_tr_sh="eval sed 'y%*+%pp%;s%[^_$as_cr_alnum]%_%g'"





SHELL=${CONFIG_SHELL-/bin/sh}

# How were we run?
at_cli_args="$@"


# Not all shells have the 'times' builtin; the subshell is needed to make
# sure we discard the 'times: not found' message from the shell.
at_times_p=false
(times) >/dev/null 2>&1 && at_times_p=:

# CLI Arguments to pass to the debugging scripts.
at_debug_args=
# -e sets to true
at_errexit_p=false
# Shall we be verbose?  ':' means no, empty means yes.
at_verbose=:
at_quiet=
# Running several jobs in parallel, 0 means as many as test groups.
at_jobs=1
at_traceon=:
at_trace_echo=:
at_check_filter_trace=:

# Shall we keep the debug scripts?  Must be `:' when the suite is
# run by a debug script, so that the script doesn't remove itself.
at_debug_p=false
# Display help message?
at_help_p=false
# Display the version message?
at_version_p=false
# List test groups?
at_list_p=false
# --clean
at_clean=false
# Test groups to run
at_groups=
# Whether to rerun failed tests.
at_recheck=
# Whether a write failure occurred
at_write_fail=0

# The directory we run the suite in.  Default to . if no -C option.
at_dir=`pwd`
# An absolute reference to this testsuite script.
case $as_myself in
  [\\/]* | ?:[\\/]* ) at_myself=$as_myself ;;
  * ) at_myself=$at_dir/$as_myself ;;
esac
# Whether -C is in effect.
at_change_dir=false

# Whether to enable colored test results.
at_color=auto
# List of the tested programs.
at_tested='test_mat'
# As many question marks as there are digits in the last test group number.
# Used to normalize the test group numbers so that `ls' lists them in
# numerical order.
at_format='???'
# Description of all the test groups.
at_help_all="1;mat4_read.at:19;Read 2d double-precision array;;
2;mat4_read.at:36;Read 2d double-precision complex array;;
3;mat5_uncompressed_read_le.at:17;Read 2D double-precision array;;
4;mat5_uncompressed_read_le.at:34;Read 2D single-precision array;;
5;mat5_uncompressed_read_le.at:51;Read 2D 64-bit integer array;;
6;mat5_uncompressed_read_le.at:68;Read 2D 64-bit unsigned integer array;;
7;mat5_uncompressed_read_le.at:85;Read 2D 32-bit integer array;;
8;mat5_uncompressed_read_le.at:102;Read 2D 32-bit unsigned integer array;;
9;mat5_uncompressed_read_le.at:119;Read 2D 16-bit integer array;;
10;mat5_uncompressed_read_le.at:136;Read 2D 16-bit unsigned integer array;;
11;mat5_uncompressed_read_le.at:153;Read 2D 8-bit integer array;;
12;mat5_uncompressed_read_le.at:170;Read 2D 8-bit unsigned integer array;;
13;mat5_uncompressed_read_le.at:187;Read 2D double-precision complex array;;
14;mat5_uncompressed_read_le.at:204;Read 2D single-precision complex array;;
15;mat5_uncompressed_read_le.at:221;Read 2D 64-bit integer complex array;;
16;mat5_uncompressed_read_le.at:238;Read 2D 64-bit unsigned integer complex array;;
17;mat5_uncompressed_read_le.at:255;Read 2D 32-bit integer complex array;;
18;mat5_uncompressed_read_le.at:272;Read 2D 32-bit unsigned integer complex array;;
19;mat5_uncompressed_read_le.at:289;Read 2D 16-bit integer complex array;;
20;mat5_uncompressed_read_le.at:306;Read 2D 16-bit unsigned integer complex array;;
21;mat5_uncompressed_read_le.at:323;Read 2D 8-bit integer complex array;;
22;mat5_uncompressed_read_le.at:340;Read 2D 8-bit unsigned integer complex array;;
23;mat5_uncompressed_read_le.at:357;Read double-precision sparse array;;
24;mat5_uncompressed_read_le.at:375;Read double-precision sparse complex array;;
25;mat5_uncompressed_read_le.at:393;Read empty array;;
26;mat5_uncompressed_read_le.at:403;Read 2D character array;;
27;mat5_uncompressed_read_le.at:420;Read empty structure array;;
28;mat5_uncompressed_read_le.at:432;Read empty structure array with fields;;
29;mat5_uncompressed_read_le.at:449;Read structure array with empty fields;;
30;mat5_uncompressed_read_le.at:483;Read structure array with double-precision fields;;
31;mat5_uncompressed_read_le.at:532;Read structure array with single-precision fields;;
32;mat5_uncompressed_read_le.at:581;Read structure array with 64-bit integer fields;;
33;mat5_uncompressed_read_le.at:630;Read structure array with 64-bit unsigned integer fields;;
34;mat5_uncompressed_read_le.at:679;Read structure array with 32-bit integer fields;;
35;mat5_uncompressed_read_le.at:728;Read structure array with 32-bit unsigned integer fields;;
36;mat5_uncompressed_read_le.at:777;Read structure array with 16-bit integer fields;;
37;mat5_uncompressed_read_le.at:826;Read structure array with 16-bit unsigned integer fields;;
38;mat5_uncompressed_read_le.at:875;Read structure array with 8-bit integer fields;;
39;mat5_uncompressed_read_le.at:924;Read structure array with 8-bit unsigned integer fields;;
40;mat5_uncompressed_read_le.at:973;Read structure array with complex double-precision fields;;
41;mat5_uncompressed_read_le.at:1022;Read structure array with complex single-precision fields;;
42;mat5_uncompressed_read_le.at:1071;Read structure array with complex 64-bit integer fields;;
43;mat5_uncompressed_read_le.at:1120;Read structure array with complex 64-bit unsigned integer fields;;
44;mat5_uncompressed_read_le.at:1169;Read structure array with complex 32-bit integer fields;;
45;mat5_uncompressed_read_le.at:1218;Read structure array with complex 32-bit unsigned integer fields;;
46;mat5_uncompressed_read_le.at:1267;Read structure array with complex 16-bit integer fields;;
47;mat5_uncompressed_read_le.at:1316;Read structure array with complex 16-bit unsigned integer fields;;
48;mat5_uncompressed_read_le.at:1365;Read structure array with complex 8-bit integer fields;;
49;mat5_uncompressed_read_le.at:1414;Read structure array with complex 8-bit unsigned integer fields;;
50;mat5_compressed_read_le.at:17;Read 2D double-precision array;;
51;mat5_compressed_read_le.at:35;Read 2D single-precision array;;
52;mat5_compressed_read_le.at:53;Read 2D 64-bit integer array;;
53;mat5_compressed_read_le.at:71;Read 2D 64-bit unsigned integer array;;
54;mat5_compressed_read_le.at:89;Read 2D 32-bit integer array;;
55;mat5_compressed_read_le.at:107;Read 2D 32-bit unsigned integer array;;
56;mat5_compressed_read_le.at:125;Read 2D 16-bit integer array;;
57;mat5_compressed_read_le.at:143;Read 2D 16-bit unsigned integer array;;
58;mat5_compressed_read_le.at:161;Read 2D 8-bit integer array;;
59;mat5_compressed_read_le.at:179;Read 2D 8-bit unsigned integer array;;
60;mat5_compressed_read_le.at:197;Read 2D double-precision complex array;;
61;mat5_compressed_read_le.at:215;Read 2D single-precision complex array;;
62;mat5_compressed_read_le.at:233;Read 2D 64-bit integer complex array;;
63;mat5_compressed_read_le.at:251;Read 2D 64-bit unsigned integer complex array;;
64;mat5_compressed_read_le.at:269;Read 2D 32-bit integer complex array;;
65;mat5_compressed_read_le.at:287;Read 2D 32-bit unsigned integer complex array;;
66;mat5_compressed_read_le.at:305;Read 2D 16-bit integer complex array;;
67;mat5_compressed_read_le.at:323;Read 2D 16-bit unsigned integer complex array;;
68;mat5_compressed_read_le.at:341;Read 2D 8-bit integer complex array;;
69;mat5_compressed_read_le.at:359;Read 2D 8-bit unsigned integer complex array;;
70;mat5_compressed_read_le.at:377;Read double-precision sparse array;;
71;mat5_compressed_read_le.at:396;Read double-precision sparse complex array;;
72;mat5_compressed_read_le.at:415;Read empty array;;
73;mat5_compressed_read_le.at:426;Read 2D character array;;
74;mat5_compressed_read_le.at:444;Read empty structure array;;
75;mat5_compressed_read_le.at:457;Read empty structure array with fields;;
76;mat5_compressed_read_le.at:475;Read structure array with empty fields;;
77;mat5_compressed_read_le.at:510;Read structure array with double-precision fields;;
78;mat5_compressed_read_le.at:560;Read structure array with single-precision fields;;
79;mat5_compressed_read_le.at:610;Read structure array with 64-bit integer fields;;
80;mat5_compressed_read_le.at:660;Read structure array with 64-bit unsigned integer fields;;
81;mat5_compressed_read_le.at:710;Read structure array with 32-bit integer fields;;
82;mat5_compressed_read_le.at:760;Read structure array with 32-bit unsigned integer fields;;
83;mat5_compressed_read_le.at:810;Read structure array with 16-bit integer fields;;
84;mat5_compressed_read_le.at:860;Read structure array with 16-bit unsigned integer fields;;
85;mat5_compressed_read_le.at:910;Read structure array with 8-bit integer fields;;
86;mat5_compressed_read_le.at:960;Read structure array with 8-bit unsigned integer fields;;
87;mat5_compressed_read_le.at:1010;Read structure array with complex double-precision fields;;
88;mat5_compressed_read_le.at:1060;Read structure array with complex single-precision fields;;
89;mat5_compressed_read_le.at:1110;Read structure array with complex 64-bit integer fields;;
90;mat5_compressed_read_le.at:1160;Read structure array with complex 64-bit unsigned integer fields;;
91;mat5_compressed_read_le.at:1210;Read structure array with complex 32-bit integer fields;;
92;mat5_compressed_read_le.at:1260;Read structure array with complex 32-bit unsigned integer fields;;
93;mat5_compressed_read_le.at:1310;Read structure array with complex 16-bit integer fields;;
94;mat5_compressed_read_le.at:1360;Read structure array with complex 16-bit unsigned integer fields;;
95;mat5_compressed_read_le.at:1410;Read structure array with complex 8-bit integer fields;;
96;mat5_compressed_read_le.at:1460;Read structure array with complex 8-bit unsigned integer fields;;
97;mat5_uncompressed_read_be.at:17;Read 2D double-precision array;;
98;mat5_uncompressed_read_be.at:34;Read 2D single-precision array;;
99;mat5_uncompressed_read_be.at:51;Read 2D 64-bit integer array;;
100;mat5_uncompressed_read_be.at:68;Read 2D 64-bit unsigned integer array;;
101;mat5_uncompressed_read_be.at:85;Read 2D 32-bit integer array;;
102;mat5_uncompressed_read_be.at:102;Read 2D 32-bit unsigned integer array;;
103;mat5_uncompressed_read_be.at:119;Read 2D 16-bit integer array;;
104;mat5_uncompressed_read_be.at:136;Read 2D 16-bit unsigned integer array;;
105;mat5_uncompressed_read_be.at:153;Read 2D 8-bit integer array;;
106;mat5_uncompressed_read_be.at:170;Read 2D 8-bit unsigned integer array;;
107;mat5_uncompressed_read_be.at:187;Read 2D double-precision complex array;;
108;mat5_uncompressed_read_be.at:204;Read 2D single-precision complex array;;
109;mat5_uncompressed_read_be.at:221;Read 2D 64-bit integer complex array;;
110;mat5_uncompressed_read_be.at:238;Read 2D 64-bit unsigned integer complex array;;
111;mat5_uncompressed_read_be.at:255;Read 2D 32-bit integer complex array;;
112;mat5_uncompressed_read_be.at:272;Read 2D 32-bit unsigned integer complex array;;
113;mat5_uncompressed_read_be.at:289;Read 2D 16-bit integer complex array;;
114;mat5_uncompressed_read_be.at:306;Read 2D 16-bit unsigned integer complex array;;
115;mat5_uncompressed_read_be.at:323;Read 2D 8-bit integer complex array;;
116;mat5_uncompressed_read_be.at:340;Read 2D 8-bit unsigned integer complex array;;
117;mat5_uncompressed_read_be.at:357;Read double-precision sparse array;;
118;mat5_uncompressed_read_be.at:375;Read double-precision sparse complex array;;
119;mat5_uncompressed_read_be.at:393;Read empty array;;
120;mat5_uncompressed_read_be.at:403;Read 2D character array;;
121;mat5_uncompressed_read_be.at:420;Read empty structure array;;
122;mat5_uncompressed_read_be.at:431;Read empty structure array with fields;;
123;mat5_uncompressed_read_be.at:447;Read structure array with empty fields;;
124;mat5_uncompressed_read_be.at:480;Read structure array with double-precision fields;;
125;mat5_uncompressed_read_be.at:528;Read structure array with single-precision fields;;
126;mat5_uncompressed_read_be.at:576;Read structure array with 64-bit integer fields;;
127;mat5_uncompressed_read_be.at:624;Read structure array with 64-bit unsigned integer fields;;
128;mat5_uncompressed_read_be.at:672;Read structure array with 32-bit integer fields;;
129;mat5_uncompressed_read_be.at:720;Read structure array with 32-bit unsigned integer fields;;
130;mat5_uncompressed_read_be.at:768;Read structure array with 16-bit integer fields;;
131;mat5_uncompressed_read_be.at:816;Read structure array with 16-bit unsigned integer fields;;
132;mat5_uncompressed_read_be.at:864;Read structure array with 8-bit integer fields;;
133;mat5_uncompressed_read_be.at:912;Read structure array with 8-bit unsigned integer fields;;
134;mat5_uncompressed_read_be.at:960;Read structure array with complex double-precision fields;;
135;mat5_uncompressed_read_be.at:1008;Read structure array with complex single-precision fields;;
136;mat5_uncompressed_read_be.at:1056;Read structure array with complex 64-bit integer fields;;
137;mat5_uncompressed_read_be.at:1104;Read structure array with complex 64-bit unsigned integer fields;;
138;mat5_uncompressed_read_be.at:1152;Read structure array with complex 32-bit integer fields;;
139;mat5_uncompressed_read_be.at:1200;Read structure array with complex 32-bit unsigned integer fields;;
140;mat5_uncompressed_read_be.at:1248;Read structure array with complex 16-bit integer fields;;
141;mat5_uncompressed_read_be.at:1296;Read structure array with complex 16-bit unsigned integer fields;;
142;mat5_uncompressed_read_be.at:1344;Read structure array with complex 8-bit integer fields;;
143;mat5_uncompressed_read_be.at:1392;Read structure array with complex 8-bit unsigned integer fields;;
144;mat5_compressed_read_be.at:17;Read 2D double-precision array;;
145;mat5_compressed_read_be.at:35;Read 2D single-precision array;;
146;mat5_compressed_read_be.at:53;Read 2D 64-bit integer array;;
147;mat5_compressed_read_be.at:71;Read 2D 64-bit unsigned integer array;;
148;mat5_compressed_read_be.at:89;Read 2D 32-bit integer array;;
149;mat5_compressed_read_be.at:107;Read 2D 32-bit unsigned integer array;;
150;mat5_compressed_read_be.at:125;Read 2D 16-bit integer array;;
151;mat5_compressed_read_be.at:143;Read 2D 16-bit unsigned integer array;;
152;mat5_compressed_read_be.at:161;Read 2D 8-bit integer array;;
153;mat5_compressed_read_be.at:179;Read 2D 8-bit unsigned integer array;;
154;mat5_compressed_read_be.at:197;Read 2D double-precision complex array;;
155;mat5_compressed_read_be.at:215;Read 2D single-precision complex array;;
156;mat5_compressed_read_be.at:233;Read 2D 64-bit integer complex array;;
157;mat5_compressed_read_be.at:251;Read 2D 64-bit unsigned integer complex array;;
158;mat5_compressed_read_be.at:269;Read 2D 32-bit integer complex array;;
159;mat5_compressed_read_be.at:287;Read 2D 32-bit unsigned integer complex array;;
160;mat5_compressed_read_be.at:305;Read 2D 16-bit integer complex array;;
161;mat5_compressed_read_be.at:323;Read 2D 16-bit unsigned integer complex array;;
162;mat5_compressed_read_be.at:341;Read 2D 8-bit integer complex array;;
163;mat5_compressed_read_be.at:359;Read 2D 8-bit unsigned integer complex array;;
164;mat5_compressed_read_be.at:377;Read double-precision sparse array;;
165;mat5_compressed_read_be.at:396;Read double-precision sparse complex array;;
166;mat5_compressed_read_be.at:415;Read empty array;;
167;mat5_compressed_read_be.at:426;Read 2D character array;;
168;mat5_compressed_read_be.at:444;Read empty structure array;;
169;mat5_compressed_read_be.at:456;Read empty structure array with fields;;
170;mat5_compressed_read_be.at:473;Read structure array with empty fields;;
171;mat5_compressed_read_be.at:507;Read structure array with double-precision fields;;
172;mat5_compressed_read_be.at:556;Read structure array with single-precision fields;;
173;mat5_compressed_read_be.at:605;Read structure array with 64-bit integer fields;;
174;mat5_compressed_read_be.at:654;Read structure array with 64-bit unsigned integer fields;;
175;mat5_compressed_read_be.at:703;Read structure array with 32-bit integer fields;;
176;mat5_compressed_read_be.at:752;Read structure array with 32-bit unsigned integer fields;;
177;mat5_compressed_read_be.at:801;Read structure array with 16-bit integer fields;;
178;mat5_compressed_read_be.at:850;Read structure array with 16-bit unsigned integer fields;;
179;mat5_compressed_read_be.at:899;Read structure array with 8-bit integer fields;;
180;mat5_compressed_read_be.at:948;Read structure array with 8-bit unsigned integer fields;;
181;mat5_compressed_read_be.at:997;Read structure array with complex double-precision fields;;
182;mat5_compressed_read_be.at:1046;Read structure array with complex single-precision fields;;
183;mat5_compressed_read_be.at:1095;Read structure array with complex 64-bit integer fields;;
184;mat5_compressed_read_be.at:1144;Read structure array with complex 64-bit unsigned integer fields;;
185;mat5_compressed_read_be.at:1193;Read structure array with complex 32-bit integer fields;;
186;mat5_compressed_read_be.at:1242;Read structure array with complex 32-bit unsigned integer fields;;
187;mat5_compressed_read_be.at:1291;Read structure array with complex 16-bit integer fields;;
188;mat5_compressed_read_be.at:1340;Read structure array with complex 16-bit unsigned integer fields;;
189;mat5_compressed_read_be.at:1389;Read structure array with complex 8-bit integer fields;;
190;mat5_compressed_read_be.at:1438;Read structure array with complex 8-bit unsigned integer fields;;
191;mat73_read_le.at:17;Read 2D double-precision array;;
192;mat73_read_le.at:35;Read 2D single-precision array;;
193;mat73_read_le.at:53;Read 2D 64-bit integer array;;
194;mat73_read_le.at:71;Read 2D 64-bit unsigned integer array;;
195;mat73_read_le.at:89;Read 2D 32-bit integer array;;
196;mat73_read_le.at:107;Read 2D 32-bit unsigned integer array;;
197;mat73_read_le.at:125;Read 2D 16-bit integer array;;
198;mat73_read_le.at:143;Read 2D 16-bit unsigned integer array;;
199;mat73_read_le.at:161;Read 2D 8-bit integer array;;
200;mat73_read_le.at:179;Read 2D 8-bit unsigned integer array;;
201;mat73_read_le.at:197;Read 2D double-precision complex array;;
202;mat73_read_le.at:215;Read 2D single-precision complex array;;
203;mat73_read_le.at:233;Read 2D 64-bit integer complex array;;
204;mat73_read_le.at:251;Read 2D 64-bit unsigned integer complex array;;
205;mat73_read_le.at:269;Read 2D 32-bit integer complex array;;
206;mat73_read_le.at:287;Read 2D 32-bit unsigned integer complex array;;
207;mat73_read_le.at:305;Read 2D 16-bit integer complex array;;
208;mat73_read_le.at:323;Read 2D 16-bit unsigned integer complex array;;
209;mat73_read_le.at:341;Read 2D 8-bit integer complex array;;
210;mat73_read_le.at:359;Read 2D 8-bit unsigned integer complex array;;
211;mat73_read_le.at:377;Read double-precision sparse array;;
212;mat73_read_le.at:396;Read double-precision sparse complex array;;
213;mat73_read_le.at:415;Read empty array;;
214;mat73_read_le.at:429;Read 2D character array;;
215;mat73_read_le.at:447;Read empty structure array;;
216;mat73_read_le.at:459;Read empty structure array with fields;;
217;mat73_read_le.at:477;Read structure array with empty fields;;
218;mat73_read_le.at:513;Read structure array with double-precision fields;;
219;mat73_read_le.at:563;Read structure array with single-precision fields;;
220;mat73_read_le.at:613;Read structure array with 64-bit integer fields;;
221;mat73_read_le.at:663;Read structure array with 64-bit unsigned integer fields;;
222;mat73_read_le.at:713;Read structure array with 32-bit integer fields;;
223;mat73_read_le.at:763;Read structure array with 32-bit unsigned integer fields;;
224;mat73_read_le.at:813;Read structure array with 16-bit integer fields;;
225;mat73_read_le.at:863;Read structure array with 16-bit unsigned integer fields;;
226;mat73_read_le.at:913;Read structure array with 8-bit integer fields;;
227;mat73_read_le.at:963;Read structure array with 8-bit unsigned integer fields;;
228;mat73_read_le.at:1013;Read structure array with complex double-precision fields;;
229;mat73_read_le.at:1063;Read structure array with complex single-precision fields;;
230;mat73_read_le.at:1113;Read structure array with complex 64-bit integer fields;;
231;mat73_read_le.at:1163;Read structure array with complex 64-bit unsigned integer fields;;
232;mat73_read_le.at:1213;Read structure array with complex 32-bit integer fields;;
233;mat73_read_le.at:1263;Read structure array with complex 32-bit unsigned integer fields;;
234;mat73_read_le.at:1313;Read structure array with complex 16-bit integer fields;;
235;mat73_read_le.at:1363;Read structure array with complex 16-bit unsigned integer fields;;
236;mat73_read_le.at:1413;Read structure array with complex 8-bit integer fields;;
237;mat73_read_le.at:1463;Read structure array with complex 8-bit unsigned integer fields;;
238;mat73_read_be.at:17;Read 2D double-precision array;;
239;mat73_read_be.at:35;Read 2D single-precision array;;
240;mat73_read_be.at:53;Read 2D 64-bit integer array;;
241;mat73_read_be.at:71;Read 2D 64-bit unsigned integer array;;
242;mat73_read_be.at:89;Read 2D 32-bit integer array;;
243;mat73_read_be.at:107;Read 2D 32-bit unsigned integer array;;
244;mat73_read_be.at:125;Read 2D 16-bit integer array;;
245;mat73_read_be.at:143;Read 2D 16-bit unsigned integer array;;
246;mat73_read_be.at:161;Read 2D 8-bit integer array;;
247;mat73_read_be.at:179;Read 2D 8-bit unsigned integer array;;
248;mat73_read_be.at:197;Read 2D double-precision complex array;;
249;mat73_read_be.at:215;Read 2D single-precision complex array;;
250;mat73_read_be.at:233;Read 2D 64-bit integer complex array;;
251;mat73_read_be.at:251;Read 2D 64-bit unsigned integer complex array;;
252;mat73_read_be.at:269;Read 2D 32-bit integer complex array;;
253;mat73_read_be.at:287;Read 2D 32-bit unsigned integer complex array;;
254;mat73_read_be.at:305;Read 2D 16-bit integer complex array;;
255;mat73_read_be.at:323;Read 2D 16-bit unsigned integer complex array;;
256;mat73_read_be.at:341;Read 2D 8-bit integer complex array;;
257;mat73_read_be.at:359;Read 2D 8-bit unsigned integer complex array;;
258;mat73_read_be.at:377;Read double-precision sparse array;;
259;mat73_read_be.at:396;Read double-precision sparse complex array;;
260;mat73_read_be.at:415;Read empty array;;
261;mat73_read_be.at:429;Read 2D character array;;
262;mat73_read_be.at:447;Read empty structure array;;
263;mat73_read_be.at:458;Read empty structure array with fields;;
264;mat73_read_be.at:475;Read structure array with empty fields;;
265;mat73_read_be.at:510;Read structure array with double-precision fields;;
266;mat73_read_be.at:559;Read structure array with single-precision fields;;
267;mat73_read_be.at:608;Read structure array with 64-bit integer fields;;
268;mat73_read_be.at:657;Read structure array with 64-bit unsigned integer fields;;
269;mat73_read_be.at:706;Read structure array with 32-bit integer fields;;
270;mat73_read_be.at:755;Read structure array with 32-bit unsigned integer fields;;
271;mat73_read_be.at:804;Read structure array with 16-bit integer fields;;
272;mat73_read_be.at:853;Read structure array with 16-bit unsigned integer fields;;
273;mat73_read_be.at:902;Read structure array with 8-bit integer fields;;
274;mat73_read_be.at:951;Read structure array with 8-bit unsigned integer fields;;
275;mat73_read_be.at:1000;Read structure array with complex double-precision fields;;
276;mat73_read_be.at:1049;Read structure array with complex single-precision fields;;
277;mat73_read_be.at:1098;Read structure array with complex 64-bit integer fields;;
278;mat73_read_be.at:1147;Read structure array with complex 64-bit unsigned integer fields;;
279;mat73_read_be.at:1196;Read structure array with complex 32-bit integer fields;;
280;mat73_read_be.at:1245;Read structure array with complex 32-bit unsigned integer fields;;
281;mat73_read_be.at:1294;Read structure array with complex 16-bit integer fields;;
282;mat73_read_be.at:1343;Read structure array with complex 16-bit unsigned integer fields;;
283;mat73_read_be.at:1392;Read structure array with complex 8-bit integer fields;;
284;mat73_read_be.at:1441;Read structure array with complex 8-bit unsigned integer fields;;
285;mat5_uncompressed_write.at:17;Write 2D double-precision array;;
286;mat5_uncompressed_write.at:43;Write 2D single-precision array;;
287;mat5_uncompressed_write.at:69;Write 2D 64-bit integer array;;
288;mat5_uncompressed_write.at:96;Write 2D 64-bit unsigned integer array;;
289;mat5_uncompressed_write.at:123;Write 2D 32-bit integer array;;
290;mat5_uncompressed_write.at:149;Write 2D 32-bit unsigned integer array;;
291;mat5_uncompressed_write.at:175;Write 2D 16-bit integer array;;
292;mat5_uncompressed_write.at:201;Write 2D 16-bit unsigned integer array;;
293;mat5_uncompressed_write.at:227;Write 2D 8-bit integer array;;
294;mat5_uncompressed_write.at:253;Write 2D 8-bit unsigned integer array;;
295;mat5_uncompressed_write.at:279;Write 2D double-precision complex array;;
296;mat5_uncompressed_write.at:305;Write 2D single-precision complex array;;
297;mat5_uncompressed_write.at:331;Write 2D 64-bit integer complex array;;
298;mat5_uncompressed_write.at:358;Write 2D 64-bit unsigned integer complex array;;
299;mat5_uncompressed_write.at:385;Write 2D 32-bit integer complex array;;
300;mat5_uncompressed_write.at:411;Write 2D 32-bit unsigned integer complex array;;
301;mat5_uncompressed_write.at:437;Write 2D 16-bit integer complex array;;
302;mat5_uncompressed_write.at:463;Write 2D 16-bit unsigned integer complex array;;
303;mat5_uncompressed_write.at:489;Write 2D 8-bit integer complex array;;
304;mat5_uncompressed_write.at:515;Write 2D 8-bit unsigned integer complex array;;
305;mat5_uncompressed_write.at:541;Write 2D sparse double-precision array;;
306;mat5_uncompressed_write.at:571;Write 2D sparse complex double-precision array;;
307;mat5_uncompressed_write.at:601;Write 2D empty array;;
308;mat5_uncompressed_write.at:628;Write character array;;
309;mat5_uncompressed_write.at:654;Write empty structure array;testme;
310;mat5_uncompressed_write.at:688;Write structure array with 2D double-precision fields;;
311;mat5_uncompressed_write.at:719;Write structure array with 2D single-precision fields;;
312;mat5_uncompressed_write.at:750;Write structure array with 2D 64-bit signed integer fields;;
313;mat5_uncompressed_write.at:782;Write structure array with 2D 64-bit unsigned integer fields;;
314;mat5_uncompressed_write.at:814;Write structure array with 2D 32-bit signed integer fields;;
315;mat5_uncompressed_write.at:845;Write structure array with 2D 32-bit unsigned integer fields;;
316;mat5_uncompressed_write.at:876;Write structure array with 2D 16-bit signed integer fields;;
317;mat5_uncompressed_write.at:907;Write structure array with 2D 16-bit unsigned integer fields;;
318;mat5_uncompressed_write.at:938;Write structure array with 2D 8-bit signed integer fields;;
319;mat5_uncompressed_write.at:969;Write structure array with 2D 8-bit unsigned integer fields;;
320;mat5_uncompressed_write.at:1000;Write structure array with 2D double-precision complex fields;;
321;mat5_uncompressed_write.at:1031;Write structure array with 2D single-precision complex fields;;
322;mat5_uncompressed_write.at:1062;Write structure array with 2D 64-bit signed integer complex fields;;
323;mat5_uncompressed_write.at:1094;Write structure array with 2D 64-bit unsigned integer complex fields;;
324;mat5_uncompressed_write.at:1126;Write structure array with 2D 32-bit signed integer complex fields;;
325;mat5_uncompressed_write.at:1157;Write structure array with 2D 32-bit unsigned integer complex fields;;
326;mat5_uncompressed_write.at:1188;Write structure array with 2D 16-bit signed integer complex fields;;
327;mat5_uncompressed_write.at:1219;Write structure array with 2D 16-bit unsigned integer complex fields;;
328;mat5_uncompressed_write.at:1250;Write structure array with 2D 8-bit signed integer complex fields;;
329;mat5_uncompressed_write.at:1281;Write structure array with 2D 8-bit unsigned integer complex fields;;
330;mat5_uncompressed_write.at:1312;Write empty cell array;;
331;mat5_uncompressed_write.at:1337;Write cell array with 2D double-precision fields;;
332;mat5_uncompressed_write.at:1366;Write cell array with 2D single-precision fields;;
333;mat5_uncompressed_write.at:1395;Write cell array with 2D 64-bit signed integer fields;;
334;mat5_uncompressed_write.at:1425;Write cell array with 2D 64-bit unsigned integer fields;;
335;mat5_uncompressed_write.at:1455;Write cell array with 2D 32-bit signed integer fields;;
336;mat5_uncompressed_write.at:1484;Write cell array with 2D 32-bit unsigned integer fields;;
337;mat5_uncompressed_write.at:1513;Write cell array with 2D 16-bit signed integer fields;;
338;mat5_uncompressed_write.at:1542;Write cell array with 2D 16-bit unsigned integer fields;;
339;mat5_uncompressed_write.at:1571;Write cell array with 2D 8-bit signed integer fields;;
340;mat5_uncompressed_write.at:1600;Write cell array with 2D 8-bit unsigned integer fields;;
341;mat5_uncompressed_write.at:1629;Write cell array with 2D double-precision complex fields;;
342;mat5_uncompressed_write.at:1660;Write cell array with 2D single-precision complex fields;;
343;mat5_uncompressed_write.at:1691;Write cell array with 2D 64-bit signed integer complex fields;;
344;mat5_uncompressed_write.at:1723;Write cell array with 2D 64-bit unsigned integer complex fields;;
345;mat5_uncompressed_write.at:1755;Write cell array with 2D 32-bit signed integer complex fields;;
346;mat5_uncompressed_write.at:1786;Write cell array with 2D 32-bit unsigned integer complex fields;;
347;mat5_uncompressed_write.at:1817;Write cell array with 2D 16-bit signed integer complex fields;;
348;mat5_uncompressed_write.at:1848;Write cell array with 2D 16-bit unsigned integer complex fields;;
349;mat5_uncompressed_write.at:1879;Write cell array with 2D 8-bit signed integer complex fields;;
350;mat5_uncompressed_write.at:1910;Write cell array with 2D 8-bit unsigned integer complex fields;;
351;mat5_compressed_write.at:17;Write 2D double-precision array;;
352;mat5_compressed_write.at:44;Write 2D single-precision array;;
353;mat5_compressed_write.at:71;Write 2D 64-bit integer array;;
354;mat5_compressed_write.at:99;Write 2D 64-bit unsigned integer array;;
355;mat5_compressed_write.at:127;Write 2D 32-bit integer array;;
356;mat5_compressed_write.at:154;Write 2D 32-bit unsigned integer array;;
357;mat5_compressed_write.at:181;Write 2D 16-bit integer array;;
358;mat5_compressed_write.at:208;Write 2D 16-bit unsigned integer array;;
359;mat5_compressed_write.at:235;Write 2D 8-bit integer array;;
360;mat5_compressed_write.at:262;Write 2D 8-bit unsigned integer array;;
361;mat5_compressed_write.at:289;Write 2D double-precision complex array;;
362;mat5_compressed_write.at:316;Write 2D single-precision complex array;;
363;mat5_compressed_write.at:343;Write 2D 64-bit integer complex array;;
364;mat5_compressed_write.at:371;Write 2D 64-bit unsigned integer complex array;;
365;mat5_compressed_write.at:399;Write 2D 32-bit integer complex array;;
366;mat5_compressed_write.at:426;Write 2D 32-bit unsigned integer complex array;;
367;mat5_compressed_write.at:453;Write 2D 16-bit integer complex array;;
368;mat5_compressed_write.at:480;Write 2D 16-bit unsigned integer complex array;;
369;mat5_compressed_write.at:507;Write 2D 8-bit integer complex array;;
370;mat5_compressed_write.at:534;Write 2D 8-bit unsigned integer complex array;;
371;mat5_compressed_write.at:561;Write 2D sparse double-precision array;;
372;mat5_compressed_write.at:592;Write 2D sparse complex double-precision array;;
373;mat5_compressed_write.at:623;Write 2D empty array;;
374;mat5_compressed_write.at:651;Write character array;;
375;mat5_compressed_write.at:678;Write empty structure array;;
376;mat5_compressed_write.at:712;Write structure array with 2D double-precision fields;;
377;mat5_compressed_write.at:744;Write structure array with 2D single-precision fields;;
378;mat5_compressed_write.at:776;Write structure array with 2D 64-bit signed integer fields;;
379;mat5_compressed_write.at:809;Write structure array with 2D 64-bit unsigned integer fields;;
380;mat5_compressed_write.at:842;Write structure array with 2D 32-bit signed integer fields;;
381;mat5_compressed_write.at:874;Write structure array with 2D 32-bit unsigned integer fields;;
382;mat5_compressed_write.at:906;Write structure array with 2D 16-bit signed integer fields;;
383;mat5_compressed_write.at:938;Write structure array with 2D 16-bit unsigned integer fields;;
384;mat5_compressed_write.at:970;Write structure array with 2D 8-bit signed integer fields;;
385;mat5_compressed_write.at:1002;Write structure array with 2D 8-bit unsigned integer fields;;
386;mat5_compressed_write.at:1034;Write structure array with 2D double-precision complex fields;;
387;mat5_compressed_write.at:1066;Write structure array with 2D single-precision complex fields;;
388;mat5_compressed_write.at:1098;Write structure array with 2D 64-bit signed integer complex fields;;
389;mat5_compressed_write.at:1131;Write structure array with 2D 64-bit unsigned integer complex fields;;
390;mat5_compressed_write.at:1164;Write structure array with 2D 32-bit signed integer complex fields;;
391;mat5_compressed_write.at:1196;Write structure array with 2D 32-bit unsigned integer complex fields;;
392;mat5_compressed_write.at:1228;Write structure array with 2D 16-bit signed integer complex fields;;
393;mat5_compressed_write.at:1260;Write structure array with 2D 16-bit unsigned integer complex fields;;
394;mat5_compressed_write.at:1292;Write structure array with 2D 8-bit signed integer complex fields;;
395;mat5_compressed_write.at:1324;Write structure array with 2D 8-bit unsigned integer complex fields;;
396;mat5_compressed_write.at:1356;Write empty cell array;;
397;mat5_compressed_write.at:1382;Write cell array with 2D double-precision fields;;
398;mat5_compressed_write.at:1412;Write cell array with 2D single-precision fields;;
399;mat5_compressed_write.at:1442;Write cell array with 2D 64-bit signed integer fields;;
400;mat5_compressed_write.at:1473;Write cell array with 2D 64-bit unsigned integer fields;;
401;mat5_compressed_write.at:1504;Write cell array with 2D 32-bit signed integer fields;;
402;mat5_compressed_write.at:1534;Write cell array with 2D 32-bit unsigned integer fields;;
403;mat5_compressed_write.at:1564;Write cell array with 2D 16-bit signed integer fields;;
404;mat5_compressed_write.at:1594;Write cell array with 2D 16-bit unsigned integer fields;;
405;mat5_compressed_write.at:1624;Write cell array with 2D 8-bit signed integer fields;;
406;mat5_compressed_write.at:1654;Write cell array with 2D 8-bit unsigned integer fields;;
407;mat5_compressed_write.at:1684;Write cell array with 2D double-precision complex fields;;
408;mat5_compressed_write.at:1716;Write cell array with 2D single-precision complex fields;;
409;mat5_compressed_write.at:1748;Write cell array with 2D 64-bit signed integer complex fields;;
410;mat5_compressed_write.at:1781;Write cell array with 2D 64-bit unsigned integer complex fields;;
411;mat5_compressed_write.at:1814;Write cell array with 2D 32-bit signed integer complex fields;;
412;mat5_compressed_write.at:1846;Write cell array with 2D 32-bit unsigned integer complex fields;;
413;mat5_compressed_write.at:1878;Write cell array with 2D 16-bit signed integer complex fields;;
414;mat5_compressed_write.at:1910;Write cell array with 2D 16-bit unsigned integer complex fields;;
415;mat5_compressed_write.at:1942;Write cell array with 2D 8-bit signed integer complex fields;;
416;mat5_compressed_write.at:1974;Write cell array with 2D 8-bit unsigned integer complex fields;;
417;mat73_write.at:17;Write 2D double-precision array;;
418;mat73_write.at:44;Write 2D single-precision array;;
419;mat73_write.at:71;Write 2D 64-bit integer array;;
420;mat73_write.at:99;Write 2D 64-bit unsigned integer array;;
421;mat73_write.at:127;Write 2D 32-bit integer array;;
422;mat73_write.at:154;Write 2D 32-bit unsigned integer array;;
423;mat73_write.at:181;Write 2D 16-bit integer array;;
424;mat73_write.at:208;Write 2D 16-bit unsigned integer array;;
425;mat73_write.at:235;Write 2D 8-bit integer array;;
426;mat73_write.at:262;Write 2D 8-bit unsigned integer array;;
427;mat73_write.at:289;Write 2D double-precision complex array;;
428;mat73_write.at:316;Write 2D single-precision complex array;;
429;mat73_write.at:343;Write 2D 64-bit integer complex array;;
430;mat73_write.at:371;Write 2D 64-bit unsigned integer complex array;;
431;mat73_write.at:399;Write 2D 32-bit integer complex array;;
432;mat73_write.at:426;Write 2D 32-bit unsigned integer complex array;;
433;mat73_write.at:453;Write 2D 16-bit integer complex array;;
434;mat73_write.at:480;Write 2D 16-bit unsigned integer complex array;;
435;mat73_write.at:507;Write 2D 8-bit integer complex array;;
436;mat73_write.at:534;Write 2D 8-bit unsigned integer complex array;;
437;mat73_write.at:561;Write 2D sparse double-precision array;;
438;mat73_write.at:592;Write 2D sparse complex double-precision array;;
439;mat73_write.at:623;Write 2D empty array;;
440;mat73_write.at:651;Write character array;;
441;mat73_write.at:678;Write empty structure array;;
442;mat73_write.at:712;Write structure array with 2D double-precision fields;;
443;mat73_write.at:744;Write structure array with 2D single-precision fields;;
444;mat73_write.at:776;Write structure array with 2D 64-bit signed integer fields;;
445;mat73_write.at:809;Write structure array with 2D 64-bit unsigned integer fields;;
446;mat73_write.at:842;Write structure array with 2D 32-bit signed integer fields;;
447;mat73_write.at:874;Write structure array with 2D 32-bit unsigned integer fields;;
448;mat73_write.at:906;Write structure array with 2D 16-bit signed integer fields;;
449;mat73_write.at:938;Write structure array with 2D 16-bit unsigned integer fields;;
450;mat73_write.at:970;Write structure array with 2D 8-bit signed integer fields;;
451;mat73_write.at:1002;Write structure array with 2D 8-bit unsigned integer fields;;
452;mat73_write.at:1034;Write structure array with 2D double-precision complex fields;;
453;mat73_write.at:1066;Write structure array with 2D single-precision complex fields;;
454;mat73_write.at:1098;Write structure array with 2D 64-bit signed integer complex fields;;
455;mat73_write.at:1131;Write structure array with 2D 64-bit unsigned integer complex fields;;
456;mat73_write.at:1164;Write structure array with 2D 32-bit signed integer complex fields;;
457;mat73_write.at:1196;Write structure array with 2D 32-bit unsigned integer complex fields;;
458;mat73_write.at:1228;Write structure array with 2D 16-bit signed integer complex fields;;
459;mat73_write.at:1260;Write structure array with 2D 16-bit unsigned integer complex fields;;
460;mat73_write.at:1292;Write structure array with 2D 8-bit signed integer complex fields;;
461;mat73_write.at:1324;Write structure array with 2D 8-bit unsigned integer complex fields;;
462;mat73_write.at:1356;Write empty cell array;;
463;mat73_write.at:1382;Write cell array with 2D double-precision fields;;
464;mat73_write.at:1412;Write cell array with 2D single-precision fields;;
465;mat73_write.at:1442;Write cell array with 2D 64-bit signed integer fields;;
466;mat73_write.at:1473;Write cell array with 2D 64-bit unsigned integer fields;;
467;mat73_write.at:1504;Write cell array with 2D 32-bit signed integer fields;;
468;mat73_write.at:1534;Write cell array with 2D 32-bit unsigned integer fields;;
469;mat73_write.at:1564;Write cell array with 2D 16-bit signed integer fields;;
470;mat73_write.at:1594;Write cell array with 2D 16-bit unsigned integer fields;;
471;mat73_write.at:1624;Write cell array with 2D 8-bit signed integer fields;;
472;mat73_write.at:1654;Write cell array with 2D 8-bit unsigned integer fields;;
473;mat73_write.at:1684;Write cell array with 2D double-precision complex fields;;
474;mat73_write.at:1716;Write cell array with 2D single-precision complex fields;;
475;mat73_write.at:1748;Write cell array with 2D 64-bit signed integer complex fields;;
476;mat73_write.at:1781;Write cell array with 2D 64-bit unsigned integer complex fields;;
477;mat73_write.at:1814;Write cell array with 2D 32-bit signed integer complex fields;;
478;mat73_write.at:1846;Write cell array with 2D 32-bit unsigned integer complex fields;;
479;mat73_write.at:1878;Write cell array with 2D 16-bit signed integer complex fields;;
480;mat73_write.at:1910;Write cell array with 2D 16-bit unsigned integer complex fields;;
481;mat73_write.at:1942;Write cell array with 2D 8-bit signed integer complex fields;;
482;mat73_write.at:1974;Write cell array with 2D 8-bit unsigned integer complex fields;;
"
# List of the all the test groups.
at_groups_all=`$as_echo "$at_help_all" | sed 's/;.*//'`

# at_fn_validate_ranges NAME...
# -----------------------------
# Validate and normalize the test group number contained in each variable
# NAME. Leading zeroes are treated as decimal.
at_fn_validate_ranges ()
{
  for at_grp
  do
    eval at_value=\$$at_grp
    if test $at_value -lt 1 || test $at_value -gt 482; then
      $as_echo "invalid test group: $at_value" >&2
      exit 1
    fi
    case $at_value in
      0*) # We want to treat leading 0 as decimal, like expr and test, but
	  # AS_VAR_ARITH treats it as octal if it uses $(( )).
	  # With XSI shells, ${at_value#${at_value%%[1-9]*}} avoids the
	  # expr fork, but it is not worth the effort to determine if the
	  # shell supports XSI when the user can just avoid leading 0.
	  eval $at_grp='`expr $at_value + 0`' ;;
    esac
  done
}

at_prev=
for at_option
do
  # If the previous option needs an argument, assign it.
  if test -n "$at_prev"; then
    at_option=$at_prev=$at_option
    at_prev=
  fi

  case $at_option in
  *=?*) at_optarg=`expr "X$at_option" : '[^=]*=\(.*\)'` ;;
  *)    at_optarg= ;;
  esac

  # Accept the important Cygnus configure options, so we can diagnose typos.

  case $at_option in
    --help | -h )
	at_help_p=:
	;;

    --list | -l )
	at_list_p=:
	;;

    --version | -V )
	at_version_p=:
	;;

    --clean | -c )
	at_clean=:
	;;

    --color )
	at_color=always
	;;
    --color=* )
	case $at_optarg in
	no | never | none) at_color=never ;;
	auto | tty | if-tty) at_color=auto ;;
	always | yes | force) at_color=always ;;
	*) at_optname=`echo " $at_option" | sed 's/^ //; s/=.*//'`
	   as_fn_error $? "unrecognized argument to $at_optname: $at_optarg" ;;
	esac
	;;

    --debug | -d )
	at_debug_p=:
	;;

    --errexit | -e )
	at_debug_p=:
	at_errexit_p=:
	;;

    --verbose | -v )
	at_verbose=; at_quiet=:
	;;

    --trace | -x )
	at_traceon='set -x'
	at_trace_echo=echo
	at_check_filter_trace=at_fn_filter_trace
	;;

    [0-9] | [0-9][0-9] | [0-9][0-9][0-9] | [0-9][0-9][0-9][0-9])
	at_fn_validate_ranges at_option
	as_fn_append at_groups "$at_option$as_nl"
	;;

    # Ranges
    [0-9]- | [0-9][0-9]- | [0-9][0-9][0-9]- | [0-9][0-9][0-9][0-9]-)
	at_range_start=`echo $at_option |tr -d X-`
	at_fn_validate_ranges at_range_start
	at_range=`$as_echo "$at_groups_all" | \
	  sed -ne '/^'$at_range_start'$/,$p'`
	as_fn_append at_groups "$at_range$as_nl"
	;;

    -[0-9] | -[0-9][0-9] | -[0-9][0-9][0-9] | -[0-9][0-9][0-9][0-9])
	at_range_end=`echo $at_option |tr -d X-`
	at_fn_validate_ranges at_range_end
	at_range=`$as_echo "$at_groups_all" | \
	  sed -ne '1,/^'$at_range_end'$/p'`
	as_fn_append at_groups "$at_range$as_nl"
	;;

    [0-9]-[0-9] | [0-9]-[0-9][0-9] | [0-9]-[0-9][0-9][0-9] | \
    [0-9]-[0-9][0-9][0-9][0-9] | [0-9][0-9]-[0-9][0-9] | \
    [0-9][0-9]-[0-9][0-9][0-9] | [0-9][0-9]-[0-9][0-9][0-9][0-9] | \
    [0-9][0-9][0-9]-[0-9][0-9][0-9] | \
    [0-9][0-9][0-9]-[0-9][0-9][0-9][0-9] | \
    [0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9] )
	at_range_start=`expr $at_option : '\(.*\)-'`
	at_range_end=`expr $at_option : '.*-\(.*\)'`
	if test $at_range_start -gt $at_range_end; then
	  at_tmp=$at_range_end
	  at_range_end=$at_range_start
	  at_range_start=$at_tmp
	fi
	at_fn_validate_ranges at_range_start at_range_end
	at_range=`$as_echo "$at_groups_all" | \
	  sed -ne '/^'$at_range_start'$/,/^'$at_range_end'$/p'`
	as_fn_append at_groups "$at_range$as_nl"
	;;

    # Directory selection.
    --directory | -C )
	at_prev=--directory
	;;
    --directory=* )
	at_change_dir=:
	at_dir=$at_optarg
	if test x- = "x$at_dir" ; then
	  at_dir=./-
	fi
	;;

    # Parallel execution.
    --jobs | -j )
	at_jobs=0
	;;
    --jobs=* | -j[0-9]* )
	if test -n "$at_optarg"; then
	  at_jobs=$at_optarg
	else
	  at_jobs=`expr X$at_option : 'X-j\(.*\)'`
	fi
	case $at_jobs in *[!0-9]*)
	  at_optname=`echo " $at_option" | sed 's/^ //; s/[0-9=].*//'`
	  as_fn_error $? "non-numeric argument to $at_optname: $at_jobs" ;;
	esac
	;;

    # Keywords.
    --keywords | -k )
	at_prev=--keywords
	;;
    --keywords=* )
	at_groups_selected=$at_help_all
	at_save_IFS=$IFS
	IFS=,
	set X $at_optarg
	shift
	IFS=$at_save_IFS
	for at_keyword
	do
	  at_invert=
	  case $at_keyword in
	  '!'*)
	    at_invert="-v"
	    at_keyword=`expr "X$at_keyword" : 'X!\(.*\)'`
	    ;;
	  esac
	  # It is on purpose that we match the test group titles too.
	  at_groups_selected=`$as_echo "$at_groups_selected" |
	      grep -i $at_invert "^[1-9][^;]*;.*[; ]$at_keyword[ ;]"`
	done
	# Smash the keywords.
	at_groups_selected=`$as_echo "$at_groups_selected" | sed 's/;.*//'`
	as_fn_append at_groups "$at_groups_selected$as_nl"
	;;
    --recheck)
	at_recheck=:
	;;

    *=*)
	at_envvar=`expr "x$at_option" : 'x\([^=]*\)='`
	# Reject names that are not valid shell variable names.
	case $at_envvar in
	  '' | [0-9]* | *[!_$as_cr_alnum]* )
	    as_fn_error $? "invalid variable name: \`$at_envvar'" ;;
	esac
	at_value=`$as_echo "$at_optarg" | sed "s/'/'\\\\\\\\''/g"`
	# Export now, but save eval for later and for debug scripts.
	export $at_envvar
	as_fn_append at_debug_args " $at_envvar='$at_value'"
	;;

     *) $as_echo "$as_me: invalid option: $at_option" >&2
	$as_echo "Try \`$0 --help' for more information." >&2
	exit 1
	;;
  esac
done

# Verify our last option didn't require an argument
if test -n "$at_prev"; then :
  as_fn_error $? "\`$at_prev' requires an argument"
fi

# The file containing the suite.
at_suite_log=$at_dir/$as_me.log

# Selected test groups.
if test -z "$at_groups$at_recheck"; then
  at_groups=$at_groups_all
else
  if test -n "$at_recheck" && test -r "$at_suite_log"; then
    at_oldfails=`sed -n '
      /^Failed tests:$/,/^Skipped tests:$/{
	s/^[ ]*\([1-9][0-9]*\):.*/\1/p
      }
      /^Unexpected passes:$/,/^## Detailed failed tests/{
	s/^[ ]*\([1-9][0-9]*\):.*/\1/p
      }
      /^## Detailed failed tests/q
      ' "$at_suite_log"`
    as_fn_append at_groups "$at_oldfails$as_nl"
  fi
  # Sort the tests, removing duplicates.
  at_groups=`$as_echo "$at_groups" | sort -nu | sed '/^$/d'`
fi

if test x"$at_color" = xalways \
   || { test x"$at_color" = xauto && test -t 1; }; then
  at_red=`printf '\033[0;31m'`
  at_grn=`printf '\033[0;32m'`
  at_lgn=`printf '\033[1;32m'`
  at_blu=`printf '\033[1;34m'`
  at_std=`printf '\033[m'`
else
  at_red= at_grn= at_lgn= at_blu= at_std=
fi

# Help message.
if $at_help_p; then
  cat <<_ATEOF || at_write_fail=1
Usage: $0 [OPTION]... [VARIABLE=VALUE]... [TESTS]

Run all the tests, or the selected TESTS, given by numeric ranges, and
save a detailed log file.  Upon failure, create debugging scripts.

Do not change environment variables directly.  Instead, set them via
command line arguments.  Set \`AUTOTEST_PATH' to select the executables
to exercise.  Each relative directory is expanded as build and source
directories relative to the top level of this distribution.
E.g., from within the build directory /tmp/foo-1.0, invoking this:

  $ $0 AUTOTEST_PATH=bin

is equivalent to the following, assuming the source directory is /src/foo-1.0:

  PATH=/tmp/foo-1.0/bin:/src/foo-1.0/bin:\$PATH $0
_ATEOF
cat <<_ATEOF || at_write_fail=1

Operation modes:
  -h, --help     print the help message, then exit
  -V, --version  print version number, then exit
  -c, --clean    remove all the files this test suite might create and exit
  -l, --list     describes all the tests, or the selected TESTS
_ATEOF
cat <<_ATEOF || at_write_fail=1

Execution tuning:
  -C, --directory=DIR
                 change to directory DIR before starting
      --color[=never|auto|always]
                 disable colored test results, or enable even without terminal
  -j, --jobs[=N]
                 Allow N jobs at once; infinite jobs with no arg (default 1)
  -k, --keywords=KEYWORDS
                 select the tests matching all the comma-separated KEYWORDS
                 multiple \`-k' accumulate; prefixed \`!' negates a KEYWORD
      --recheck  select all tests that failed or passed unexpectedly last time
  -e, --errexit  abort as soon as a test fails; implies --debug
  -v, --verbose  force more detailed output
                 default for debugging scripts
  -d, --debug    inhibit clean up and top-level logging
                 default for debugging scripts
  -x, --trace    enable tests shell tracing
_ATEOF
cat <<_ATEOF || at_write_fail=1

Report bugs to <chulbe1@mac.com>.
_ATEOF
  exit $at_write_fail
fi

# List of tests.
if $at_list_p; then
  cat <<_ATEOF || at_write_fail=1
MATIO 1.5.0 test suite: matio testsuite test groups:

 NUM: FILE-NAME:LINE     TEST-GROUP-NAME
      KEYWORDS

_ATEOF
  # Pass an empty line as separator between selected groups and help.
  $as_echo "$at_groups$as_nl$as_nl$at_help_all" |
    awk 'NF == 1 && FS != ";" {
	   selected[$ 1] = 1
	   next
	 }
	 /^$/ { FS = ";" }
	 NF > 0 {
	   if (selected[$ 1]) {
	     printf " %3d: %-18s %s\n", $ 1, $ 2, $ 3
	     if ($ 4) {
	       lmax = 79
	       indent = "     "
	       line = indent
	       len = length (line)
	       n = split ($ 4, a, " ")
	       for (i = 1; i <= n; i++) {
		 l = length (a[i]) + 1
		 if (i > 1 && len + l > lmax) {
		   print line
		   line = indent " " a[i]
		   len = length (line)
		 } else {
		   line = line " " a[i]
		   len += l
		 }
	       }
	       if (n)
		 print line
	     }
	   }
	 }' || at_write_fail=1
  exit $at_write_fail
fi
if $at_version_p; then
  $as_echo "$as_me (MATIO 1.5.0)" &&
  cat <<\_ATEOF || at_write_fail=1

Copyright (C) 2010 Free Software Foundation, Inc.
This test suite is free software; the Free Software Foundation gives
unlimited permission to copy, distribute and modify it.
_ATEOF
  exit $at_write_fail
fi

# Should we print banners?  Yes if more than one test is run.
case $at_groups in #(
  *$as_nl* )
      at_print_banners=: ;; #(
  * ) at_print_banners=false ;;
esac
# Text for banner N, set to a single space once printed.
# Banner 1. testsuite.at:21
# Category starts at test group 1.
at_banner_text_1="Read MAT version 4"
# Banner 2. testsuite.at:24
# Category starts at test group 3.
at_banner_text_2="Read Uncompressed MAT version 5 (Little Endian)"
# Banner 3. testsuite.at:27
# Category starts at test group 50.
at_banner_text_3="Read Compressed MAT version 5 (Little Endian)"
# Banner 4. testsuite.at:30
# Category starts at test group 97.
at_banner_text_4="Read Uncompressed MAT version 5 (Big Endian)"
# Banner 5. testsuite.at:33
# Category starts at test group 144.
at_banner_text_5="Read Compressed MAT version 5 (Big Endian)"
# Banner 6. testsuite.at:36
# Category starts at test group 191.
at_banner_text_6="Read MAT version 7.3 (HDF5 Schema 1) (Little Endian)"
# Banner 7. testsuite.at:39
# Category starts at test group 238.
at_banner_text_7="Read MAT version 7.3 (HDF5 Schema 1) (Big Endian)"
# Banner 8. testsuite.at:42
# Category starts at test group 285.
at_banner_text_8="Write Uncompressed MAT version 5"
# Banner 9. testsuite.at:45
# Category starts at test group 351.
at_banner_text_9="Write Compressed MAT version 5"
# Banner 10. testsuite.at:48
# Category starts at test group 417.
at_banner_text_10="Write MAT version 7.3"

# Take any -C into account.
if $at_change_dir ; then
  test x != "x$at_dir" && cd "$at_dir" \
    || as_fn_error $? "unable to change directory"
  at_dir=`pwd`
fi

# Load the config files for any default variable assignments.
for at_file in atconfig atlocal
do
  test -r $at_file || continue
  . ./$at_file || as_fn_error $? "invalid content: $at_file"
done

# Autoconf <=2.59b set at_top_builddir instead of at_top_build_prefix:
: "${at_top_build_prefix=$at_top_builddir}"

# Perform any assignments requested during argument parsing.
eval "$at_debug_args"

# atconfig delivers names relative to the directory the test suite is
# in, but the groups themselves are run in testsuite-dir/group-dir.
if test -n "$at_top_srcdir"; then
  builddir=../..
  for at_dir_var in srcdir top_srcdir top_build_prefix
  do
    eval at_val=\$at_$at_dir_var
    case $at_val in
      [\\/$]* | ?:[\\/]* ) at_prefix= ;;
      *) at_prefix=../../ ;;
    esac
    eval "$at_dir_var=\$at_prefix\$at_val"
  done
fi

## -------------------- ##
## Directory structure. ##
## -------------------- ##

# This is the set of directories and files used by this script
# (non-literals are capitalized):
#
# TESTSUITE         - the testsuite
# TESTSUITE.log     - summarizes the complete testsuite run
# TESTSUITE.dir/    - created during a run, remains after -d or failed test
# + at-groups/      - during a run: status of all groups in run
# | + NNN/          - during a run: meta-data about test group NNN
# | | + check-line  - location (source file and line) of current AT_CHECK
# | | + status      - exit status of current AT_CHECK
# | | + stdout      - stdout of current AT_CHECK
# | | + stder1      - stderr, including trace
# | | + stderr      - stderr, with trace filtered out
# | | + test-source - portion of testsuite that defines group
# | | + times       - timestamps for computing duration
# | | + pass        - created if group passed
# | | + xpass       - created if group xpassed
# | | + fail        - created if group failed
# | | + xfail       - created if group xfailed
# | | + skip        - created if group skipped
# + at-stop         - during a run: end the run if this file exists
# + at-source-lines - during a run: cache of TESTSUITE line numbers for extraction
# + 0..NNN/         - created for each group NNN, remains after -d or failed test
# | + TESTSUITE.log - summarizes the group results
# | + ...           - files created during the group

# The directory the whole suite works in.
# Should be absolute to let the user `cd' at will.
at_suite_dir=$at_dir/$as_me.dir
# The file containing the suite ($at_dir might have changed since earlier).
at_suite_log=$at_dir/$as_me.log
# The directory containing helper files per test group.
at_helper_dir=$at_suite_dir/at-groups
# Stop file: if it exists, do not start new jobs.
at_stop_file=$at_suite_dir/at-stop
# The fifo used for the job dispatcher.
at_job_fifo=$at_suite_dir/at-job-fifo

if $at_clean; then
  test -d "$at_suite_dir" &&
    find "$at_suite_dir" -type d ! -perm -700 -exec chmod u+rwx \{\} \;
  rm -f -r "$at_suite_dir" "$at_suite_log"
  exit $?
fi

# Don't take risks: use only absolute directories in PATH.
#
# For stand-alone test suites (ie. atconfig was not found),
# AUTOTEST_PATH is relative to `.'.
#
# For embedded test suites, AUTOTEST_PATH is relative to the top level
# of the package.  Then expand it into build/src parts, since users
# may create executables in both places.
AUTOTEST_PATH=`$as_echo "$AUTOTEST_PATH" | sed "s|:|$PATH_SEPARATOR|g"`
at_path=
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $AUTOTEST_PATH $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    test -n "$at_path" && as_fn_append at_path $PATH_SEPARATOR
case $as_dir in
  [\\/]* | ?:[\\/]* )
    as_fn_append at_path "$as_dir"
    ;;
  * )
    if test -z "$at_top_build_prefix"; then
      # Stand-alone test suite.
      as_fn_append at_path "$as_dir"
    else
      # Embedded test suite.
      as_fn_append at_path "$at_top_build_prefix$as_dir$PATH_SEPARATOR"
      as_fn_append at_path "$at_top_srcdir/$as_dir"
    fi
    ;;
esac
  done
IFS=$as_save_IFS


# Now build and simplify PATH.
#
# There might be directories that don't exist, but don't redirect
# builtins' (eg., cd) stderr directly: Ultrix's sh hates that.
at_new_path=
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $at_path
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    test -d "$as_dir" || continue
case $as_dir in
  [\\/]* | ?:[\\/]* ) ;;
  * ) as_dir=`(cd "$as_dir" && pwd) 2>/dev/null` ;;
esac
case $PATH_SEPARATOR$at_new_path$PATH_SEPARATOR in
  *$PATH_SEPARATOR$as_dir$PATH_SEPARATOR*) ;;
  $PATH_SEPARATOR$PATH_SEPARATOR) at_new_path=$as_dir ;;
  *) as_fn_append at_new_path "$PATH_SEPARATOR$as_dir" ;;
esac
  done
IFS=$as_save_IFS

PATH=$at_new_path
export PATH

# Setting up the FDs.



# 5 is the log file.  Not to be overwritten if `-d'.
if $at_debug_p; then
  at_suite_log=/dev/null
else
  : >"$at_suite_log"
fi
exec 5>>"$at_suite_log"

# Banners and logs.
$as_echo "## ---------------------------------------- ##
## MATIO 1.5.0 test suite: matio testsuite. ##
## ---------------------------------------- ##"
{
  $as_echo "## ---------------------------------------- ##
## MATIO 1.5.0 test suite: matio testsuite. ##
## ---------------------------------------- ##"
  echo

  $as_echo "$as_me: command line was:"
  $as_echo "  \$ $0 $at_cli_args"
  echo

  # If ChangeLog exists, list a few lines in case it might help determining
  # the exact version.
  if test -n "$at_top_srcdir" && test -f "$at_top_srcdir/ChangeLog"; then
    $as_echo "## ---------- ##
## ChangeLog. ##
## ---------- ##"
    echo
    sed 's/^/| /;10q' "$at_top_srcdir/ChangeLog"
    echo
  fi

  {
cat <<_ASUNAME
## --------- ##
## Platform. ##
## --------- ##

hostname = `(hostname || uname -n) 2>/dev/null | sed 1q`
uname -m = `(uname -m) 2>/dev/null || echo unknown`
uname -r = `(uname -r) 2>/dev/null || echo unknown`
uname -s = `(uname -s) 2>/dev/null || echo unknown`
uname -v = `(uname -v) 2>/dev/null || echo unknown`

/usr/bin/uname -p = `(/usr/bin/uname -p) 2>/dev/null || echo unknown`
/bin/uname -X     = `(/bin/uname -X) 2>/dev/null     || echo unknown`

/bin/arch              = `(/bin/arch) 2>/dev/null              || echo unknown`
/usr/bin/arch -k       = `(/usr/bin/arch -k) 2>/dev/null       || echo unknown`
/usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null || echo unknown`
/usr/bin/hostinfo      = `(/usr/bin/hostinfo) 2>/dev/null      || echo unknown`
/bin/machine           = `(/bin/machine) 2>/dev/null           || echo unknown`
/usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null       || echo unknown`
/bin/universe          = `(/bin/universe) 2>/dev/null          || echo unknown`

_ASUNAME

as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    $as_echo "PATH: $as_dir"
  done
IFS=$as_save_IFS

}
  echo

  # Contents of the config files.
  for at_file in atconfig atlocal
  do
    test -r $at_file || continue
    $as_echo "$as_me: $at_file:"
    sed 's/^/| /' $at_file
    echo
  done
} >&5


## ------------------------- ##
## Autotest shell functions. ##
## ------------------------- ##

# at_fn_banner NUMBER
# -------------------
# Output banner NUMBER, provided the testsuite is running multiple groups and
# this particular banner has not yet been printed.
at_fn_banner ()
{
  $at_print_banners || return 0
  eval at_banner_text=\$at_banner_text_$1
  test "x$at_banner_text" = "x " && return 0
  eval "at_banner_text_$1=\" \""
  if test -z "$at_banner_text"; then
    $at_first || echo
  else
    $as_echo "$as_nl$at_banner_text$as_nl"
  fi
} # at_fn_banner

# at_fn_check_prepare_notrace REASON LINE
# ---------------------------------------
# Perform AT_CHECK preparations for the command at LINE for an untraceable
# command; REASON is the reason for disabling tracing.
at_fn_check_prepare_notrace ()
{
  $at_trace_echo "Not enabling shell tracing (command contains $1)"
  $as_echo "$2" >"$at_check_line_file"
  at_check_trace=: at_check_filter=:
  : >"$at_stdout"; : >"$at_stderr"
}

# at_fn_check_prepare_trace LINE
# ------------------------------
# Perform AT_CHECK preparations for the command at LINE for a traceable
# command.
at_fn_check_prepare_trace ()
{
  $as_echo "$1" >"$at_check_line_file"
  at_check_trace=$at_traceon at_check_filter=$at_check_filter_trace
  : >"$at_stdout"; : >"$at_stderr"
}

# at_fn_check_prepare_dynamic COMMAND LINE
# ----------------------------------------
# Decide if COMMAND at LINE is traceable at runtime, and call the appropriate
# preparation function.
at_fn_check_prepare_dynamic ()
{
  case $1 in
    *$as_nl*)
      at_fn_check_prepare_notrace 'an embedded newline' "$2" ;;
    *)
      at_fn_check_prepare_trace "$2" ;;
  esac
}

# at_fn_filter_trace
# ------------------
# Remove the lines in the file "$at_stderr" generated by "set -x" and print
# them to stderr.
at_fn_filter_trace ()
{
  mv "$at_stderr" "$at_stder1"
  grep '^ *+' "$at_stder1" >&2
  grep -v '^ *+' "$at_stder1" >"$at_stderr"
}

# at_fn_log_failure FILE-LIST
# ---------------------------
# Copy the files in the list on stdout with a "> " prefix, and exit the shell
# with a failure exit code.
at_fn_log_failure ()
{
  for file
    do $as_echo "$file:"; sed 's/^/> /' "$file"; done
  echo 1 > "$at_status_file"
  exit 1
}

# at_fn_check_skip EXIT-CODE LINE
# -------------------------------
# Check whether EXIT-CODE is a special exit code (77 or 99), and if so exit
# the test group subshell with that same exit code. Use LINE in any report
# about test failure.
at_fn_check_skip ()
{
  case $1 in
    99) echo 99 > "$at_status_file"; at_failed=:
	$as_echo "$2: hard failure"; exit 99;;
    77) echo 77 > "$at_status_file"; exit 77;;
  esac
}

# at_fn_check_status EXPECTED EXIT-CODE LINE
# ------------------------------------------
# Check whether EXIT-CODE is the EXPECTED exit code, and if so do nothing.
# Otherwise, if it is 77 or 99, exit the test group subshell with that same
# exit code; if it is anything else print an error message referring to LINE,
# and fail the test.
at_fn_check_status ()
{
  case $2 in
    $1 ) ;;
    77) echo 77 > "$at_status_file"; exit 77;;
    99) echo 99 > "$at_status_file"; at_failed=:
	$as_echo "$3: hard failure"; exit 99;;
    *) $as_echo "$3: exit code was $2, expected $1"
      at_failed=:;;
  esac
}

# at_fn_diff_devnull FILE
# -----------------------
# Emit a diff between /dev/null and FILE. Uses "test -s" to avoid useless diff
# invocations.
at_fn_diff_devnull ()
{
  test -s "$1" || return 0
  $at_diff "$at_devnull" "$1"
}

# at_fn_test NUMBER
# -----------------
# Parse out test NUMBER from the tail of this file.
at_fn_test ()
{
  eval at_sed=\$at_sed$1
  sed "$at_sed" "$at_myself" > "$at_test_source"
}

# at_fn_create_debugging_script
# -----------------------------
# Create the debugging script $at_group_dir/run which will reproduce the
# current test group.
at_fn_create_debugging_script ()
{
  {
    echo "#! /bin/sh" &&
    echo 'test "${ZSH_VERSION+set}" = set && alias -g '\''${1+"$@"}'\''='\''"$@"'\''' &&
    $as_echo "cd '$at_dir'" &&
    $as_echo "exec \${CONFIG_SHELL-$SHELL} \"$at_myself\" -v -d $at_debug_args $at_group \${1+\"\$@\"}" &&
    echo 'exit 1'
  } >"$at_group_dir/run" &&
  chmod +x "$at_group_dir/run"
}

## -------------------------------- ##
## End of autotest shell functions. ##
## -------------------------------- ##
{
  $as_echo "## ---------------- ##
## Tested programs. ##
## ---------------- ##"
  echo
} >&5

# Report what programs are being tested.
for at_program in : $at_tested
do
  test "$at_program" = : && continue
  case $at_program in
    [\\/]* | ?:[\\/]* ) $at_program_=$at_program ;;
    * )
    as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    test -f "$as_dir/$at_program" && break
  done
IFS=$as_save_IFS

    at_program_=$as_dir/$at_program ;;
  esac
  if test -f "$at_program_"; then
    {
      $as_echo "$at_srcdir/testsuite.at:17: $at_program_ --version"
      "$at_program_" --version </dev/null
      echo
    } >&5 2>&1
  else
    as_fn_error $? "cannot find $at_program" "$LINENO" 5
  fi
done

{
  $as_echo "## ------------------ ##
## Running the tests. ##
## ------------------ ##"
} >&5

at_start_date=`date`
at_start_time=`date +%s 2>/dev/null`
$as_echo "$as_me: starting at: $at_start_date" >&5

# Create the master directory if it doesn't already exist.
as_dir="$at_suite_dir"; as_fn_mkdir_p ||
  as_fn_error $? "cannot create \`$at_suite_dir'" "$LINENO" 5

# Can we diff with `/dev/null'?  DU 5.0 refuses.
if diff /dev/null /dev/null >/dev/null 2>&1; then
  at_devnull=/dev/null
else
  at_devnull=$at_suite_dir/devnull
  >"$at_devnull"
fi

# Use `diff -u' when possible.
if at_diff=`diff -u "$at_devnull" "$at_devnull" 2>&1` && test -z "$at_diff"
then
  at_diff='diff -u'
else
  at_diff=diff
fi

# Get the last needed group.
for at_group in : $at_groups; do :; done

# Extract the start and end lines of each test group at the tail
# of this file
awk '
BEGIN { FS="" }
/^#AT_START_/ {
  start = NR
}
/^#AT_STOP_/ {
  test = substr ($ 0, 10)
  print "at_sed" test "=\"1," start "d;" (NR-1) "q\""
  if (test == "'"$at_group"'") exit
}' "$at_myself" > "$at_suite_dir/at-source-lines" &&
. "$at_suite_dir/at-source-lines" ||
  as_fn_error $? "cannot create test line number cache" "$LINENO" 5
rm -f "$at_suite_dir/at-source-lines"

# Set number of jobs for `-j'; avoid more jobs than test groups.
set X $at_groups; shift; at_max_jobs=$#
if test $at_max_jobs -eq 0; then
  at_jobs=1
fi
if test $at_jobs -ne 1 &&
   { test $at_jobs -eq 0 || test $at_jobs -gt $at_max_jobs; }; then
  at_jobs=$at_max_jobs
fi

# If parallel mode, don't output banners, don't split summary lines.
if test $at_jobs -ne 1; then
  at_print_banners=false
  at_quiet=:
fi

# Set up helper dirs.
rm -rf "$at_helper_dir" &&
mkdir "$at_helper_dir" &&
cd "$at_helper_dir" &&
{ test -z "$at_groups" || mkdir $at_groups; } ||
as_fn_error $? "testsuite directory setup failed" "$LINENO" 5

# Functions for running a test group.  We leave the actual
# test group execution outside of a shell function in order
# to avoid hitting zsh 4.x exit status bugs.

# at_fn_group_prepare
# -------------------
# Prepare for running a test group.
at_fn_group_prepare ()
{
  # The directory for additional per-group helper files.
  at_job_dir=$at_helper_dir/$at_group
  # The file containing the location of the last AT_CHECK.
  at_check_line_file=$at_job_dir/check-line
  # The file containing the exit status of the last command.
  at_status_file=$at_job_dir/status
  # The files containing the output of the tested commands.
  at_stdout=$at_job_dir/stdout
  at_stder1=$at_job_dir/stder1
  at_stderr=$at_job_dir/stderr
  # The file containing the code for a test group.
  at_test_source=$at_job_dir/test-source
  # The file containing dates.
  at_times_file=$at_job_dir/times

  # Be sure to come back to the top test directory.
  cd "$at_suite_dir"

  # Clearly separate the test groups when verbose.
  $at_first || $at_verbose echo

  at_group_normalized=$at_group

  eval 'while :; do
    case $at_group_normalized in #(
    '"$at_format"'*) break;;
    esac
    at_group_normalized=0$at_group_normalized
  done'


  # Create a fresh directory for the next test group, and enter.
  # If one already exists, the user may have invoked ./run from
  # within that directory; we remove the contents, but not the
  # directory itself, so that we aren't pulling the rug out from
  # under the shell's notion of the current directory.
  at_group_dir=$at_suite_dir/$at_group_normalized
  at_group_log=$at_group_dir/$as_me.log
  if test -d "$at_group_dir"; then
  find "$at_group_dir" -type d ! -perm -700 -exec chmod u+rwx {} \;
  rm -fr "$at_group_dir"/* "$at_group_dir"/.[!.] "$at_group_dir"/.??*
fi ||
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: test directory for $at_group_normalized could not be cleaned" >&5
$as_echo "$as_me: WARNING: test directory for $at_group_normalized could not be cleaned" >&2;}
  # Be tolerant if the above `rm' was not able to remove the directory.
  as_dir="$at_group_dir"; as_fn_mkdir_p

  echo 0 > "$at_status_file"

  # In verbose mode, append to the log file *and* show on
  # the standard output; in quiet mode only write to the log.
  if test -z "$at_verbose"; then
    at_tee_pipe='tee -a "$at_group_log"'
  else
    at_tee_pipe='cat >> "$at_group_log"'
  fi
}

# at_fn_group_banner ORDINAL LINE DESC PAD [BANNER]
# -------------------------------------------------
# Declare the test group ORDINAL, located at LINE with group description DESC,
# and residing under BANNER. Use PAD to align the status column.
at_fn_group_banner ()
{
  at_setup_line="$2"
  test -n "$5" && at_fn_banner $5
  at_desc="$3"
  case $1 in
    [0-9])      at_desc_line="  $1: ";;
    [0-9][0-9]) at_desc_line=" $1: " ;;
    *)          at_desc_line="$1: "  ;;
  esac
  as_fn_append at_desc_line "$3$4"
  $at_quiet $as_echo_n "$at_desc_line"
  echo "#                             -*- compilation -*-" >> "$at_group_log"
}

# at_fn_group_postprocess
# -----------------------
# Perform cleanup after running a test group.
at_fn_group_postprocess ()
{
  # Be sure to come back to the suite directory, in particular
  # since below we might `rm' the group directory we are in currently.
  cd "$at_suite_dir"

  if test ! -f "$at_check_line_file"; then
    sed "s/^ */$as_me: WARNING: /" <<_ATEOF
      A failure happened in a test group before any test could be
      run. This means that test suite is improperly designed.  Please
      report this failure to <chulbe1@mac.com>.
_ATEOF
    $as_echo "$at_setup_line" >"$at_check_line_file"
    at_status=99
  fi
  $at_verbose $as_echo_n "$at_group. $at_setup_line: "
  $as_echo_n "$at_group. $at_setup_line: " >> "$at_group_log"
  case $at_xfail:$at_status in
    yes:0)
	at_msg="UNEXPECTED PASS"
	at_res=xpass
	at_errexit=$at_errexit_p
	at_color=$at_red
	;;
    no:0)
	at_msg="ok"
	at_res=pass
	at_errexit=false
	at_color=$at_grn
	;;
    *:77)
	at_msg='skipped ('`cat "$at_check_line_file"`')'
	at_res=skip
	at_errexit=false
	at_color=$at_blu
	;;
    no:* | *:99)
	at_msg='FAILED ('`cat "$at_check_line_file"`')'
	at_res=fail
	at_errexit=$at_errexit_p
	at_color=$at_red
	;;
    yes:*)
	at_msg='expected failure ('`cat "$at_check_line_file"`')'
	at_res=xfail
	at_errexit=false
	at_color=$at_lgn
	;;
  esac
  echo "$at_res" > "$at_job_dir/$at_res"
  # In parallel mode, output the summary line only afterwards.
  if test $at_jobs -ne 1 && test -n "$at_verbose"; then
    $as_echo "$at_desc_line $at_color$at_msg$at_std"
  else
    # Make sure there is a separator even with long titles.
    $as_echo " $at_color$at_msg$at_std"
  fi
  at_log_msg="$at_group. $at_desc ($at_setup_line): $at_msg"
  case $at_status in
    0|77)
      # $at_times_file is only available if the group succeeded.
      # We're not including the group log, so the success message
      # is written in the global log separately.  But we also
      # write to the group log in case they're using -d.
      if test -f "$at_times_file"; then
	at_log_msg="$at_log_msg     ("`sed 1d "$at_times_file"`')'
	rm -f "$at_times_file"
      fi
      $as_echo "$at_log_msg" >> "$at_group_log"
      $as_echo "$at_log_msg" >&5

      # Cleanup the group directory, unless the user wants the files
      # or the success was unexpected.
      if $at_debug_p || test $at_res = xpass; then
	at_fn_create_debugging_script
	if test $at_res = xpass && $at_errexit; then
	  echo stop > "$at_stop_file"
	fi
      else
	if test -d "$at_group_dir"; then
	  find "$at_group_dir" -type d ! -perm -700 -exec chmod u+rwx \{\} \;
	  rm -fr "$at_group_dir"
	fi
	rm -f "$at_test_source"
      fi
      ;;
    *)
      # Upon failure, include the log into the testsuite's global
      # log.  The failure message is written in the group log.  It
      # is later included in the global log.
      $as_echo "$at_log_msg" >> "$at_group_log"

      # Upon failure, keep the group directory for autopsy, and create
      # the debugging script.  With -e, do not start any further tests.
      at_fn_create_debugging_script
      if $at_errexit; then
	echo stop > "$at_stop_file"
      fi
      ;;
  esac
}


## ------------ ##
## Driver loop. ##
## ------------ ##


if (set -m && set +m && set +b) >/dev/null 2>&1; then
  set +b
  at_job_control_on='set -m' at_job_control_off='set +m' at_job_group=-
else
  at_job_control_on=: at_job_control_off=: at_job_group=
fi

for at_signal in 1 2 15; do
  trap 'set +x; set +e
	$at_job_control_off
	at_signal='"$at_signal"'
	echo stop > "$at_stop_file"
	trap "" $at_signal
	at_pgids=
	for at_pgid in `jobs -p 2>/dev/null`; do
	  at_pgids="$at_pgids $at_job_group$at_pgid"
	done
	test -z "$at_pgids" || kill -$at_signal $at_pgids 2>/dev/null
	wait
	if test "$at_jobs" -eq 1 || test -z "$at_verbose"; then
	  echo >&2
	fi
	at_signame=`kill -l $at_signal 2>&1 || echo $at_signal`
	set x $at_signame
	test 1 -gt 2 && at_signame=$at_signal
	{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: caught signal $at_signame, bailing out" >&5
$as_echo "$as_me: WARNING: caught signal $at_signame, bailing out" >&2;}
	as_fn_arith 128 + $at_signal && exit_status=$as_val
	as_fn_exit $exit_status' $at_signal
done

rm -f "$at_stop_file"
at_first=:

if test $at_jobs -ne 1 &&
     rm -f "$at_job_fifo" &&
     test -n "$at_job_group" &&
     ( mkfifo "$at_job_fifo" && trap 'exit 1' PIPE STOP TSTP ) 2>/dev/null
then
  # FIFO job dispatcher.

  trap 'at_pids=
	for at_pid in `jobs -p`; do
	  at_pids="$at_pids $at_job_group$at_pid"
	done
	if test -n "$at_pids"; then
	  at_sig=TSTP
	  test "${TMOUT+set}" = set && at_sig=STOP
	  kill -$at_sig $at_pids 2>/dev/null
	fi
	kill -STOP $$
	test -z "$at_pids" || kill -CONT $at_pids 2>/dev/null' TSTP

  echo
  # Turn jobs into a list of numbers, starting from 1.
  at_joblist=`$as_echo "$at_groups" | sed -n 1,${at_jobs}p`

  set X $at_joblist
  shift
  for at_group in $at_groups; do
    $at_job_control_on 2>/dev/null
    (
      # Start one test group.
      $at_job_control_off
      if $at_first; then
	exec 7>"$at_job_fifo"
      else
	exec 6<&-
      fi
      trap 'set +x; set +e
	    trap "" PIPE
	    echo stop > "$at_stop_file"
	    echo >&7
	    as_fn_exit 141' PIPE
      at_fn_group_prepare
      if cd "$at_group_dir" &&
	 at_fn_test $at_group &&
	 . "$at_test_source"
      then :; else
	{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: unable to parse test group: $at_group" >&5
$as_echo "$as_me: WARNING: unable to parse test group: $at_group" >&2;}
	at_failed=:
      fi
      at_fn_group_postprocess
      echo >&7
    ) &
    $at_job_control_off
    if $at_first; then
      at_first=false
      exec 6<"$at_job_fifo" 7>"$at_job_fifo"
    fi
    shift # Consume one token.
    if test $# -gt 0; then :; else
      read at_token <&6 || break
      set x $*
    fi
    test -f "$at_stop_file" && break
  done
  exec 7>&-
  # Read back the remaining ($at_jobs - 1) tokens.
  set X $at_joblist
  shift
  if test $# -gt 0; then
    shift
    for at_job
    do
      read at_token
    done <&6
  fi
  exec 6<&-
  wait
else
  # Run serially, avoid forks and other potential surprises.
  for at_group in $at_groups; do
    at_fn_group_prepare
    if cd "$at_group_dir" &&
       at_fn_test $at_group &&
       . "$at_test_source"; then :; else
      { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: unable to parse test group: $at_group" >&5
$as_echo "$as_me: WARNING: unable to parse test group: $at_group" >&2;}
      at_failed=:
    fi
    at_fn_group_postprocess
    test -f "$at_stop_file" && break
    at_first=false
  done
fi

# Wrap up the test suite with summary statistics.
cd "$at_helper_dir"

# Use ?..???? when the list must remain sorted, the faster * otherwise.
at_pass_list=`for f in */pass; do echo $f; done | sed '/\*/d; s,/pass,,'`
at_skip_list=`for f in */skip; do echo $f; done | sed '/\*/d; s,/skip,,'`
at_xfail_list=`for f in */xfail; do echo $f; done | sed '/\*/d; s,/xfail,,'`
at_xpass_list=`for f in ?/xpass ??/xpass ???/xpass ????/xpass; do
		 echo $f; done | sed '/?/d; s,/xpass,,'`
at_fail_list=`for f in ?/fail ??/fail ???/fail ????/fail; do
		echo $f; done | sed '/?/d; s,/fail,,'`

set X $at_pass_list $at_xpass_list $at_xfail_list $at_fail_list $at_skip_list
shift; at_group_count=$#
set X $at_xpass_list; shift; at_xpass_count=$#; at_xpass_list=$*
set X $at_xfail_list; shift; at_xfail_count=$#
set X $at_fail_list; shift; at_fail_count=$#; at_fail_list=$*
set X $at_skip_list; shift; at_skip_count=$#

as_fn_arith $at_group_count - $at_skip_count && at_run_count=$as_val
as_fn_arith $at_xpass_count + $at_fail_count && at_unexpected_count=$as_val
as_fn_arith $at_xfail_count + $at_fail_count && at_total_fail_count=$as_val

# Back to the top directory.
cd "$at_dir"
rm -rf "$at_helper_dir"

# Compute the duration of the suite.
at_stop_date=`date`
at_stop_time=`date +%s 2>/dev/null`
$as_echo "$as_me: ending at: $at_stop_date" >&5
case $at_start_time,$at_stop_time in
  [0-9]*,[0-9]*)
    as_fn_arith $at_stop_time - $at_start_time && at_duration_s=$as_val
    as_fn_arith $at_duration_s / 60 && at_duration_m=$as_val
    as_fn_arith $at_duration_m / 60 && at_duration_h=$as_val
    as_fn_arith $at_duration_s % 60 && at_duration_s=$as_val
    as_fn_arith $at_duration_m % 60 && at_duration_m=$as_val
    at_duration="${at_duration_h}h ${at_duration_m}m ${at_duration_s}s"
    $as_echo "$as_me: test suite duration: $at_duration" >&5
    ;;
esac

echo
$as_echo "## ------------- ##
## Test results. ##
## ------------- ##"
echo
{
  echo
  $as_echo "## ------------- ##
## Test results. ##
## ------------- ##"
  echo
} >&5

if test $at_run_count = 1; then
  at_result="1 test"
  at_were=was
else
  at_result="$at_run_count tests"
  at_were=were
fi
if $at_errexit_p && test $at_unexpected_count != 0; then
  if test $at_xpass_count = 1; then
    at_result="$at_result $at_were run, one passed"
  else
    at_result="$at_result $at_were run, one failed"
  fi
  at_result="$at_result unexpectedly and inhibited subsequent tests."
  at_color=$at_red
else
  # Don't you just love exponential explosion of the number of cases?
  at_color=$at_red
  case $at_xpass_count:$at_fail_count:$at_xfail_count in
    # So far, so good.
    0:0:0) at_result="$at_result $at_were successful." at_color=$at_grn ;;
    0:0:*) at_result="$at_result behaved as expected." at_color=$at_lgn ;;

    # Some unexpected failures
    0:*:0) at_result="$at_result $at_were run,
$at_fail_count failed unexpectedly." ;;

    # Some failures, both expected and unexpected
    0:*:1) at_result="$at_result $at_were run,
$at_total_fail_count failed ($at_xfail_count expected failure)." ;;
    0:*:*) at_result="$at_result $at_were run,
$at_total_fail_count failed ($at_xfail_count expected failures)." ;;

    # No unexpected failures, but some xpasses
    *:0:*) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly." ;;

    # No expected failures, but failures and xpasses
    *:1:0) at_result="$at_result $at_were run,
$at_unexpected_count did not behave as expected ($at_fail_count unexpected failure)." ;;
    *:*:0) at_result="$at_result $at_were run,
$at_unexpected_count did not behave as expected ($at_fail_count unexpected failures)." ;;

    # All of them.
    *:*:1) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly,
$at_total_fail_count failed ($at_xfail_count expected failure)." ;;
    *:*:*) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly,
$at_total_fail_count failed ($at_xfail_count expected failures)." ;;
  esac

  if test $at_skip_count = 0 && test $at_run_count -gt 1; then
    at_result="All $at_result"
  fi
fi

# Now put skips in the mix.
case $at_skip_count in
  0) ;;
  1) at_result="$at_result
1 test was skipped." ;;
  *) at_result="$at_result
$at_skip_count tests were skipped." ;;
esac

if test $at_unexpected_count = 0; then
  echo "$at_color$at_result$at_std"
  echo "$at_result" >&5
else
  echo "${at_color}ERROR: $at_result$at_std" >&2
  echo "ERROR: $at_result" >&5
  {
    echo
    $as_echo "## ------------------------ ##
## Summary of the failures. ##
## ------------------------ ##"

    # Summary of failed and skipped tests.
    if test $at_fail_count != 0; then
      echo "Failed tests:"
      $SHELL "$at_myself" $at_fail_list --list
      echo
    fi
    if test $at_skip_count != 0; then
      echo "Skipped tests:"
      $SHELL "$at_myself" $at_skip_list --list
      echo
    fi
    if test $at_xpass_count != 0; then
      echo "Unexpected passes:"
      $SHELL "$at_myself" $at_xpass_list --list
      echo
    fi
    if test $at_fail_count != 0; then
      $as_echo "## ---------------------- ##
## Detailed failed tests. ##
## ---------------------- ##"
      echo
      for at_group in $at_fail_list
      do
	at_group_normalized=$at_group

  eval 'while :; do
    case $at_group_normalized in #(
    '"$at_format"'*) break;;
    esac
    at_group_normalized=0$at_group_normalized
  done'

	cat "$at_suite_dir/$at_group_normalized/$as_me.log"
	echo
      done
      echo
    fi
    if test -n "$at_top_srcdir"; then
      sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
## ${at_top_build_prefix}config.log ##
_ASBOX
      sed 's/^/| /' ${at_top_build_prefix}config.log
      echo
    fi
  } >&5

  sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
## $as_me.log was created. ##
_ASBOX

  echo
  if $at_debug_p; then
    at_msg='per-test log files'
  else
    at_msg="\`${at_testdir+${at_testdir}/}$as_me.log'"
  fi
  $as_echo "Please send $at_msg and all information you think might help:

   To: <chulbe1@mac.com>
   Subject: [MATIO 1.5.0] $as_me: $at_fail_list${at_fail_list:+ failed${at_xpass_list:+, }}$at_xpass_list${at_xpass_list:+ passed unexpectedly}

You may investigate any problem if you feel able to do so, in which
case the test suite provides a good starting point.  Its output may
be found below \`${at_testdir+${at_testdir}/}$as_me.dir'.
"
  exit 1
fi

exit 0

## ------------- ##
## Actual tests. ##
## ------------- ##
#AT_START_1
at_fn_group_banner 1 'mat4_read.at:19' \
  "Read 2d double-precision array" "                 " 1
at_xfail=no
(
  $as_echo "1. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat4_read.at:20: \$builddir/test_mat readvar4 \$srcdir/datasets/matio_test_cases_v4_le.mat var1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar4 $srcdir/datasets/matio_test_cases_v4_le.mat var1" "mat4_read.at:20"
( $at_check_trace; $builddir/test_mat readvar4 $srcdir/datasets/matio_test_cases_v4_le.mat var1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var1
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat4_read.at:20"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1
#AT_START_2
at_fn_group_banner 2 'mat4_read.at:36' \
  "Read 2d double-precision complex array" "         " 1
at_xfail=no
(
  $as_echo "2. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat4_read.at:37: \$builddir/test_mat readvar4 \$srcdir/datasets/matio_test_cases_v4_le.mat var11"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar4 $srcdir/datasets/matio_test_cases_v4_le.mat var11" "mat4_read.at:37"
( $at_check_trace; $builddir/test_mat readvar4 $srcdir/datasets/matio_test_cases_v4_le.mat var11
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var11
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat4_read.at:37"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_2
#AT_START_3
at_fn_group_banner 3 'mat5_uncompressed_read_le.at:17' \
  "Read 2D double-precision array" "                 " 2
at_xfail=no
(
  $as_echo "3. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:18: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var1" "mat5_uncompressed_read_le.at:18"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var1
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:18"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_3
#AT_START_4
at_fn_group_banner 4 'mat5_uncompressed_read_le.at:34' \
  "Read 2D single-precision array" "                 " 2
at_xfail=no
(
  $as_echo "4. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:35: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var2"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var2" "mat5_uncompressed_read_le.at:35"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var2
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var2
      Rank: 2
Dimensions: 4 x 5
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:35"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_4
#AT_START_5
at_fn_group_banner 5 'mat5_uncompressed_read_le.at:51' \
  "Read 2D 64-bit integer array" "                   " 2
at_xfail=no
(
  $as_echo "5. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:52: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var3"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var3" "mat5_uncompressed_read_le.at:52"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var3
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var3
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:52"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_5
#AT_START_6
at_fn_group_banner 6 'mat5_uncompressed_read_le.at:68' \
  "Read 2D 64-bit unsigned integer array" "          " 2
at_xfail=no
(
  $as_echo "6. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:69: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var4"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var4" "mat5_uncompressed_read_le.at:69"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var4
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var4
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:69"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_6
#AT_START_7
at_fn_group_banner 7 'mat5_uncompressed_read_le.at:85' \
  "Read 2D 32-bit integer array" "                   " 2
at_xfail=no
(
  $as_echo "7. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:86: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var5"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var5" "mat5_uncompressed_read_le.at:86"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var5
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var5
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:86"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_7
#AT_START_8
at_fn_group_banner 8 'mat5_uncompressed_read_le.at:102' \
  "Read 2D 32-bit unsigned integer array" "          " 2
at_xfail=no
(
  $as_echo "8. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:103: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var6"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var6" "mat5_uncompressed_read_le.at:103"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var6
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var6
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:103"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_8
#AT_START_9
at_fn_group_banner 9 'mat5_uncompressed_read_le.at:119' \
  "Read 2D 16-bit integer array" "                   " 2
at_xfail=no
(
  $as_echo "9. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:120: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var7"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var7" "mat5_uncompressed_read_le.at:120"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var7
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var7
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:120"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_9
#AT_START_10
at_fn_group_banner 10 'mat5_uncompressed_read_le.at:136' \
  "Read 2D 16-bit unsigned integer array" "          " 2
at_xfail=no
(
  $as_echo "10. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:137: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var8"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var8" "mat5_uncompressed_read_le.at:137"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var8
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var8
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:137"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_10
#AT_START_11
at_fn_group_banner 11 'mat5_uncompressed_read_le.at:153' \
  "Read 2D 8-bit integer array" "                    " 2
at_xfail=no
(
  $as_echo "11. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:154: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var9"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var9" "mat5_uncompressed_read_le.at:154"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var9
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var9
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:154"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_11
#AT_START_12
at_fn_group_banner 12 'mat5_uncompressed_read_le.at:170' \
  "Read 2D 8-bit unsigned integer array" "           " 2
at_xfail=no
(
  $as_echo "12. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:171: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var10"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var10" "mat5_uncompressed_read_le.at:171"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var10
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var10
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:171"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_12
#AT_START_13
at_fn_group_banner 13 'mat5_uncompressed_read_le.at:187' \
  "Read 2D double-precision complex array" "         " 2
at_xfail=no
(
  $as_echo "13. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:188: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var11"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var11" "mat5_uncompressed_read_le.at:188"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var11
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var11
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:188"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_13
#AT_START_14
at_fn_group_banner 14 'mat5_uncompressed_read_le.at:204' \
  "Read 2D single-precision complex array" "         " 2
at_xfail=no
(
  $as_echo "14. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:205: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var12"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var12" "mat5_uncompressed_read_le.at:205"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var12
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var12
      Rank: 2
Dimensions: 4 x 5
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:205"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_14
#AT_START_15
at_fn_group_banner 15 'mat5_uncompressed_read_le.at:221' \
  "Read 2D 64-bit integer complex array" "           " 2
at_xfail=no
(
  $as_echo "15. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:222: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var13"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var13" "mat5_uncompressed_read_le.at:222"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var13
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var13
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:222"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_15
#AT_START_16
at_fn_group_banner 16 'mat5_uncompressed_read_le.at:238' \
  "Read 2D 64-bit unsigned integer complex array" "  " 2
at_xfail=no
(
  $as_echo "16. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:239: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var14"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var14" "mat5_uncompressed_read_le.at:239"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var14
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var14
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:239"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_16
#AT_START_17
at_fn_group_banner 17 'mat5_uncompressed_read_le.at:255' \
  "Read 2D 32-bit integer complex array" "           " 2
at_xfail=no
(
  $as_echo "17. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:256: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var15"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var15" "mat5_uncompressed_read_le.at:256"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var15
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var15
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:256"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_17
#AT_START_18
at_fn_group_banner 18 'mat5_uncompressed_read_le.at:272' \
  "Read 2D 32-bit unsigned integer complex array" "  " 2
at_xfail=no
(
  $as_echo "18. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:273: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var16"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var16" "mat5_uncompressed_read_le.at:273"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var16
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var16
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:273"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_18
#AT_START_19
at_fn_group_banner 19 'mat5_uncompressed_read_le.at:289' \
  "Read 2D 16-bit integer complex array" "           " 2
at_xfail=no
(
  $as_echo "19. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:290: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var17"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var17" "mat5_uncompressed_read_le.at:290"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var17
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var17
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:290"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_19
#AT_START_20
at_fn_group_banner 20 'mat5_uncompressed_read_le.at:306' \
  "Read 2D 16-bit unsigned integer complex array" "  " 2
at_xfail=no
(
  $as_echo "20. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:307: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var18"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var18" "mat5_uncompressed_read_le.at:307"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var18
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var18
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:307"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_20
#AT_START_21
at_fn_group_banner 21 'mat5_uncompressed_read_le.at:323' \
  "Read 2D 8-bit integer complex array" "            " 2
at_xfail=no
(
  $as_echo "21. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:324: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var19"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var19" "mat5_uncompressed_read_le.at:324"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var19
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var19
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:324"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_21
#AT_START_22
at_fn_group_banner 22 'mat5_uncompressed_read_le.at:340' \
  "Read 2D 8-bit unsigned integer complex array" "   " 2
at_xfail=no
(
  $as_echo "22. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:341: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var20"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var20" "mat5_uncompressed_read_le.at:341"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var20
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var20
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:341"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_22
#AT_START_23
at_fn_group_banner 23 'mat5_uncompressed_read_le.at:357' \
  "Read double-precision sparse array" "             " 2
at_xfail=no
(
  $as_echo "23. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:358: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var21"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var21" "mat5_uncompressed_read_le.at:358"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var21
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var21
      Rank: 2
Dimensions: 5 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,2)  2
    (3,3)  3
    (4,4)  4
    (5,5)  5
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:358"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_23
#AT_START_24
at_fn_group_banner 24 'mat5_uncompressed_read_le.at:375' \
  "Read double-precision sparse complex array" "     " 2
at_xfail=no
(
  $as_echo "24. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:376: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var22"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var22" "mat5_uncompressed_read_le.at:376"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var22
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var22
      Rank: 2
Dimensions: 5 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 6i
    (2,2)  2 + 7i
    (3,3)  3 + 8i
    (4,4)  4 + 9i
    (5,5)  5 + 10i
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:376"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_24
#AT_START_25
at_fn_group_banner 25 'mat5_uncompressed_read_le.at:393' \
  "Read empty array" "                               " 2
at_xfail=no
(
  $as_echo "25. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:394: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var23"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var23" "mat5_uncompressed_read_le.at:394"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var23
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var23
      Rank: 2
Dimensions: 0 x 0
Class Type: Double Precision Array
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:394"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_25
#AT_START_26
at_fn_group_banner 26 'mat5_uncompressed_read_le.at:403' \
  "Read 2D character array" "                        " 2
at_xfail=no
(
  $as_echo "26. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:404: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var24"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var24" "mat5_uncompressed_read_le.at:404"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var24
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var24
      Rank: 2
Dimensions: 4 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
1234567890!@#\$%^&*()-_=+\`~
[{]}\\|;:'\",<.>/?          
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:404"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_26
#AT_START_27
at_fn_group_banner 27 'mat5_uncompressed_read_le.at:420' \
  "Read empty structure array" "                     " 2
at_xfail=no
(
  $as_echo "27. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:421: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var25"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var25" "mat5_uncompressed_read_le.at:421"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var25
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var25
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
Fields[0] {
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:421"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_27
#AT_START_28
at_fn_group_banner 28 'mat5_uncompressed_read_le.at:432' \
  "Read empty structure array with fields" "         " 2
at_xfail=no
(
  $as_echo "28. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:433: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var26"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var26" "mat5_uncompressed_read_le.at:433"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var26
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var26
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 0
      Name: field2
      Rank: 0
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:433"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_28
#AT_START_29
at_fn_group_banner 29 'mat5_uncompressed_read_le.at:449' \
  "Read structure array with empty fields" "         " 2
at_xfail=no
(
  $as_echo "29. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:450: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var27"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var27" "mat5_uncompressed_read_le.at:450"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var27
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var27
      Rank: 2
Dimensions: 1 x 2
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Character Array
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
Fields[0] {
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:450"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_29
#AT_START_30
at_fn_group_banner 30 'mat5_uncompressed_read_le.at:483' \
  "Read structure array with double-precision fields" "" 2
at_xfail=no
(
  $as_echo "30. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:484: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var28"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var28" "mat5_uncompressed_read_le.at:484"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var28
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var28
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:484"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_30
#AT_START_31
at_fn_group_banner 31 'mat5_uncompressed_read_le.at:532' \
  "Read structure array with single-precision fields" "" 2
at_xfail=no
(
  $as_echo "31. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:533: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var29"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var29" "mat5_uncompressed_read_le.at:533"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var29
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var29
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:533"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_31
#AT_START_32
at_fn_group_banner 32 'mat5_uncompressed_read_le.at:581' \
  "Read structure array with 64-bit integer fields" "" 2
at_xfail=no
(
  $as_echo "32. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:582: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var30"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var30" "mat5_uncompressed_read_le.at:582"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var30
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var30
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:582"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_32
#AT_START_33
at_fn_group_banner 33 'mat5_uncompressed_read_le.at:630' \
  "Read structure array with 64-bit unsigned integer fields" "" 2
at_xfail=no
(
  $as_echo "33. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:631: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var31"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var31" "mat5_uncompressed_read_le.at:631"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var31
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var31
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:631"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_33
#AT_START_34
at_fn_group_banner 34 'mat5_uncompressed_read_le.at:679' \
  "Read structure array with 32-bit integer fields" "" 2
at_xfail=no
(
  $as_echo "34. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:680: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var32"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var32" "mat5_uncompressed_read_le.at:680"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var32
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var32
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:680"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_34
#AT_START_35
at_fn_group_banner 35 'mat5_uncompressed_read_le.at:728' \
  "Read structure array with 32-bit unsigned integer fields" "" 2
at_xfail=no
(
  $as_echo "35. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:729: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var33"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var33" "mat5_uncompressed_read_le.at:729"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var33
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var33
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:729"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_35
#AT_START_36
at_fn_group_banner 36 'mat5_uncompressed_read_le.at:777' \
  "Read structure array with 16-bit integer fields" "" 2
at_xfail=no
(
  $as_echo "36. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:778: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var34"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var34" "mat5_uncompressed_read_le.at:778"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var34
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var34
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:778"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_36
#AT_START_37
at_fn_group_banner 37 'mat5_uncompressed_read_le.at:826' \
  "Read structure array with 16-bit unsigned integer fields" "" 2
at_xfail=no
(
  $as_echo "37. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:827: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var35"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var35" "mat5_uncompressed_read_le.at:827"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var35
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var35
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:827"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_37
#AT_START_38
at_fn_group_banner 38 'mat5_uncompressed_read_le.at:875' \
  "Read structure array with 8-bit integer fields" " " 2
at_xfail=no
(
  $as_echo "38. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:876: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var36"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var36" "mat5_uncompressed_read_le.at:876"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var36
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var36
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:876"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_38
#AT_START_39
at_fn_group_banner 39 'mat5_uncompressed_read_le.at:924' \
  "Read structure array with 8-bit unsigned integer fields" "" 2
at_xfail=no
(
  $as_echo "39. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:925: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var37"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var37" "mat5_uncompressed_read_le.at:925"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var37
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var37
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:925"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_39
#AT_START_40
at_fn_group_banner 40 'mat5_uncompressed_read_le.at:973' \
  "Read structure array with complex double-precision fields" "" 2
at_xfail=no
(
  $as_echo "40. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:974: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var38"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var38" "mat5_uncompressed_read_le.at:974"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var38
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var38
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:974"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_40
#AT_START_41
at_fn_group_banner 41 'mat5_uncompressed_read_le.at:1022' \
  "Read structure array with complex single-precision fields" "" 2
at_xfail=no
(
  $as_echo "41. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1023: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var39"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var39" "mat5_uncompressed_read_le.at:1023"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var39
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var39
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1023"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_41
#AT_START_42
at_fn_group_banner 42 'mat5_uncompressed_read_le.at:1071' \
  "Read structure array with complex 64-bit integer fields" "" 2
at_xfail=no
(
  $as_echo "42. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1072: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var40"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var40" "mat5_uncompressed_read_le.at:1072"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var40
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var40
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1072"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_42
#AT_START_43
at_fn_group_banner 43 'mat5_uncompressed_read_le.at:1120' \
  "Read structure array with complex 64-bit unsigned integer fields" "" 2
at_xfail=no
(
  $as_echo "43. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1121: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var41"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var41" "mat5_uncompressed_read_le.at:1121"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var41
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var41
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1121"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_43
#AT_START_44
at_fn_group_banner 44 'mat5_uncompressed_read_le.at:1169' \
  "Read structure array with complex 32-bit integer fields" "" 2
at_xfail=no
(
  $as_echo "44. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1170: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var42"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var42" "mat5_uncompressed_read_le.at:1170"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var42
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var42
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1170"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_44
#AT_START_45
at_fn_group_banner 45 'mat5_uncompressed_read_le.at:1218' \
  "Read structure array with complex 32-bit unsigned integer fields" "" 2
at_xfail=no
(
  $as_echo "45. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1219: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var43"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var43" "mat5_uncompressed_read_le.at:1219"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var43
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var43
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1219"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_45
#AT_START_46
at_fn_group_banner 46 'mat5_uncompressed_read_le.at:1267' \
  "Read structure array with complex 16-bit integer fields" "" 2
at_xfail=no
(
  $as_echo "46. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1268: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var44"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var44" "mat5_uncompressed_read_le.at:1268"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var44
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var44
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1268"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_46
#AT_START_47
at_fn_group_banner 47 'mat5_uncompressed_read_le.at:1316' \
  "Read structure array with complex 16-bit unsigned integer fields" "" 2
at_xfail=no
(
  $as_echo "47. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1317: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var45"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var45" "mat5_uncompressed_read_le.at:1317"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var45
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var45
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1317"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_47
#AT_START_48
at_fn_group_banner 48 'mat5_uncompressed_read_le.at:1365' \
  "Read structure array with complex 8-bit integer fields" "" 2
at_xfail=no
(
  $as_echo "48. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1366: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var46"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var46" "mat5_uncompressed_read_le.at:1366"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var46
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var46
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1366"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_48
#AT_START_49
at_fn_group_banner 49 'mat5_uncompressed_read_le.at:1414' \
  "Read structure array with complex 8-bit unsigned integer fields" "" 2
at_xfail=no
(
  $as_echo "49. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1415: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var47"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var47" "mat5_uncompressed_read_le.at:1415"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var47
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var47
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1415"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_49
#AT_START_50
at_fn_group_banner 50 'mat5_compressed_read_le.at:17' \
  "Read 2D double-precision array" "                 " 3
at_xfail=no
(
  $as_echo "50. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:18" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:18"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:19: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var1" "mat5_compressed_read_le.at:19"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var1
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:19"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_50
#AT_START_51
at_fn_group_banner 51 'mat5_compressed_read_le.at:35' \
  "Read 2D single-precision array" "                 " 3
at_xfail=no
(
  $as_echo "51. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:36" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:36"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:37: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var2"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var2" "mat5_compressed_read_le.at:37"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var2
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var2
      Rank: 2
Dimensions: 4 x 5
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:37"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_51
#AT_START_52
at_fn_group_banner 52 'mat5_compressed_read_le.at:53' \
  "Read 2D 64-bit integer array" "                   " 3
at_xfail=no
(
  $as_echo "52. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:54" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:54"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:55: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var3"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var3" "mat5_compressed_read_le.at:55"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var3
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var3
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:55"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_52
#AT_START_53
at_fn_group_banner 53 'mat5_compressed_read_le.at:71' \
  "Read 2D 64-bit unsigned integer array" "          " 3
at_xfail=no
(
  $as_echo "53. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:72" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:72"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:73: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var4"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var4" "mat5_compressed_read_le.at:73"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var4
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var4
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:73"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_53
#AT_START_54
at_fn_group_banner 54 'mat5_compressed_read_le.at:89' \
  "Read 2D 32-bit integer array" "                   " 3
at_xfail=no
(
  $as_echo "54. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:90" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:90"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:91: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var5"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var5" "mat5_compressed_read_le.at:91"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var5
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var5
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:91"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_54
#AT_START_55
at_fn_group_banner 55 'mat5_compressed_read_le.at:107' \
  "Read 2D 32-bit unsigned integer array" "          " 3
at_xfail=no
(
  $as_echo "55. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:108" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:108"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:109: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var6"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var6" "mat5_compressed_read_le.at:109"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var6
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var6
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:109"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_55
#AT_START_56
at_fn_group_banner 56 'mat5_compressed_read_le.at:125' \
  "Read 2D 16-bit integer array" "                   " 3
at_xfail=no
(
  $as_echo "56. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:126" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:126"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:127: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var7"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var7" "mat5_compressed_read_le.at:127"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var7
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var7
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:127"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_56
#AT_START_57
at_fn_group_banner 57 'mat5_compressed_read_le.at:143' \
  "Read 2D 16-bit unsigned integer array" "          " 3
at_xfail=no
(
  $as_echo "57. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:144" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:144"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:145: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var8"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var8" "mat5_compressed_read_le.at:145"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var8
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var8
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:145"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_57
#AT_START_58
at_fn_group_banner 58 'mat5_compressed_read_le.at:161' \
  "Read 2D 8-bit integer array" "                    " 3
at_xfail=no
(
  $as_echo "58. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:162" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:162"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:163: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var9"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var9" "mat5_compressed_read_le.at:163"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var9
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var9
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:163"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_58
#AT_START_59
at_fn_group_banner 59 'mat5_compressed_read_le.at:179' \
  "Read 2D 8-bit unsigned integer array" "           " 3
at_xfail=no
(
  $as_echo "59. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:180" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:180"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:181: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var10"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var10" "mat5_compressed_read_le.at:181"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var10
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var10
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:181"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_59
#AT_START_60
at_fn_group_banner 60 'mat5_compressed_read_le.at:197' \
  "Read 2D double-precision complex array" "         " 3
at_xfail=no
(
  $as_echo "60. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:198" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:198"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:199: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var11"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var11" "mat5_compressed_read_le.at:199"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var11
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var11
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:199"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_60
#AT_START_61
at_fn_group_banner 61 'mat5_compressed_read_le.at:215' \
  "Read 2D single-precision complex array" "         " 3
at_xfail=no
(
  $as_echo "61. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:216" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:216"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:217: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var12"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var12" "mat5_compressed_read_le.at:217"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var12
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var12
      Rank: 2
Dimensions: 4 x 5
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:217"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_61
#AT_START_62
at_fn_group_banner 62 'mat5_compressed_read_le.at:233' \
  "Read 2D 64-bit integer complex array" "           " 3
at_xfail=no
(
  $as_echo "62. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:234" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:234"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:235: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var13"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var13" "mat5_compressed_read_le.at:235"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var13
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var13
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:235"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_62
#AT_START_63
at_fn_group_banner 63 'mat5_compressed_read_le.at:251' \
  "Read 2D 64-bit unsigned integer complex array" "  " 3
at_xfail=no
(
  $as_echo "63. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:252" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:252"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:253: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var14"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var14" "mat5_compressed_read_le.at:253"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var14
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var14
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:253"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_63
#AT_START_64
at_fn_group_banner 64 'mat5_compressed_read_le.at:269' \
  "Read 2D 32-bit integer complex array" "           " 3
at_xfail=no
(
  $as_echo "64. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:270" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:270"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:271: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var15"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var15" "mat5_compressed_read_le.at:271"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var15
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var15
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:271"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_64
#AT_START_65
at_fn_group_banner 65 'mat5_compressed_read_le.at:287' \
  "Read 2D 32-bit unsigned integer complex array" "  " 3
at_xfail=no
(
  $as_echo "65. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:288" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:288"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:289: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var16"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var16" "mat5_compressed_read_le.at:289"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var16
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var16
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:289"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_65
#AT_START_66
at_fn_group_banner 66 'mat5_compressed_read_le.at:305' \
  "Read 2D 16-bit integer complex array" "           " 3
at_xfail=no
(
  $as_echo "66. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:306" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:306"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:307: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var17"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var17" "mat5_compressed_read_le.at:307"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var17
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var17
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:307"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_66
#AT_START_67
at_fn_group_banner 67 'mat5_compressed_read_le.at:323' \
  "Read 2D 16-bit unsigned integer complex array" "  " 3
at_xfail=no
(
  $as_echo "67. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:324" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:324"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:325: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var18"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var18" "mat5_compressed_read_le.at:325"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var18
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var18
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:325"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_67
#AT_START_68
at_fn_group_banner 68 'mat5_compressed_read_le.at:341' \
  "Read 2D 8-bit integer complex array" "            " 3
at_xfail=no
(
  $as_echo "68. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:342" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:342"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:343: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var19"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var19" "mat5_compressed_read_le.at:343"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var19
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var19
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:343"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_68
#AT_START_69
at_fn_group_banner 69 'mat5_compressed_read_le.at:359' \
  "Read 2D 8-bit unsigned integer complex array" "   " 3
at_xfail=no
(
  $as_echo "69. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:360" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:360"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:361: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var20"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var20" "mat5_compressed_read_le.at:361"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var20
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var20
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:361"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_69
#AT_START_70
at_fn_group_banner 70 'mat5_compressed_read_le.at:377' \
  "Read double-precision sparse array" "             " 3
at_xfail=no
(
  $as_echo "70. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:378" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:378"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:379: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var21"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var21" "mat5_compressed_read_le.at:379"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var21
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var21
      Rank: 2
Dimensions: 5 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,2)  2
    (3,3)  3
    (4,4)  4
    (5,5)  5
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:379"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_70
#AT_START_71
at_fn_group_banner 71 'mat5_compressed_read_le.at:396' \
  "Read double-precision sparse complex array" "     " 3
at_xfail=no
(
  $as_echo "71. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:397" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:397"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:398: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var22"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var22" "mat5_compressed_read_le.at:398"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var22
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var22
      Rank: 2
Dimensions: 5 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 6i
    (2,2)  2 + 7i
    (3,3)  3 + 8i
    (4,4)  4 + 9i
    (5,5)  5 + 10i
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:398"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_71
#AT_START_72
at_fn_group_banner 72 'mat5_compressed_read_le.at:415' \
  "Read empty array" "                               " 3
at_xfail=no
(
  $as_echo "72. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:416" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:416"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:417: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var23"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var23" "mat5_compressed_read_le.at:417"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var23
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var23
      Rank: 2
Dimensions: 0 x 0
Class Type: Double Precision Array
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:417"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_72
#AT_START_73
at_fn_group_banner 73 'mat5_compressed_read_le.at:426' \
  "Read 2D character array" "                        " 3
at_xfail=no
(
  $as_echo "73. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:427" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:427"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:428: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var24"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var24" "mat5_compressed_read_le.at:428"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var24
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var24
      Rank: 2
Dimensions: 4 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
1234567890!@#\$%^&*()-_=+\`~
[{]}\\|;:'\",<.>/?          
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:428"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_73
#AT_START_74
at_fn_group_banner 74 'mat5_compressed_read_le.at:444' \
  "Read empty structure array" "                     " 3
at_xfail=no
(
  $as_echo "74. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:445" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:445"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:446: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var25"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var25" "mat5_compressed_read_le.at:446"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var25
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var25
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
Fields[0] {
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:446"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_74
#AT_START_75
at_fn_group_banner 75 'mat5_compressed_read_le.at:457' \
  "Read empty structure array with fields" "         " 3
at_xfail=no
(
  $as_echo "75. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:458" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:458"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:459: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var26"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var26" "mat5_compressed_read_le.at:459"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var26
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var26
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 0
      Name: field2
      Rank: 0
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:459"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_75
#AT_START_76
at_fn_group_banner 76 'mat5_compressed_read_le.at:475' \
  "Read structure array with empty fields" "         " 3
at_xfail=no
(
  $as_echo "76. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:476" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:476"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:477: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var27"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var27" "mat5_compressed_read_le.at:477"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var27
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var27
      Rank: 2
Dimensions: 1 x 2
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Character Array
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
Fields[0] {
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:477"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_76
#AT_START_77
at_fn_group_banner 77 'mat5_compressed_read_le.at:510' \
  "Read structure array with double-precision fields" "" 3
at_xfail=no
(
  $as_echo "77. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:511" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:511"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:512: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var28"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var28" "mat5_compressed_read_le.at:512"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var28
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var28
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:512"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_77
#AT_START_78
at_fn_group_banner 78 'mat5_compressed_read_le.at:560' \
  "Read structure array with single-precision fields" "" 3
at_xfail=no
(
  $as_echo "78. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:561" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:561"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:562: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var29"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var29" "mat5_compressed_read_le.at:562"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var29
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var29
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:562"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_78
#AT_START_79
at_fn_group_banner 79 'mat5_compressed_read_le.at:610' \
  "Read structure array with 64-bit integer fields" "" 3
at_xfail=no
(
  $as_echo "79. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:611" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:611"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:612: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var30"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var30" "mat5_compressed_read_le.at:612"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var30
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var30
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:612"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_79
#AT_START_80
at_fn_group_banner 80 'mat5_compressed_read_le.at:660' \
  "Read structure array with 64-bit unsigned integer fields" "" 3
at_xfail=no
(
  $as_echo "80. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:661" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:661"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:662: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var31"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var31" "mat5_compressed_read_le.at:662"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var31
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var31
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:662"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_80
#AT_START_81
at_fn_group_banner 81 'mat5_compressed_read_le.at:710' \
  "Read structure array with 32-bit integer fields" "" 3
at_xfail=no
(
  $as_echo "81. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:711" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:711"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:712: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var32"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var32" "mat5_compressed_read_le.at:712"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var32
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var32
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:712"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_81
#AT_START_82
at_fn_group_banner 82 'mat5_compressed_read_le.at:760' \
  "Read structure array with 32-bit unsigned integer fields" "" 3
at_xfail=no
(
  $as_echo "82. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:761" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:761"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:762: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var33"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var33" "mat5_compressed_read_le.at:762"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var33
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var33
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:762"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_82
#AT_START_83
at_fn_group_banner 83 'mat5_compressed_read_le.at:810' \
  "Read structure array with 16-bit integer fields" "" 3
at_xfail=no
(
  $as_echo "83. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:811" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:811"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:812: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var34"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var34" "mat5_compressed_read_le.at:812"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var34
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var34
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:812"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_83
#AT_START_84
at_fn_group_banner 84 'mat5_compressed_read_le.at:860' \
  "Read structure array with 16-bit unsigned integer fields" "" 3
at_xfail=no
(
  $as_echo "84. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:861" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:861"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:862: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var35"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var35" "mat5_compressed_read_le.at:862"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var35
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var35
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:862"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_84
#AT_START_85
at_fn_group_banner 85 'mat5_compressed_read_le.at:910' \
  "Read structure array with 8-bit integer fields" " " 3
at_xfail=no
(
  $as_echo "85. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:911" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:911"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:912: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var36"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var36" "mat5_compressed_read_le.at:912"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var36
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var36
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:912"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_85
#AT_START_86
at_fn_group_banner 86 'mat5_compressed_read_le.at:960' \
  "Read structure array with 8-bit unsigned integer fields" "" 3
at_xfail=no
(
  $as_echo "86. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:961" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:961"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:962: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var37"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var37" "mat5_compressed_read_le.at:962"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var37
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var37
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:962"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_86
#AT_START_87
at_fn_group_banner 87 'mat5_compressed_read_le.at:1010' \
  "Read structure array with complex double-precision fields" "" 3
at_xfail=no
(
  $as_echo "87. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1011" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1011"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1012: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var38"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var38" "mat5_compressed_read_le.at:1012"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var38
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var38
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1012"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_87
#AT_START_88
at_fn_group_banner 88 'mat5_compressed_read_le.at:1060' \
  "Read structure array with complex single-precision fields" "" 3
at_xfail=no
(
  $as_echo "88. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1061" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1061"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1062: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var39"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var39" "mat5_compressed_read_le.at:1062"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var39
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var39
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1062"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_88
#AT_START_89
at_fn_group_banner 89 'mat5_compressed_read_le.at:1110' \
  "Read structure array with complex 64-bit integer fields" "" 3
at_xfail=no
(
  $as_echo "89. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1111" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1111"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1112: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var40"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var40" "mat5_compressed_read_le.at:1112"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var40
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var40
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1112"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_89
#AT_START_90
at_fn_group_banner 90 'mat5_compressed_read_le.at:1160' \
  "Read structure array with complex 64-bit unsigned integer fields" "" 3
at_xfail=no
(
  $as_echo "90. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1161" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1161"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1162: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var41"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var41" "mat5_compressed_read_le.at:1162"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var41
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var41
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1162"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_90
#AT_START_91
at_fn_group_banner 91 'mat5_compressed_read_le.at:1210' \
  "Read structure array with complex 32-bit integer fields" "" 3
at_xfail=no
(
  $as_echo "91. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1211" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1211"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1212: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var42"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var42" "mat5_compressed_read_le.at:1212"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var42
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var42
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1212"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_91
#AT_START_92
at_fn_group_banner 92 'mat5_compressed_read_le.at:1260' \
  "Read structure array with complex 32-bit unsigned integer fields" "" 3
at_xfail=no
(
  $as_echo "92. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1261" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1261"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1262: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var43"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var43" "mat5_compressed_read_le.at:1262"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var43
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var43
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1262"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_92
#AT_START_93
at_fn_group_banner 93 'mat5_compressed_read_le.at:1310' \
  "Read structure array with complex 16-bit integer fields" "" 3
at_xfail=no
(
  $as_echo "93. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1311" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1311"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1312: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var44"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var44" "mat5_compressed_read_le.at:1312"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var44
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var44
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1312"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_93
#AT_START_94
at_fn_group_banner 94 'mat5_compressed_read_le.at:1360' \
  "Read structure array with complex 16-bit unsigned integer fields" "" 3
at_xfail=no
(
  $as_echo "94. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1361" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1361"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1362: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var45"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var45" "mat5_compressed_read_le.at:1362"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var45
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var45
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1362"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_94
#AT_START_95
at_fn_group_banner 95 'mat5_compressed_read_le.at:1410' \
  "Read structure array with complex 8-bit integer fields" "" 3
at_xfail=no
(
  $as_echo "95. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1411" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1411"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1412: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var46"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var46" "mat5_compressed_read_le.at:1412"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var46
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var46
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1412"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_95
#AT_START_96
at_fn_group_banner 96 'mat5_compressed_read_le.at:1460' \
  "Read structure array with complex 8-bit unsigned integer fields" "" 3
at_xfail=no
(
  $as_echo "96. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1461" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1461"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1462: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var47"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var47" "mat5_compressed_read_le.at:1462"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var47
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var47
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1462"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_96
#AT_START_97
at_fn_group_banner 97 'mat5_uncompressed_read_be.at:17' \
  "Read 2D double-precision array" "                 " 4
at_xfail=no
(
  $as_echo "97. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:18: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var1" "mat5_uncompressed_read_be.at:18"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var1
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:18"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_97
#AT_START_98
at_fn_group_banner 98 'mat5_uncompressed_read_be.at:34' \
  "Read 2D single-precision array" "                 " 4
at_xfail=no
(
  $as_echo "98. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:35: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var2"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var2" "mat5_uncompressed_read_be.at:35"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var2
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var2
      Rank: 2
Dimensions: 4 x 5
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:35"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_98
#AT_START_99
at_fn_group_banner 99 'mat5_uncompressed_read_be.at:51' \
  "Read 2D 64-bit integer array" "                   " 4
at_xfail=no
(
  $as_echo "99. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:52: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var3"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var3" "mat5_uncompressed_read_be.at:52"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var3
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var3
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:52"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_99
#AT_START_100
at_fn_group_banner 100 'mat5_uncompressed_read_be.at:68' \
  "Read 2D 64-bit unsigned integer array" "          " 4
at_xfail=no
(
  $as_echo "100. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:69: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var4"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var4" "mat5_uncompressed_read_be.at:69"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var4
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var4
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:69"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_100
#AT_START_101
at_fn_group_banner 101 'mat5_uncompressed_read_be.at:85' \
  "Read 2D 32-bit integer array" "                   " 4
at_xfail=no
(
  $as_echo "101. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:86: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var5"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var5" "mat5_uncompressed_read_be.at:86"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var5
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var5
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:86"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_101
#AT_START_102
at_fn_group_banner 102 'mat5_uncompressed_read_be.at:102' \
  "Read 2D 32-bit unsigned integer array" "          " 4
at_xfail=no
(
  $as_echo "102. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:103: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var6"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var6" "mat5_uncompressed_read_be.at:103"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var6
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var6
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:103"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_102
#AT_START_103
at_fn_group_banner 103 'mat5_uncompressed_read_be.at:119' \
  "Read 2D 16-bit integer array" "                   " 4
at_xfail=no
(
  $as_echo "103. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:120: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var7"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var7" "mat5_uncompressed_read_be.at:120"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var7
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var7
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:120"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_103
#AT_START_104
at_fn_group_banner 104 'mat5_uncompressed_read_be.at:136' \
  "Read 2D 16-bit unsigned integer array" "          " 4
at_xfail=no
(
  $as_echo "104. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:137: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var8"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var8" "mat5_uncompressed_read_be.at:137"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var8
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var8
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:137"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_104
#AT_START_105
at_fn_group_banner 105 'mat5_uncompressed_read_be.at:153' \
  "Read 2D 8-bit integer array" "                    " 4
at_xfail=no
(
  $as_echo "105. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:154: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var9"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var9" "mat5_uncompressed_read_be.at:154"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var9
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var9
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:154"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_105
#AT_START_106
at_fn_group_banner 106 'mat5_uncompressed_read_be.at:170' \
  "Read 2D 8-bit unsigned integer array" "           " 4
at_xfail=no
(
  $as_echo "106. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:171: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var10"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var10" "mat5_uncompressed_read_be.at:171"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var10
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var10
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:171"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_106
#AT_START_107
at_fn_group_banner 107 'mat5_uncompressed_read_be.at:187' \
  "Read 2D double-precision complex array" "         " 4
at_xfail=no
(
  $as_echo "107. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:188: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var11"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var11" "mat5_uncompressed_read_be.at:188"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var11
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var11
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:188"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_107
#AT_START_108
at_fn_group_banner 108 'mat5_uncompressed_read_be.at:204' \
  "Read 2D single-precision complex array" "         " 4
at_xfail=no
(
  $as_echo "108. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:205: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var12"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var12" "mat5_uncompressed_read_be.at:205"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var12
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var12
      Rank: 2
Dimensions: 4 x 5
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:205"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_108
#AT_START_109
at_fn_group_banner 109 'mat5_uncompressed_read_be.at:221' \
  "Read 2D 64-bit integer complex array" "           " 4
at_xfail=no
(
  $as_echo "109. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:222: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var13"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var13" "mat5_uncompressed_read_be.at:222"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var13
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var13
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:222"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_109
#AT_START_110
at_fn_group_banner 110 'mat5_uncompressed_read_be.at:238' \
  "Read 2D 64-bit unsigned integer complex array" "  " 4
at_xfail=no
(
  $as_echo "110. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:239: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var14"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var14" "mat5_uncompressed_read_be.at:239"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var14
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var14
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:239"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_110
#AT_START_111
at_fn_group_banner 111 'mat5_uncompressed_read_be.at:255' \
  "Read 2D 32-bit integer complex array" "           " 4
at_xfail=no
(
  $as_echo "111. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:256: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var15"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var15" "mat5_uncompressed_read_be.at:256"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var15
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var15
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:256"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_111
#AT_START_112
at_fn_group_banner 112 'mat5_uncompressed_read_be.at:272' \
  "Read 2D 32-bit unsigned integer complex array" "  " 4
at_xfail=no
(
  $as_echo "112. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:273: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var16"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var16" "mat5_uncompressed_read_be.at:273"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var16
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var16
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:273"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_112
#AT_START_113
at_fn_group_banner 113 'mat5_uncompressed_read_be.at:289' \
  "Read 2D 16-bit integer complex array" "           " 4
at_xfail=no
(
  $as_echo "113. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:290: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var17"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var17" "mat5_uncompressed_read_be.at:290"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var17
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var17
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:290"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_113
#AT_START_114
at_fn_group_banner 114 'mat5_uncompressed_read_be.at:306' \
  "Read 2D 16-bit unsigned integer complex array" "  " 4
at_xfail=no
(
  $as_echo "114. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:307: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var18"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var18" "mat5_uncompressed_read_be.at:307"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var18
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var18
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:307"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_114
#AT_START_115
at_fn_group_banner 115 'mat5_uncompressed_read_be.at:323' \
  "Read 2D 8-bit integer complex array" "            " 4
at_xfail=no
(
  $as_echo "115. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:324: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var19"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var19" "mat5_uncompressed_read_be.at:324"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var19
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var19
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:324"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_115
#AT_START_116
at_fn_group_banner 116 'mat5_uncompressed_read_be.at:340' \
  "Read 2D 8-bit unsigned integer complex array" "   " 4
at_xfail=no
(
  $as_echo "116. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:341: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var20"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var20" "mat5_uncompressed_read_be.at:341"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var20
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var20
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:341"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_116
#AT_START_117
at_fn_group_banner 117 'mat5_uncompressed_read_be.at:357' \
  "Read double-precision sparse array" "             " 4
at_xfail=no
(
  $as_echo "117. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:358: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var21"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var21" "mat5_uncompressed_read_be.at:358"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var21
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var21
      Rank: 2
Dimensions: 5 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,2)  2
    (3,3)  3
    (4,4)  4
    (5,5)  5
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:358"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_117
#AT_START_118
at_fn_group_banner 118 'mat5_uncompressed_read_be.at:375' \
  "Read double-precision sparse complex array" "     " 4
at_xfail=no
(
  $as_echo "118. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:376: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var22"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var22" "mat5_uncompressed_read_be.at:376"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var22
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var22
      Rank: 2
Dimensions: 5 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 6i
    (2,2)  2 + 7i
    (3,3)  3 + 8i
    (4,4)  4 + 9i
    (5,5)  5 + 10i
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:376"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_118
#AT_START_119
at_fn_group_banner 119 'mat5_uncompressed_read_be.at:393' \
  "Read empty array" "                               " 4
at_xfail=no
(
  $as_echo "119. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:394: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var23"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var23" "mat5_uncompressed_read_be.at:394"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var23
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var23
      Rank: 2
Dimensions: 0 x 0
Class Type: Double Precision Array
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:394"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_119
#AT_START_120
at_fn_group_banner 120 'mat5_uncompressed_read_be.at:403' \
  "Read 2D character array" "                        " 4
at_xfail=no
(
  $as_echo "120. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:404: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var24"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var24" "mat5_uncompressed_read_be.at:404"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var24
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var24
      Rank: 2
Dimensions: 4 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
1234567890!@#\$%^&*()-_=+\`~
[{]}\\|;:'\",<.>/?          
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:404"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_120
#AT_START_121
at_fn_group_banner 121 'mat5_uncompressed_read_be.at:420' \
  "Read empty structure array" "                     " 4
at_xfail=no
(
  $as_echo "121. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:421: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var25"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var25" "mat5_uncompressed_read_be.at:421"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var25
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var25
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
Fields[0] {
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:421"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_121
#AT_START_122
at_fn_group_banner 122 'mat5_uncompressed_read_be.at:431' \
  "Read empty structure array with fields" "         " 4
at_xfail=no
(
  $as_echo "122. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:432: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var26"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var26" "mat5_uncompressed_read_be.at:432"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var26
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var26
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 0
      Name: field2
      Rank: 0
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:432"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_122
#AT_START_123
at_fn_group_banner 123 'mat5_uncompressed_read_be.at:447' \
  "Read structure array with empty fields" "         " 4
at_xfail=no
(
  $as_echo "123. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:448: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var27"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var27" "mat5_uncompressed_read_be.at:448"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var27
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var27
      Rank: 2
Dimensions: 1 x 2
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Character Array
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
Fields[0] {
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:448"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_123
#AT_START_124
at_fn_group_banner 124 'mat5_uncompressed_read_be.at:480' \
  "Read structure array with double-precision fields" "" 4
at_xfail=no
(
  $as_echo "124. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:481: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var28"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var28" "mat5_uncompressed_read_be.at:481"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var28
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var28
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:481"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_124
#AT_START_125
at_fn_group_banner 125 'mat5_uncompressed_read_be.at:528' \
  "Read structure array with single-precision fields" "" 4
at_xfail=no
(
  $as_echo "125. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:529: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var29"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var29" "mat5_uncompressed_read_be.at:529"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var29
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var29
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:529"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_125
#AT_START_126
at_fn_group_banner 126 'mat5_uncompressed_read_be.at:576' \
  "Read structure array with 64-bit integer fields" "" 4
at_xfail=no
(
  $as_echo "126. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:577: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var30"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var30" "mat5_uncompressed_read_be.at:577"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var30
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var30
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:577"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_126
#AT_START_127
at_fn_group_banner 127 'mat5_uncompressed_read_be.at:624' \
  "Read structure array with 64-bit unsigned integer fields" "" 4
at_xfail=no
(
  $as_echo "127. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:625: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var31"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var31" "mat5_uncompressed_read_be.at:625"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var31
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var31
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:625"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_127
#AT_START_128
at_fn_group_banner 128 'mat5_uncompressed_read_be.at:672' \
  "Read structure array with 32-bit integer fields" "" 4
at_xfail=no
(
  $as_echo "128. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:673: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var32"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var32" "mat5_uncompressed_read_be.at:673"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var32
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var32
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:673"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_128
#AT_START_129
at_fn_group_banner 129 'mat5_uncompressed_read_be.at:720' \
  "Read structure array with 32-bit unsigned integer fields" "" 4
at_xfail=no
(
  $as_echo "129. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:721: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var33"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var33" "mat5_uncompressed_read_be.at:721"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var33
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var33
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:721"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_129
#AT_START_130
at_fn_group_banner 130 'mat5_uncompressed_read_be.at:768' \
  "Read structure array with 16-bit integer fields" "" 4
at_xfail=no
(
  $as_echo "130. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:769: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var34"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var34" "mat5_uncompressed_read_be.at:769"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var34
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var34
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:769"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_130
#AT_START_131
at_fn_group_banner 131 'mat5_uncompressed_read_be.at:816' \
  "Read structure array with 16-bit unsigned integer fields" "" 4
at_xfail=no
(
  $as_echo "131. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:817: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var35"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var35" "mat5_uncompressed_read_be.at:817"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var35
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var35
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:817"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_131
#AT_START_132
at_fn_group_banner 132 'mat5_uncompressed_read_be.at:864' \
  "Read structure array with 8-bit integer fields" " " 4
at_xfail=no
(
  $as_echo "132. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:865: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var36"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var36" "mat5_uncompressed_read_be.at:865"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var36
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var36
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:865"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_132
#AT_START_133
at_fn_group_banner 133 'mat5_uncompressed_read_be.at:912' \
  "Read structure array with 8-bit unsigned integer fields" "" 4
at_xfail=no
(
  $as_echo "133. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:913: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var37"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var37" "mat5_uncompressed_read_be.at:913"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var37
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var37
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:913"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_133
#AT_START_134
at_fn_group_banner 134 'mat5_uncompressed_read_be.at:960' \
  "Read structure array with complex double-precision fields" "" 4
at_xfail=no
(
  $as_echo "134. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:961: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var38"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var38" "mat5_uncompressed_read_be.at:961"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var38
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var38
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:961"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_134
#AT_START_135
at_fn_group_banner 135 'mat5_uncompressed_read_be.at:1008' \
  "Read structure array with complex single-precision fields" "" 4
at_xfail=no
(
  $as_echo "135. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1009: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var39"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var39" "mat5_uncompressed_read_be.at:1009"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var39
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var39
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1009"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_135
#AT_START_136
at_fn_group_banner 136 'mat5_uncompressed_read_be.at:1056' \
  "Read structure array with complex 64-bit integer fields" "" 4
at_xfail=no
(
  $as_echo "136. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1057: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var40"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var40" "mat5_uncompressed_read_be.at:1057"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var40
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var40
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1057"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_136
#AT_START_137
at_fn_group_banner 137 'mat5_uncompressed_read_be.at:1104' \
  "Read structure array with complex 64-bit unsigned integer fields" "" 4
at_xfail=no
(
  $as_echo "137. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1105: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var41"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var41" "mat5_uncompressed_read_be.at:1105"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var41
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var41
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1105"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_137
#AT_START_138
at_fn_group_banner 138 'mat5_uncompressed_read_be.at:1152' \
  "Read structure array with complex 32-bit integer fields" "" 4
at_xfail=no
(
  $as_echo "138. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1153: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var42"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var42" "mat5_uncompressed_read_be.at:1153"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var42
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var42
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1153"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_138
#AT_START_139
at_fn_group_banner 139 'mat5_uncompressed_read_be.at:1200' \
  "Read structure array with complex 32-bit unsigned integer fields" "" 4
at_xfail=no
(
  $as_echo "139. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1201: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var43"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var43" "mat5_uncompressed_read_be.at:1201"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var43
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var43
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1201"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_139
#AT_START_140
at_fn_group_banner 140 'mat5_uncompressed_read_be.at:1248' \
  "Read structure array with complex 16-bit integer fields" "" 4
at_xfail=no
(
  $as_echo "140. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1249: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var44"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var44" "mat5_uncompressed_read_be.at:1249"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var44
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var44
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1249"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_140
#AT_START_141
at_fn_group_banner 141 'mat5_uncompressed_read_be.at:1296' \
  "Read structure array with complex 16-bit unsigned integer fields" "" 4
at_xfail=no
(
  $as_echo "141. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1297: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var45"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var45" "mat5_uncompressed_read_be.at:1297"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var45
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var45
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1297"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_141
#AT_START_142
at_fn_group_banner 142 'mat5_uncompressed_read_be.at:1344' \
  "Read structure array with complex 8-bit integer fields" "" 4
at_xfail=no
(
  $as_echo "142. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1345: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var46"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var46" "mat5_uncompressed_read_be.at:1345"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var46
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var46
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1345"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_142
#AT_START_143
at_fn_group_banner 143 'mat5_uncompressed_read_be.at:1392' \
  "Read structure array with complex 8-bit unsigned integer fields" "" 4
at_xfail=no
(
  $as_echo "143. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1393: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var47"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var47" "mat5_uncompressed_read_be.at:1393"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var47
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var47
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1393"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_143
#AT_START_144
at_fn_group_banner 144 'mat5_compressed_read_be.at:17' \
  "Read 2D double-precision array" "                 " 5
at_xfail=no
(
  $as_echo "144. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:18" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:18"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:19: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var1" "mat5_compressed_read_be.at:19"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var1
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:19"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_144
#AT_START_145
at_fn_group_banner 145 'mat5_compressed_read_be.at:35' \
  "Read 2D single-precision array" "                 " 5
at_xfail=no
(
  $as_echo "145. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:36" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:36"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:37: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var2"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var2" "mat5_compressed_read_be.at:37"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var2
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var2
      Rank: 2
Dimensions: 4 x 5
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:37"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_145
#AT_START_146
at_fn_group_banner 146 'mat5_compressed_read_be.at:53' \
  "Read 2D 64-bit integer array" "                   " 5
at_xfail=no
(
  $as_echo "146. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:54" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:54"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:55: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var3"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var3" "mat5_compressed_read_be.at:55"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var3
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var3
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:55"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_146
#AT_START_147
at_fn_group_banner 147 'mat5_compressed_read_be.at:71' \
  "Read 2D 64-bit unsigned integer array" "          " 5
at_xfail=no
(
  $as_echo "147. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:72" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:72"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:73: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var4"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var4" "mat5_compressed_read_be.at:73"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var4
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var4
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:73"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_147
#AT_START_148
at_fn_group_banner 148 'mat5_compressed_read_be.at:89' \
  "Read 2D 32-bit integer array" "                   " 5
at_xfail=no
(
  $as_echo "148. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:90" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:90"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:91: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var5"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var5" "mat5_compressed_read_be.at:91"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var5
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var5
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:91"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_148
#AT_START_149
at_fn_group_banner 149 'mat5_compressed_read_be.at:107' \
  "Read 2D 32-bit unsigned integer array" "          " 5
at_xfail=no
(
  $as_echo "149. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:108" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:108"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:109: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var6"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var6" "mat5_compressed_read_be.at:109"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var6
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var6
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:109"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_149
#AT_START_150
at_fn_group_banner 150 'mat5_compressed_read_be.at:125' \
  "Read 2D 16-bit integer array" "                   " 5
at_xfail=no
(
  $as_echo "150. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:126" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:126"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:127: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var7"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var7" "mat5_compressed_read_be.at:127"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var7
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var7
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:127"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_150
#AT_START_151
at_fn_group_banner 151 'mat5_compressed_read_be.at:143' \
  "Read 2D 16-bit unsigned integer array" "          " 5
at_xfail=no
(
  $as_echo "151. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:144" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:144"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:145: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var8"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var8" "mat5_compressed_read_be.at:145"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var8
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var8
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:145"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_151
#AT_START_152
at_fn_group_banner 152 'mat5_compressed_read_be.at:161' \
  "Read 2D 8-bit integer array" "                    " 5
at_xfail=no
(
  $as_echo "152. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:162" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:162"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:163: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var9"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var9" "mat5_compressed_read_be.at:163"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var9
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var9
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:163"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_152
#AT_START_153
at_fn_group_banner 153 'mat5_compressed_read_be.at:179' \
  "Read 2D 8-bit unsigned integer array" "           " 5
at_xfail=no
(
  $as_echo "153. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:180" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:180"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:181: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var10"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var10" "mat5_compressed_read_be.at:181"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var10
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var10
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:181"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_153
#AT_START_154
at_fn_group_banner 154 'mat5_compressed_read_be.at:197' \
  "Read 2D double-precision complex array" "         " 5
at_xfail=no
(
  $as_echo "154. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:198" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:198"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:199: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var11"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var11" "mat5_compressed_read_be.at:199"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var11
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var11
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:199"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_154
#AT_START_155
at_fn_group_banner 155 'mat5_compressed_read_be.at:215' \
  "Read 2D single-precision complex array" "         " 5
at_xfail=no
(
  $as_echo "155. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:216" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:216"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:217: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var12"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var12" "mat5_compressed_read_be.at:217"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var12
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var12
      Rank: 2
Dimensions: 4 x 5
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:217"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_155
#AT_START_156
at_fn_group_banner 156 'mat5_compressed_read_be.at:233' \
  "Read 2D 64-bit integer complex array" "           " 5
at_xfail=no
(
  $as_echo "156. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:234" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:234"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:235: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var13"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var13" "mat5_compressed_read_be.at:235"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var13
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var13
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:235"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_156
#AT_START_157
at_fn_group_banner 157 'mat5_compressed_read_be.at:251' \
  "Read 2D 64-bit unsigned integer complex array" "  " 5
at_xfail=no
(
  $as_echo "157. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:252" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:252"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:253: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var14"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var14" "mat5_compressed_read_be.at:253"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var14
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var14
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:253"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_157
#AT_START_158
at_fn_group_banner 158 'mat5_compressed_read_be.at:269' \
  "Read 2D 32-bit integer complex array" "           " 5
at_xfail=no
(
  $as_echo "158. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:270" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:270"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:271: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var15"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var15" "mat5_compressed_read_be.at:271"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var15
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var15
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:271"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_158
#AT_START_159
at_fn_group_banner 159 'mat5_compressed_read_be.at:287' \
  "Read 2D 32-bit unsigned integer complex array" "  " 5
at_xfail=no
(
  $as_echo "159. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:288" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:288"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:289: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var16"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var16" "mat5_compressed_read_be.at:289"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var16
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var16
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:289"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_159
#AT_START_160
at_fn_group_banner 160 'mat5_compressed_read_be.at:305' \
  "Read 2D 16-bit integer complex array" "           " 5
at_xfail=no
(
  $as_echo "160. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:306" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:306"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:307: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var17"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var17" "mat5_compressed_read_be.at:307"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var17
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var17
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:307"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_160
#AT_START_161
at_fn_group_banner 161 'mat5_compressed_read_be.at:323' \
  "Read 2D 16-bit unsigned integer complex array" "  " 5
at_xfail=no
(
  $as_echo "161. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:324" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:324"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:325: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var18"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var18" "mat5_compressed_read_be.at:325"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var18
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var18
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:325"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_161
#AT_START_162
at_fn_group_banner 162 'mat5_compressed_read_be.at:341' \
  "Read 2D 8-bit integer complex array" "            " 5
at_xfail=no
(
  $as_echo "162. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:342" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:342"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:343: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var19"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var19" "mat5_compressed_read_be.at:343"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var19
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var19
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:343"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_162
#AT_START_163
at_fn_group_banner 163 'mat5_compressed_read_be.at:359' \
  "Read 2D 8-bit unsigned integer complex array" "   " 5
at_xfail=no
(
  $as_echo "163. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:360" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:360"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:361: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var20"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var20" "mat5_compressed_read_be.at:361"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var20
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var20
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:361"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_163
#AT_START_164
at_fn_group_banner 164 'mat5_compressed_read_be.at:377' \
  "Read double-precision sparse array" "             " 5
at_xfail=no
(
  $as_echo "164. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:378" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:378"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:379: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var21"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var21" "mat5_compressed_read_be.at:379"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var21
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var21
      Rank: 2
Dimensions: 5 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,2)  2
    (3,3)  3
    (4,4)  4
    (5,5)  5
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:379"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_164
#AT_START_165
at_fn_group_banner 165 'mat5_compressed_read_be.at:396' \
  "Read double-precision sparse complex array" "     " 5
at_xfail=no
(
  $as_echo "165. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:397" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:397"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:398: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var22"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var22" "mat5_compressed_read_be.at:398"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var22
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var22
      Rank: 2
Dimensions: 5 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 6i
    (2,2)  2 + 7i
    (3,3)  3 + 8i
    (4,4)  4 + 9i
    (5,5)  5 + 10i
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:398"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_165
#AT_START_166
at_fn_group_banner 166 'mat5_compressed_read_be.at:415' \
  "Read empty array" "                               " 5
at_xfail=no
(
  $as_echo "166. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:416" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:416"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:417: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var23"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var23" "mat5_compressed_read_be.at:417"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var23
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var23
      Rank: 2
Dimensions: 0 x 0
Class Type: Double Precision Array
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:417"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_166
#AT_START_167
at_fn_group_banner 167 'mat5_compressed_read_be.at:426' \
  "Read 2D character array" "                        " 5
at_xfail=no
(
  $as_echo "167. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:427" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:427"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:428: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var24"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var24" "mat5_compressed_read_be.at:428"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var24
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var24
      Rank: 2
Dimensions: 4 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
1234567890!@#\$%^&*()-_=+\`~
[{]}\\|;:'\",<.>/?          
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:428"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_167
#AT_START_168
at_fn_group_banner 168 'mat5_compressed_read_be.at:444' \
  "Read empty structure array" "                     " 5
at_xfail=no
(
  $as_echo "168. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:445" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:445"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:446: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var25"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var25" "mat5_compressed_read_be.at:446"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var25
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var25
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
Fields[0] {
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:446"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_168
#AT_START_169
at_fn_group_banner 169 'mat5_compressed_read_be.at:456' \
  "Read empty structure array with fields" "         " 5
at_xfail=no
(
  $as_echo "169. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:457" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:457"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:458: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var26"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var26" "mat5_compressed_read_be.at:458"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var26
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var26
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 0
      Name: field2
      Rank: 0
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:458"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_169
#AT_START_170
at_fn_group_banner 170 'mat5_compressed_read_be.at:473' \
  "Read structure array with empty fields" "         " 5
at_xfail=no
(
  $as_echo "170. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:474" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:474"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:475: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var27"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var27" "mat5_compressed_read_be.at:475"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var27
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var27
      Rank: 2
Dimensions: 1 x 2
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Character Array
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
Fields[0] {
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:475"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_170
#AT_START_171
at_fn_group_banner 171 'mat5_compressed_read_be.at:507' \
  "Read structure array with double-precision fields" "" 5
at_xfail=no
(
  $as_echo "171. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:508" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:508"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:509: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var28"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var28" "mat5_compressed_read_be.at:509"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var28
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var28
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:509"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_171
#AT_START_172
at_fn_group_banner 172 'mat5_compressed_read_be.at:556' \
  "Read structure array with single-precision fields" "" 5
at_xfail=no
(
  $as_echo "172. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:557" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:557"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:558: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var29"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var29" "mat5_compressed_read_be.at:558"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var29
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var29
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:558"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_172
#AT_START_173
at_fn_group_banner 173 'mat5_compressed_read_be.at:605' \
  "Read structure array with 64-bit integer fields" "" 5
at_xfail=no
(
  $as_echo "173. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:606" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:606"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:607: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var30"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var30" "mat5_compressed_read_be.at:607"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var30
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var30
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:607"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_173
#AT_START_174
at_fn_group_banner 174 'mat5_compressed_read_be.at:654' \
  "Read structure array with 64-bit unsigned integer fields" "" 5
at_xfail=no
(
  $as_echo "174. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:655" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:655"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:656: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var31"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var31" "mat5_compressed_read_be.at:656"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var31
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var31
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:656"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_174
#AT_START_175
at_fn_group_banner 175 'mat5_compressed_read_be.at:703' \
  "Read structure array with 32-bit integer fields" "" 5
at_xfail=no
(
  $as_echo "175. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:704" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:704"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:705: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var32"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var32" "mat5_compressed_read_be.at:705"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var32
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var32
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:705"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_175
#AT_START_176
at_fn_group_banner 176 'mat5_compressed_read_be.at:752' \
  "Read structure array with 32-bit unsigned integer fields" "" 5
at_xfail=no
(
  $as_echo "176. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:753" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:753"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:754: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var33"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var33" "mat5_compressed_read_be.at:754"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var33
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var33
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:754"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_176
#AT_START_177
at_fn_group_banner 177 'mat5_compressed_read_be.at:801' \
  "Read structure array with 16-bit integer fields" "" 5
at_xfail=no
(
  $as_echo "177. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:802" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:802"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:803: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var34"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var34" "mat5_compressed_read_be.at:803"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var34
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var34
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:803"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_177
#AT_START_178
at_fn_group_banner 178 'mat5_compressed_read_be.at:850' \
  "Read structure array with 16-bit unsigned integer fields" "" 5
at_xfail=no
(
  $as_echo "178. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:851" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:851"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:852: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var35"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var35" "mat5_compressed_read_be.at:852"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var35
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var35
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:852"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_178
#AT_START_179
at_fn_group_banner 179 'mat5_compressed_read_be.at:899' \
  "Read structure array with 8-bit integer fields" " " 5
at_xfail=no
(
  $as_echo "179. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:900" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:900"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:901: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var36"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var36" "mat5_compressed_read_be.at:901"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var36
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var36
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:901"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_179
#AT_START_180
at_fn_group_banner 180 'mat5_compressed_read_be.at:948' \
  "Read structure array with 8-bit unsigned integer fields" "" 5
at_xfail=no
(
  $as_echo "180. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:949" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:949"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:950: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var37"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var37" "mat5_compressed_read_be.at:950"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var37
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var37
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:950"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_180
#AT_START_181
at_fn_group_banner 181 'mat5_compressed_read_be.at:997' \
  "Read structure array with complex double-precision fields" "" 5
at_xfail=no
(
  $as_echo "181. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:998" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:998"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:999: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var38"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var38" "mat5_compressed_read_be.at:999"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var38
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var38
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:999"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_181
#AT_START_182
at_fn_group_banner 182 'mat5_compressed_read_be.at:1046' \
  "Read structure array with complex single-precision fields" "" 5
at_xfail=no
(
  $as_echo "182. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1047" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1047"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1048: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var39"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var39" "mat5_compressed_read_be.at:1048"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var39
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var39
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1048"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_182
#AT_START_183
at_fn_group_banner 183 'mat5_compressed_read_be.at:1095' \
  "Read structure array with complex 64-bit integer fields" "" 5
at_xfail=no
(
  $as_echo "183. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1096" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1096"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1097: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var40"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var40" "mat5_compressed_read_be.at:1097"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var40
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var40
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1097"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_183
#AT_START_184
at_fn_group_banner 184 'mat5_compressed_read_be.at:1144' \
  "Read structure array with complex 64-bit unsigned integer fields" "" 5
at_xfail=no
(
  $as_echo "184. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1145" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1145"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1146: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var41"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var41" "mat5_compressed_read_be.at:1146"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var41
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var41
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1146"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_184
#AT_START_185
at_fn_group_banner 185 'mat5_compressed_read_be.at:1193' \
  "Read structure array with complex 32-bit integer fields" "" 5
at_xfail=no
(
  $as_echo "185. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1194" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1194"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1195: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var42"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var42" "mat5_compressed_read_be.at:1195"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var42
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var42
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1195"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_185
#AT_START_186
at_fn_group_banner 186 'mat5_compressed_read_be.at:1242' \
  "Read structure array with complex 32-bit unsigned integer fields" "" 5
at_xfail=no
(
  $as_echo "186. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1243" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1243"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1244: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var43"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var43" "mat5_compressed_read_be.at:1244"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var43
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var43
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1244"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_186
#AT_START_187
at_fn_group_banner 187 'mat5_compressed_read_be.at:1291' \
  "Read structure array with complex 16-bit integer fields" "" 5
at_xfail=no
(
  $as_echo "187. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1292" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1292"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1293: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var44"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var44" "mat5_compressed_read_be.at:1293"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var44
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var44
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1293"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_187
#AT_START_188
at_fn_group_banner 188 'mat5_compressed_read_be.at:1340' \
  "Read structure array with complex 16-bit unsigned integer fields" "" 5
at_xfail=no
(
  $as_echo "188. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1341" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1341"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1342: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var45"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var45" "mat5_compressed_read_be.at:1342"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var45
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var45
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1342"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_188
#AT_START_189
at_fn_group_banner 189 'mat5_compressed_read_be.at:1389' \
  "Read structure array with complex 8-bit integer fields" "" 5
at_xfail=no
(
  $as_echo "189. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1390" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1390"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1391: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var46"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var46" "mat5_compressed_read_be.at:1391"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var46
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var46
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1391"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_189
#AT_START_190
at_fn_group_banner 190 'mat5_compressed_read_be.at:1438' \
  "Read structure array with complex 8-bit unsigned integer fields" "" 5
at_xfail=no
(
  $as_echo "190. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1439" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1439"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1440: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var47"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var47" "mat5_compressed_read_be.at:1440"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var47
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var47
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1440"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_190
#AT_START_191
at_fn_group_banner 191 'mat73_read_le.at:17' \
  "Read 2D double-precision array" "                 " 6
at_xfail=no
(
  $as_echo "191. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:18: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:18"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:18"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:19: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var1" "mat73_read_le.at:19"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var1
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:19"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_191
#AT_START_192
at_fn_group_banner 192 'mat73_read_le.at:35' \
  "Read 2D single-precision array" "                 " 6
at_xfail=no
(
  $as_echo "192. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:36: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:36"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:36"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:37: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var2"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var2" "mat73_read_le.at:37"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var2
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var2
      Rank: 2
Dimensions: 4 x 5
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:37"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_192
#AT_START_193
at_fn_group_banner 193 'mat73_read_le.at:53' \
  "Read 2D 64-bit integer array" "                   " 6
at_xfail=no
(
  $as_echo "193. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:54: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:54"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:54"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:55: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var3"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var3" "mat73_read_le.at:55"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var3
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var3
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:55"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_193
#AT_START_194
at_fn_group_banner 194 'mat73_read_le.at:71' \
  "Read 2D 64-bit unsigned integer array" "          " 6
at_xfail=no
(
  $as_echo "194. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:72: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:72"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:72"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:73: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var4"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var4" "mat73_read_le.at:73"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var4
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var4
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:73"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_194
#AT_START_195
at_fn_group_banner 195 'mat73_read_le.at:89' \
  "Read 2D 32-bit integer array" "                   " 6
at_xfail=no
(
  $as_echo "195. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:90: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:90"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:90"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:91: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var5"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var5" "mat73_read_le.at:91"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var5
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var5
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:91"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_195
#AT_START_196
at_fn_group_banner 196 'mat73_read_le.at:107' \
  "Read 2D 32-bit unsigned integer array" "          " 6
at_xfail=no
(
  $as_echo "196. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:108: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:108"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:108"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:109: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var6"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var6" "mat73_read_le.at:109"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var6
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var6
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:109"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_196
#AT_START_197
at_fn_group_banner 197 'mat73_read_le.at:125' \
  "Read 2D 16-bit integer array" "                   " 6
at_xfail=no
(
  $as_echo "197. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:126: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:126"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:126"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:127: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var7"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var7" "mat73_read_le.at:127"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var7
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var7
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:127"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_197
#AT_START_198
at_fn_group_banner 198 'mat73_read_le.at:143' \
  "Read 2D 16-bit unsigned integer array" "          " 6
at_xfail=no
(
  $as_echo "198. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:144: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:144"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:144"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:145: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var8"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var8" "mat73_read_le.at:145"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var8
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var8
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:145"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_198
#AT_START_199
at_fn_group_banner 199 'mat73_read_le.at:161' \
  "Read 2D 8-bit integer array" "                    " 6
at_xfail=no
(
  $as_echo "199. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:162: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:162"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:162"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:163: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var9"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var9" "mat73_read_le.at:163"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var9
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var9
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:163"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_199
#AT_START_200
at_fn_group_banner 200 'mat73_read_le.at:179' \
  "Read 2D 8-bit unsigned integer array" "           " 6
at_xfail=no
(
  $as_echo "200. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:180: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:180"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:180"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:181: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var10"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var10" "mat73_read_le.at:181"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var10
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var10
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:181"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_200
#AT_START_201
at_fn_group_banner 201 'mat73_read_le.at:197' \
  "Read 2D double-precision complex array" "         " 6
at_xfail=no
(
  $as_echo "201. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:198: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:198"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:198"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:199: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var11"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var11" "mat73_read_le.at:199"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var11
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var11
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:199"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_201
#AT_START_202
at_fn_group_banner 202 'mat73_read_le.at:215' \
  "Read 2D single-precision complex array" "         " 6
at_xfail=no
(
  $as_echo "202. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:216: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:216"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:216"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:217: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var12"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var12" "mat73_read_le.at:217"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var12
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var12
      Rank: 2
Dimensions: 4 x 5
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:217"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_202
#AT_START_203
at_fn_group_banner 203 'mat73_read_le.at:233' \
  "Read 2D 64-bit integer complex array" "           " 6
at_xfail=no
(
  $as_echo "203. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:234: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:234"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:234"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:235: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var13"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var13" "mat73_read_le.at:235"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var13
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var13
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:235"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_203
#AT_START_204
at_fn_group_banner 204 'mat73_read_le.at:251' \
  "Read 2D 64-bit unsigned integer complex array" "  " 6
at_xfail=no
(
  $as_echo "204. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:252: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:252"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:252"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:253: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var14"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var14" "mat73_read_le.at:253"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var14
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var14
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:253"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_204
#AT_START_205
at_fn_group_banner 205 'mat73_read_le.at:269' \
  "Read 2D 32-bit integer complex array" "           " 6
at_xfail=no
(
  $as_echo "205. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:270: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:270"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:270"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:271: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var15"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var15" "mat73_read_le.at:271"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var15
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var15
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:271"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_205
#AT_START_206
at_fn_group_banner 206 'mat73_read_le.at:287' \
  "Read 2D 32-bit unsigned integer complex array" "  " 6
at_xfail=no
(
  $as_echo "206. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:288: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:288"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:288"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:289: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var16"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var16" "mat73_read_le.at:289"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var16
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var16
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:289"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_206
#AT_START_207
at_fn_group_banner 207 'mat73_read_le.at:305' \
  "Read 2D 16-bit integer complex array" "           " 6
at_xfail=no
(
  $as_echo "207. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:306: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:306"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:306"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:307: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var17"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var17" "mat73_read_le.at:307"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var17
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var17
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:307"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_207
#AT_START_208
at_fn_group_banner 208 'mat73_read_le.at:323' \
  "Read 2D 16-bit unsigned integer complex array" "  " 6
at_xfail=no
(
  $as_echo "208. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:324: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:324"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:324"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:325: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var18"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var18" "mat73_read_le.at:325"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var18
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var18
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:325"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_208
#AT_START_209
at_fn_group_banner 209 'mat73_read_le.at:341' \
  "Read 2D 8-bit integer complex array" "            " 6
at_xfail=no
(
  $as_echo "209. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:342: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:342"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:342"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:343: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var19"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var19" "mat73_read_le.at:343"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var19
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var19
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:343"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_209
#AT_START_210
at_fn_group_banner 210 'mat73_read_le.at:359' \
  "Read 2D 8-bit unsigned integer complex array" "   " 6
at_xfail=no
(
  $as_echo "210. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:360: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:360"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:360"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:361: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var20"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var20" "mat73_read_le.at:361"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var20
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var20
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:361"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_210
#AT_START_211
at_fn_group_banner 211 'mat73_read_le.at:377' \
  "Read double-precision sparse array" "             " 6
at_xfail=no
(
  $as_echo "211. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:378: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:378"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:378"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:379: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var21"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var21" "mat73_read_le.at:379"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var21
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var21
      Rank: 2
Dimensions: 5 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,2)  2
    (3,3)  3
    (4,4)  4
    (5,5)  5
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:379"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_211
#AT_START_212
at_fn_group_banner 212 'mat73_read_le.at:396' \
  "Read double-precision sparse complex array" "     " 6
at_xfail=no
(
  $as_echo "212. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:397: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:397"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:397"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:398: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var22"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var22" "mat73_read_le.at:398"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var22
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var22
      Rank: 2
Dimensions: 5 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 6i
    (2,2)  2 + 7i
    (3,3)  3 + 8i
    (4,4)  4 + 9i
    (5,5)  5 + 10i
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:398"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_212
#AT_START_213
at_fn_group_banner 213 'mat73_read_le.at:415' \
  "Read empty array" "                               " 6
at_xfail=no
(
  $as_echo "213. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:416: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:416"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:416"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:417: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var23"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var23" "mat73_read_le.at:417"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var23
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var23
      Rank: 2
Dimensions: 0 x 0
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:417"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_213
#AT_START_214
at_fn_group_banner 214 'mat73_read_le.at:429' \
  "Read 2D character array" "                        " 6
at_xfail=no
(
  $as_echo "214. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:430: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:430"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:430"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:431: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var24"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var24" "mat73_read_le.at:431"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var24
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var24
      Rank: 2
Dimensions: 4 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
1234567890!@#\$%^&*()-_=+\`~
[{]}\\|;:'\",<.>/?          
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:431"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_214
#AT_START_215
at_fn_group_banner 215 'mat73_read_le.at:447' \
  "Read empty structure array" "                     " 6
at_xfail=no
(
  $as_echo "215. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:448: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:448"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:448"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:449: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var25"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var25" "mat73_read_le.at:449"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var25
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var25
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:449"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_215
#AT_START_216
at_fn_group_banner 216 'mat73_read_le.at:459' \
  "Read empty structure array with fields" "         " 6
at_xfail=no
(
  $as_echo "216. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:460: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:460"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:460"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:461: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var26"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var26" "mat73_read_le.at:461"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var26
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var26
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 0
      Name: field2
      Rank: 0
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:461"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_216
#AT_START_217
at_fn_group_banner 217 'mat73_read_le.at:477' \
  "Read structure array with empty fields" "         " 6
at_xfail=no
(
  $as_echo "217. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:478: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:478"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:478"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:479: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var27"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var27" "mat73_read_le.at:479"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var27
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var27
      Rank: 2
Dimensions: 1 x 2
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:479"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_217
#AT_START_218
at_fn_group_banner 218 'mat73_read_le.at:513' \
  "Read structure array with double-precision fields" "" 6
at_xfail=no
(
  $as_echo "218. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:514: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:514"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:514"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:515: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var28"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var28" "mat73_read_le.at:515"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var28
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var28
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:515"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_218
#AT_START_219
at_fn_group_banner 219 'mat73_read_le.at:563' \
  "Read structure array with single-precision fields" "" 6
at_xfail=no
(
  $as_echo "219. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:564: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:564"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:564"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:565: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var29"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var29" "mat73_read_le.at:565"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var29
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var29
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:565"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_219
#AT_START_220
at_fn_group_banner 220 'mat73_read_le.at:613' \
  "Read structure array with 64-bit integer fields" "" 6
at_xfail=no
(
  $as_echo "220. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:614: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:614"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:614"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:615: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var30"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var30" "mat73_read_le.at:615"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var30
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var30
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:615"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_220
#AT_START_221
at_fn_group_banner 221 'mat73_read_le.at:663' \
  "Read structure array with 64-bit unsigned integer fields" "" 6
at_xfail=no
(
  $as_echo "221. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:664: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:664"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:664"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:665: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var31"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var31" "mat73_read_le.at:665"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var31
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var31
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:665"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_221
#AT_START_222
at_fn_group_banner 222 'mat73_read_le.at:713' \
  "Read structure array with 32-bit integer fields" "" 6
at_xfail=no
(
  $as_echo "222. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:714: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:714"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:714"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:715: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var32"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var32" "mat73_read_le.at:715"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var32
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var32
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:715"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_222
#AT_START_223
at_fn_group_banner 223 'mat73_read_le.at:763' \
  "Read structure array with 32-bit unsigned integer fields" "" 6
at_xfail=no
(
  $as_echo "223. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:764: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:764"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:764"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:765: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var33"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var33" "mat73_read_le.at:765"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var33
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var33
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:765"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_223
#AT_START_224
at_fn_group_banner 224 'mat73_read_le.at:813' \
  "Read structure array with 16-bit integer fields" "" 6
at_xfail=no
(
  $as_echo "224. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:814: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:814"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:814"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:815: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var34"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var34" "mat73_read_le.at:815"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var34
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var34
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:815"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_224
#AT_START_225
at_fn_group_banner 225 'mat73_read_le.at:863' \
  "Read structure array with 16-bit unsigned integer fields" "" 6
at_xfail=no
(
  $as_echo "225. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:864: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:864"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:864"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:865: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var35"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var35" "mat73_read_le.at:865"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var35
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var35
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:865"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_225
#AT_START_226
at_fn_group_banner 226 'mat73_read_le.at:913' \
  "Read structure array with 8-bit integer fields" " " 6
at_xfail=no
(
  $as_echo "226. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:914: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:914"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:914"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:915: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var36"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var36" "mat73_read_le.at:915"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var36
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var36
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:915"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_226
#AT_START_227
at_fn_group_banner 227 'mat73_read_le.at:963' \
  "Read structure array with 8-bit unsigned integer fields" "" 6
at_xfail=no
(
  $as_echo "227. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:964: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:964"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:964"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:965: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var37"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var37" "mat73_read_le.at:965"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var37
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var37
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:965"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_227
#AT_START_228
at_fn_group_banner 228 'mat73_read_le.at:1013' \
  "Read structure array with complex double-precision fields" "" 6
at_xfail=no
(
  $as_echo "228. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1014: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1014"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1014"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1015: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var38"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var38" "mat73_read_le.at:1015"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var38
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var38
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1015"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_228
#AT_START_229
at_fn_group_banner 229 'mat73_read_le.at:1063' \
  "Read structure array with complex single-precision fields" "" 6
at_xfail=no
(
  $as_echo "229. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1064: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1064"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1064"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1065: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var39"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var39" "mat73_read_le.at:1065"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var39
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var39
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1065"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_229
#AT_START_230
at_fn_group_banner 230 'mat73_read_le.at:1113' \
  "Read structure array with complex 64-bit integer fields" "" 6
at_xfail=no
(
  $as_echo "230. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1114: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1114"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1114"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1115: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var40"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var40" "mat73_read_le.at:1115"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var40
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var40
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1115"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_230
#AT_START_231
at_fn_group_banner 231 'mat73_read_le.at:1163' \
  "Read structure array with complex 64-bit unsigned integer fields" "" 6
at_xfail=no
(
  $as_echo "231. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1164: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1164"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1164"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1165: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var41"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var41" "mat73_read_le.at:1165"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var41
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var41
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1165"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_231
#AT_START_232
at_fn_group_banner 232 'mat73_read_le.at:1213' \
  "Read structure array with complex 32-bit integer fields" "" 6
at_xfail=no
(
  $as_echo "232. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1214: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1214"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1214"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1215: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var42"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var42" "mat73_read_le.at:1215"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var42
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var42
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1215"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_232
#AT_START_233
at_fn_group_banner 233 'mat73_read_le.at:1263' \
  "Read structure array with complex 32-bit unsigned integer fields" "" 6
at_xfail=no
(
  $as_echo "233. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1264: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1264"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1264"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1265: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var43"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var43" "mat73_read_le.at:1265"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var43
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var43
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1265"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_233
#AT_START_234
at_fn_group_banner 234 'mat73_read_le.at:1313' \
  "Read structure array with complex 16-bit integer fields" "" 6
at_xfail=no
(
  $as_echo "234. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1314: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1314"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1314"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1315: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var44"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var44" "mat73_read_le.at:1315"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var44
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var44
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1315"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_234
#AT_START_235
at_fn_group_banner 235 'mat73_read_le.at:1363' \
  "Read structure array with complex 16-bit unsigned integer fields" "" 6
at_xfail=no
(
  $as_echo "235. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1364: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1364"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1364"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1365: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var45"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var45" "mat73_read_le.at:1365"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var45
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var45
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1365"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_235
#AT_START_236
at_fn_group_banner 236 'mat73_read_le.at:1413' \
  "Read structure array with complex 8-bit integer fields" "" 6
at_xfail=no
(
  $as_echo "236. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1414: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1414"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1414"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1415: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var46"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var46" "mat73_read_le.at:1415"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var46
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var46
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1415"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_236
#AT_START_237
at_fn_group_banner 237 'mat73_read_le.at:1463' \
  "Read structure array with complex 8-bit unsigned integer fields" "" 6
at_xfail=no
(
  $as_echo "237. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1464: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1464"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1464"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1465: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var47"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var47" "mat73_read_le.at:1465"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var47
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var47
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1465"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_237
#AT_START_238
at_fn_group_banner 238 'mat73_read_be.at:17' \
  "Read 2D double-precision array" "                 " 7
at_xfail=no
(
  $as_echo "238. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:18: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:18"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:18"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:19: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var1" "mat73_read_be.at:19"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var1
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:19"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_238
#AT_START_239
at_fn_group_banner 239 'mat73_read_be.at:35' \
  "Read 2D single-precision array" "                 " 7
at_xfail=no
(
  $as_echo "239. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:36: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:36"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:36"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:37: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var2"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var2" "mat73_read_be.at:37"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var2
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var2
      Rank: 2
Dimensions: 4 x 5
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:37"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_239
#AT_START_240
at_fn_group_banner 240 'mat73_read_be.at:53' \
  "Read 2D 64-bit integer array" "                   " 7
at_xfail=no
(
  $as_echo "240. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:54: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:54"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:54"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:55: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var3"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var3" "mat73_read_be.at:55"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var3
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var3
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:55"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_240
#AT_START_241
at_fn_group_banner 241 'mat73_read_be.at:71' \
  "Read 2D 64-bit unsigned integer array" "          " 7
at_xfail=no
(
  $as_echo "241. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:72: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:72"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:72"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:73: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var4"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var4" "mat73_read_be.at:73"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var4
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var4
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:73"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_241
#AT_START_242
at_fn_group_banner 242 'mat73_read_be.at:89' \
  "Read 2D 32-bit integer array" "                   " 7
at_xfail=no
(
  $as_echo "242. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:90: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:90"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:90"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:91: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var5"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var5" "mat73_read_be.at:91"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var5
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var5
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:91"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_242
#AT_START_243
at_fn_group_banner 243 'mat73_read_be.at:107' \
  "Read 2D 32-bit unsigned integer array" "          " 7
at_xfail=no
(
  $as_echo "243. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:108: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:108"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:108"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:109: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var6"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var6" "mat73_read_be.at:109"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var6
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var6
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:109"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_243
#AT_START_244
at_fn_group_banner 244 'mat73_read_be.at:125' \
  "Read 2D 16-bit integer array" "                   " 7
at_xfail=no
(
  $as_echo "244. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:126: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:126"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:126"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:127: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var7"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var7" "mat73_read_be.at:127"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var7
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var7
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:127"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_244
#AT_START_245
at_fn_group_banner 245 'mat73_read_be.at:143' \
  "Read 2D 16-bit unsigned integer array" "          " 7
at_xfail=no
(
  $as_echo "245. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:144: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:144"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:144"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:145: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var8"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var8" "mat73_read_be.at:145"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var8
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var8
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:145"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_245
#AT_START_246
at_fn_group_banner 246 'mat73_read_be.at:161' \
  "Read 2D 8-bit integer array" "                    " 7
at_xfail=no
(
  $as_echo "246. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:162: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:162"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:162"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:163: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var9"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var9" "mat73_read_be.at:163"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var9
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var9
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:163"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_246
#AT_START_247
at_fn_group_banner 247 'mat73_read_be.at:179' \
  "Read 2D 8-bit unsigned integer array" "           " 7
at_xfail=no
(
  $as_echo "247. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:180: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:180"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:180"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:181: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var10"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var10" "mat73_read_be.at:181"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var10
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var10
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:181"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_247
#AT_START_248
at_fn_group_banner 248 'mat73_read_be.at:197' \
  "Read 2D double-precision complex array" "         " 7
at_xfail=no
(
  $as_echo "248. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:198: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:198"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:198"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:199: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var11"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var11" "mat73_read_be.at:199"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var11
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var11
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:199"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_248
#AT_START_249
at_fn_group_banner 249 'mat73_read_be.at:215' \
  "Read 2D single-precision complex array" "         " 7
at_xfail=no
(
  $as_echo "249. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:216: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:216"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:216"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:217: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var12"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var12" "mat73_read_be.at:217"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var12
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var12
      Rank: 2
Dimensions: 4 x 5
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:217"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_249
#AT_START_250
at_fn_group_banner 250 'mat73_read_be.at:233' \
  "Read 2D 64-bit integer complex array" "           " 7
at_xfail=no
(
  $as_echo "250. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:234: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:234"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:234"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:235: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var13"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var13" "mat73_read_be.at:235"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var13
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var13
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:235"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_250
#AT_START_251
at_fn_group_banner 251 'mat73_read_be.at:251' \
  "Read 2D 64-bit unsigned integer complex array" "  " 7
at_xfail=no
(
  $as_echo "251. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:252: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:252"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:252"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:253: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var14"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var14" "mat73_read_be.at:253"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var14
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var14
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:253"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_251
#AT_START_252
at_fn_group_banner 252 'mat73_read_be.at:269' \
  "Read 2D 32-bit integer complex array" "           " 7
at_xfail=no
(
  $as_echo "252. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:270: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:270"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:270"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:271: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var15"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var15" "mat73_read_be.at:271"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var15
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var15
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:271"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_252
#AT_START_253
at_fn_group_banner 253 'mat73_read_be.at:287' \
  "Read 2D 32-bit unsigned integer complex array" "  " 7
at_xfail=no
(
  $as_echo "253. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:288: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:288"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:288"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:289: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var16"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var16" "mat73_read_be.at:289"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var16
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var16
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:289"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_253
#AT_START_254
at_fn_group_banner 254 'mat73_read_be.at:305' \
  "Read 2D 16-bit integer complex array" "           " 7
at_xfail=no
(
  $as_echo "254. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:306: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:306"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:306"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:307: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var17"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var17" "mat73_read_be.at:307"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var17
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var17
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:307"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_254
#AT_START_255
at_fn_group_banner 255 'mat73_read_be.at:323' \
  "Read 2D 16-bit unsigned integer complex array" "  " 7
at_xfail=no
(
  $as_echo "255. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:324: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:324"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:324"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:325: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var18"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var18" "mat73_read_be.at:325"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var18
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var18
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:325"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_255
#AT_START_256
at_fn_group_banner 256 'mat73_read_be.at:341' \
  "Read 2D 8-bit integer complex array" "            " 7
at_xfail=no
(
  $as_echo "256. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:342: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:342"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:342"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:343: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var19"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var19" "mat73_read_be.at:343"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var19
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var19
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:343"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_256
#AT_START_257
at_fn_group_banner 257 'mat73_read_be.at:359' \
  "Read 2D 8-bit unsigned integer complex array" "   " 7
at_xfail=no
(
  $as_echo "257. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:360: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:360"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:360"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:361: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var20"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var20" "mat73_read_be.at:361"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var20
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var20
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:361"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_257
#AT_START_258
at_fn_group_banner 258 'mat73_read_be.at:377' \
  "Read double-precision sparse array" "             " 7
at_xfail=no
(
  $as_echo "258. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:378: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:378"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:378"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:379: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var21"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var21" "mat73_read_be.at:379"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var21
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var21
      Rank: 2
Dimensions: 5 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,2)  2
    (3,3)  3
    (4,4)  4
    (5,5)  5
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:379"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_258
#AT_START_259
at_fn_group_banner 259 'mat73_read_be.at:396' \
  "Read double-precision sparse complex array" "     " 7
at_xfail=no
(
  $as_echo "259. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:397: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:397"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:397"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:398: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var22"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var22" "mat73_read_be.at:398"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var22
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var22
      Rank: 2
Dimensions: 5 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 6i
    (2,2)  2 + 7i
    (3,3)  3 + 8i
    (4,4)  4 + 9i
    (5,5)  5 + 10i
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:398"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_259
#AT_START_260
at_fn_group_banner 260 'mat73_read_be.at:415' \
  "Read empty array" "                               " 7
at_xfail=no
(
  $as_echo "260. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:416: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:416"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:416"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:417: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var23"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var23" "mat73_read_be.at:417"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var23
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var23
      Rank: 2
Dimensions: 0 x 0
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:417"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_260
#AT_START_261
at_fn_group_banner 261 'mat73_read_be.at:429' \
  "Read 2D character array" "                        " 7
at_xfail=no
(
  $as_echo "261. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:430: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:430"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:430"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:431: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var24"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var24" "mat73_read_be.at:431"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var24
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var24
      Rank: 2
Dimensions: 4 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
1234567890!@#\$%^&*()-_=+\`~
[{]}\\|;:'\",<.>/?          
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:431"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_261
#AT_START_262
at_fn_group_banner 262 'mat73_read_be.at:447' \
  "Read empty structure array" "                     " 7
at_xfail=no
(
  $as_echo "262. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:448: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:448"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:448"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:449: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var25"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var25" "mat73_read_be.at:449"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var25
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var25
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:449"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_262
#AT_START_263
at_fn_group_banner 263 'mat73_read_be.at:458' \
  "Read empty structure array with fields" "         " 7
at_xfail=no
(
  $as_echo "263. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:459: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:459"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:459"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:460: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var26"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var26" "mat73_read_be.at:460"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var26
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var26
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 0
      Name: field2
      Rank: 0
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:460"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_263
#AT_START_264
at_fn_group_banner 264 'mat73_read_be.at:475' \
  "Read structure array with empty fields" "         " 7
at_xfail=no
(
  $as_echo "264. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:476: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:476"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:476"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:477: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var27"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var27" "mat73_read_be.at:477"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var27
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var27
      Rank: 2
Dimensions: 1 x 2
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:477"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_264
#AT_START_265
at_fn_group_banner 265 'mat73_read_be.at:510' \
  "Read structure array with double-precision fields" "" 7
at_xfail=no
(
  $as_echo "265. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:511: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:511"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:511"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:512: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var28"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var28" "mat73_read_be.at:512"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var28
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var28
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:512"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_265
#AT_START_266
at_fn_group_banner 266 'mat73_read_be.at:559' \
  "Read structure array with single-precision fields" "" 7
at_xfail=no
(
  $as_echo "266. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:560: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:560"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:560"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:561: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var29"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var29" "mat73_read_be.at:561"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var29
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var29
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:561"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_266
#AT_START_267
at_fn_group_banner 267 'mat73_read_be.at:608' \
  "Read structure array with 64-bit integer fields" "" 7
at_xfail=no
(
  $as_echo "267. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:609: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:609"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:609"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:610: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var30"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var30" "mat73_read_be.at:610"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var30
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var30
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:610"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_267
#AT_START_268
at_fn_group_banner 268 'mat73_read_be.at:657' \
  "Read structure array with 64-bit unsigned integer fields" "" 7
at_xfail=no
(
  $as_echo "268. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:658: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:658"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:658"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:659: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var31"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var31" "mat73_read_be.at:659"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var31
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var31
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:659"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_268
#AT_START_269
at_fn_group_banner 269 'mat73_read_be.at:706' \
  "Read structure array with 32-bit integer fields" "" 7
at_xfail=no
(
  $as_echo "269. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:707: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:707"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:707"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:708: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var32"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var32" "mat73_read_be.at:708"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var32
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var32
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:708"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_269
#AT_START_270
at_fn_group_banner 270 'mat73_read_be.at:755' \
  "Read structure array with 32-bit unsigned integer fields" "" 7
at_xfail=no
(
  $as_echo "270. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:756: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:756"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:756"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:757: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var33"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var33" "mat73_read_be.at:757"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var33
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var33
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:757"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_270
#AT_START_271
at_fn_group_banner 271 'mat73_read_be.at:804' \
  "Read structure array with 16-bit integer fields" "" 7
at_xfail=no
(
  $as_echo "271. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:805: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:805"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:805"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:806: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var34"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var34" "mat73_read_be.at:806"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var34
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var34
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:806"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_271
#AT_START_272
at_fn_group_banner 272 'mat73_read_be.at:853' \
  "Read structure array with 16-bit unsigned integer fields" "" 7
at_xfail=no
(
  $as_echo "272. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:854: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:854"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:854"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:855: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var35"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var35" "mat73_read_be.at:855"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var35
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var35
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:855"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_272
#AT_START_273
at_fn_group_banner 273 'mat73_read_be.at:902' \
  "Read structure array with 8-bit integer fields" " " 7
at_xfail=no
(
  $as_echo "273. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:903: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:903"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:903"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:904: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var36"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var36" "mat73_read_be.at:904"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var36
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var36
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:904"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_273
#AT_START_274
at_fn_group_banner 274 'mat73_read_be.at:951' \
  "Read structure array with 8-bit unsigned integer fields" "" 7
at_xfail=no
(
  $as_echo "274. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:952: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:952"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:952"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:953: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var37"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var37" "mat73_read_be.at:953"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var37
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var37
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:953"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_274
#AT_START_275
at_fn_group_banner 275 'mat73_read_be.at:1000' \
  "Read structure array with complex double-precision fields" "" 7
at_xfail=no
(
  $as_echo "275. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1001: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1001"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1001"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1002: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var38"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var38" "mat73_read_be.at:1002"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var38
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var38
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1002"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_275
#AT_START_276
at_fn_group_banner 276 'mat73_read_be.at:1049' \
  "Read structure array with complex single-precision fields" "" 7
at_xfail=no
(
  $as_echo "276. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1050: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1050"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1050"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1051: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var39"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var39" "mat73_read_be.at:1051"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var39
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var39
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1051"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_276
#AT_START_277
at_fn_group_banner 277 'mat73_read_be.at:1098' \
  "Read structure array with complex 64-bit integer fields" "" 7
at_xfail=no
(
  $as_echo "277. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1099: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1099"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1099"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1100: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var40"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var40" "mat73_read_be.at:1100"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var40
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var40
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1100"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_277
#AT_START_278
at_fn_group_banner 278 'mat73_read_be.at:1147' \
  "Read structure array with complex 64-bit unsigned integer fields" "" 7
at_xfail=no
(
  $as_echo "278. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1148: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1148"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1148"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1149: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var41"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var41" "mat73_read_be.at:1149"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var41
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var41
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1149"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_278
#AT_START_279
at_fn_group_banner 279 'mat73_read_be.at:1196' \
  "Read structure array with complex 32-bit integer fields" "" 7
at_xfail=no
(
  $as_echo "279. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1197: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1197"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1197"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1198: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var42"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var42" "mat73_read_be.at:1198"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var42
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var42
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1198"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_279
#AT_START_280
at_fn_group_banner 280 'mat73_read_be.at:1245' \
  "Read structure array with complex 32-bit unsigned integer fields" "" 7
at_xfail=no
(
  $as_echo "280. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1246: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1246"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1246"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1247: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var43"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var43" "mat73_read_be.at:1247"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var43
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var43
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1247"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_280
#AT_START_281
at_fn_group_banner 281 'mat73_read_be.at:1294' \
  "Read structure array with complex 16-bit integer fields" "" 7
at_xfail=no
(
  $as_echo "281. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1295: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1295"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1295"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1296: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var44"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var44" "mat73_read_be.at:1296"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var44
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var44
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1296"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_281
#AT_START_282
at_fn_group_banner 282 'mat73_read_be.at:1343' \
  "Read structure array with complex 16-bit unsigned integer fields" "" 7
at_xfail=no
(
  $as_echo "282. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1344: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1344"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1344"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1345: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var45"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var45" "mat73_read_be.at:1345"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var45
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var45
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1345"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_282
#AT_START_283
at_fn_group_banner 283 'mat73_read_be.at:1392' \
  "Read structure array with complex 8-bit integer fields" "" 7
at_xfail=no
(
  $as_echo "283. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1393: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1393"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1393"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1394: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var46"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var46" "mat73_read_be.at:1394"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var46
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var46
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1394"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_283
#AT_START_284
at_fn_group_banner 284 'mat73_read_be.at:1441' \
  "Read structure array with complex 8-bit unsigned integer fields" "" 7
at_xfail=no
(
  $as_echo "284. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1442: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1442"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1442"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1443: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var47"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var47" "mat73_read_be.at:1443"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var47
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var47
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1443"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_284
#AT_START_285
at_fn_group_banner 285 'mat5_uncompressed_write.at:17' \
  "Write 2D double-precision array" "                " 8
at_xfail=no
(
  $as_echo "285. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_2d_numeric_double.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = reshape(1:50,5,10);
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:36: \$builddir/test_mat -v 5 -c double write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c double write_2d_numeric" "mat5_uncompressed_write.at:36"
( $at_check_trace; $builddir/test_mat -v 5 -c double write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:36"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:38" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:38"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:39: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:39"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:39"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_285
#AT_START_286
at_fn_group_banner 286 'mat5_uncompressed_write.at:43' \
  "Write 2D single-precision array" "                " 8
at_xfail=no
(
  $as_echo "286. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_2d_numeric_single.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = single(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:62: \$builddir/test_mat -v 5 -c single write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c single write_2d_numeric" "mat5_uncompressed_write.at:62"
( $at_check_trace; $builddir/test_mat -v 5 -c single write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:62"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:64" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:64"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:65: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_single;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:65"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_single;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:65"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_286
#AT_START_287
at_fn_group_banner 287 'mat5_uncompressed_write.at:69' \
  "Write 2D 64-bit integer array" "                  " 8
at_xfail=no
(
  $as_echo "287. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_write.at:70" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:70"
cat >test_write_2d_numeric_int64.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int64(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:89: \$builddir/test_mat -v 5 -c int64 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int64 write_2d_numeric" "mat5_uncompressed_write.at:89"
( $at_check_trace; $builddir/test_mat -v 5 -c int64 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:89"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:91" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:91"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:92: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:92"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:92"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_287
#AT_START_288
at_fn_group_banner 288 'mat5_uncompressed_write.at:96' \
  "Write 2D 64-bit unsigned integer array" "         " 8
at_xfail=no
(
  $as_echo "288. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_write.at:97" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:97"
cat >test_write_2d_numeric_int64.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint64(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:116: \$builddir/test_mat -v 5 -c uint64 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint64 write_2d_numeric" "mat5_uncompressed_write.at:116"
( $at_check_trace; $builddir/test_mat -v 5 -c uint64 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:116"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:118" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:118"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:119: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:119"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:119"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_288
#AT_START_289
at_fn_group_banner 289 'mat5_uncompressed_write.at:123' \
  "Write 2D 32-bit integer array" "                  " 8
at_xfail=no
(
  $as_echo "289. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_2d_numeric_int32.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int32(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:142: \$builddir/test_mat -v 5 -c int32 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int32 write_2d_numeric" "mat5_uncompressed_write.at:142"
( $at_check_trace; $builddir/test_mat -v 5 -c int32 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:142"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:144" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:144"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:145: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:145"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:145"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_289
#AT_START_290
at_fn_group_banner 290 'mat5_uncompressed_write.at:149' \
  "Write 2D 32-bit unsigned integer array" "         " 8
at_xfail=no
(
  $as_echo "290. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_2d_numeric_int32.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint32(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:168: \$builddir/test_mat -v 5 -c uint32 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint32 write_2d_numeric" "mat5_uncompressed_write.at:168"
( $at_check_trace; $builddir/test_mat -v 5 -c uint32 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:168"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:170" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:170"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:171: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:171"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:171"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_290
#AT_START_291
at_fn_group_banner 291 'mat5_uncompressed_write.at:175' \
  "Write 2D 16-bit integer array" "                  " 8
at_xfail=no
(
  $as_echo "291. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_2d_numeric_int16.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int16(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:194: \$builddir/test_mat -v 5 -c int16 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int16 write_2d_numeric" "mat5_uncompressed_write.at:194"
( $at_check_trace; $builddir/test_mat -v 5 -c int16 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:194"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:196" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:196"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:197: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:197"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:197"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_291
#AT_START_292
at_fn_group_banner 292 'mat5_uncompressed_write.at:201' \
  "Write 2D 16-bit unsigned integer array" "         " 8
at_xfail=no
(
  $as_echo "292. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_2d_numeric_int16.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint16(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:220: \$builddir/test_mat -v 5 -c uint16 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint16 write_2d_numeric" "mat5_uncompressed_write.at:220"
( $at_check_trace; $builddir/test_mat -v 5 -c uint16 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:220"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:222" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:222"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:223: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:223"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:223"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_292
#AT_START_293
at_fn_group_banner 293 'mat5_uncompressed_write.at:227' \
  "Write 2D 8-bit integer array" "                   " 8
at_xfail=no
(
  $as_echo "293. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_2d_numeric_int8.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int8(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:246: \$builddir/test_mat -v 5 -c int8 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int8 write_2d_numeric" "mat5_uncompressed_write.at:246"
( $at_check_trace; $builddir/test_mat -v 5 -c int8 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:246"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:248" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:248"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:249: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:249"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:249"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_293
#AT_START_294
at_fn_group_banner 294 'mat5_uncompressed_write.at:253' \
  "Write 2D 8-bit unsigned integer array" "          " 8
at_xfail=no
(
  $as_echo "294. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_2d_numeric_int8.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint8(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:272: \$builddir/test_mat -v 5 -c uint8 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint8 write_2d_numeric" "mat5_uncompressed_write.at:272"
( $at_check_trace; $builddir/test_mat -v 5 -c uint8 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:272"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:274" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:274"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:275: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:275"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:275"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_294
#AT_START_295
at_fn_group_banner 295 'mat5_uncompressed_write.at:279' \
  "Write 2D double-precision complex array" "        " 8
at_xfail=no
(
  $as_echo "295. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_complex_2d_numeric_double.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = reshape((1:50) + j*(51:100),5,10);
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:298: \$builddir/test_mat -v 5 -c double write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c double write_complex_2d_numeric" "mat5_uncompressed_write.at:298"
( $at_check_trace; $builddir/test_mat -v 5 -c double write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:298"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:300" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:300"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:301: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:301"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:301"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_295
#AT_START_296
at_fn_group_banner 296 'mat5_uncompressed_write.at:305' \
  "Write 2D single-precision complex array" "        " 8
at_xfail=no
(
  $as_echo "296. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_complex_2d_numeric_single.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = single(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:324: \$builddir/test_mat -v 5 -c single write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c single write_complex_2d_numeric" "mat5_uncompressed_write.at:324"
( $at_check_trace; $builddir/test_mat -v 5 -c single write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:324"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:326" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:326"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:327: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_single;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:327"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_single;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:327"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_296
#AT_START_297
at_fn_group_banner 297 'mat5_uncompressed_write.at:331' \
  "Write 2D 64-bit integer complex array" "          " 8
at_xfail=no
(
  $as_echo "297. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_write.at:332" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:332"
cat >test_write_complex_2d_numeric_int64.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int64(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:351: \$builddir/test_mat -v 5 -c int64 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int64 write_complex_2d_numeric" "mat5_uncompressed_write.at:351"
( $at_check_trace; $builddir/test_mat -v 5 -c int64 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:351"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:353" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:353"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:354: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:354"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:354"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_297
#AT_START_298
at_fn_group_banner 298 'mat5_uncompressed_write.at:358' \
  "Write 2D 64-bit unsigned integer complex array" " " 8
at_xfail=no
(
  $as_echo "298. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_write.at:359" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:359"
cat >test_write_complex_2d_numeric_uint64.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint64(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:378: \$builddir/test_mat -v 5 -c uint64 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint64 write_complex_2d_numeric" "mat5_uncompressed_write.at:378"
( $at_check_trace; $builddir/test_mat -v 5 -c uint64 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:378"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:380" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:380"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:381: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:381"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:381"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_298
#AT_START_299
at_fn_group_banner 299 'mat5_uncompressed_write.at:385' \
  "Write 2D 32-bit integer complex array" "          " 8
at_xfail=no
(
  $as_echo "299. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_complex_2d_numeric_int32.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int32(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:404: \$builddir/test_mat -v 5 -c int32 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int32 write_complex_2d_numeric" "mat5_uncompressed_write.at:404"
( $at_check_trace; $builddir/test_mat -v 5 -c int32 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:404"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:406" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:406"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:407: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:407"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:407"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_299
#AT_START_300
at_fn_group_banner 300 'mat5_uncompressed_write.at:411' \
  "Write 2D 32-bit unsigned integer complex array" " " 8
at_xfail=no
(
  $as_echo "300. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_complex_2d_numeric_uint32.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint32(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:430: \$builddir/test_mat -v 5 -c uint32 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint32 write_complex_2d_numeric" "mat5_uncompressed_write.at:430"
( $at_check_trace; $builddir/test_mat -v 5 -c uint32 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:430"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:432" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:432"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:433: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:433"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:433"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_300
#AT_START_301
at_fn_group_banner 301 'mat5_uncompressed_write.at:437' \
  "Write 2D 16-bit integer complex array" "          " 8
at_xfail=no
(
  $as_echo "301. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_complex_2d_numeric_int16.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int16(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:456: \$builddir/test_mat -v 5 -c int16 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int16 write_complex_2d_numeric" "mat5_uncompressed_write.at:456"
( $at_check_trace; $builddir/test_mat -v 5 -c int16 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:456"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:458" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:458"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:459: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:459"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:459"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_301
#AT_START_302
at_fn_group_banner 302 'mat5_uncompressed_write.at:463' \
  "Write 2D 16-bit unsigned integer complex array" " " 8
at_xfail=no
(
  $as_echo "302. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_complex_2d_numeric_uint16.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint16(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:482: \$builddir/test_mat -v 5 -c uint16 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint16 write_complex_2d_numeric" "mat5_uncompressed_write.at:482"
( $at_check_trace; $builddir/test_mat -v 5 -c uint16 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:482"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:484" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:484"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:485: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:485"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:485"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_302
#AT_START_303
at_fn_group_banner 303 'mat5_uncompressed_write.at:489' \
  "Write 2D 8-bit integer complex array" "           " 8
at_xfail=no
(
  $as_echo "303. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_complex_2d_numeric_int8.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int8(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:508: \$builddir/test_mat -v 5 -c int8 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int8 write_complex_2d_numeric" "mat5_uncompressed_write.at:508"
( $at_check_trace; $builddir/test_mat -v 5 -c int8 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:508"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:510" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:510"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:511: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:511"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:511"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_303
#AT_START_304
at_fn_group_banner 304 'mat5_uncompressed_write.at:515' \
  "Write 2D 8-bit unsigned integer complex array" "  " 8
at_xfail=no
(
  $as_echo "304. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_complex_2d_numeric_uint8.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint8(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:534: \$builddir/test_mat -v 5 -c uint8 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint8 write_complex_2d_numeric" "mat5_uncompressed_write.at:534"
( $at_check_trace; $builddir/test_mat -v 5 -c uint8 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:534"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:536" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:536"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:537: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:537"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:537"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_304
#AT_START_305
at_fn_group_banner 305 'mat5_uncompressed_write.at:541' \
  "Write 2D sparse double-precision array" "         " 8
at_xfail=no
(
  $as_echo "305. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_sparse_double.m <<'_ATEOF'

try
    load test_write_sparse.mat
    expdata = zeros(5,10);
    expdata(1:4:end,1:2:end) = 1;
    expdata(2:4,2:2:end) = 1;
    expdata = expdata.*reshape(1:50,5,10);
    pass = true;
    pass = pass && isa(sparse_matrix,class(expdata));
    pass = pass && issparse(sparse_matrix);
    pass = pass && all(size(sparse_matrix)==size(expdata));
    pass = pass && all(sparse_matrix(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:564: \$builddir/test_mat -v 5 -c double write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c double write_sparse" "mat5_uncompressed_write.at:564"
( $at_check_trace; $builddir/test_mat -v 5 -c double write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:564"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:566" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:566"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:567: \$MATLABEXE -nosplash -nojvm -r 'test_write_sparse_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:567"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_sparse_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:567"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_305
#AT_START_306
at_fn_group_banner 306 'mat5_uncompressed_write.at:571' \
  "Write 2D sparse complex double-precision array" " " 8
at_xfail=no
(
  $as_echo "306. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_sparse_complex_double.m <<'_ATEOF'

try
    load test_write_sparse_complex.mat
    expdata = zeros(5,10);
    expdata(1:4:end,1:2:end) = 1;
    expdata(2:4,2:2:end) = 1;
    expdata = expdata.*reshape((1:50) + j*(51:100),5,10);
    pass = true;
    pass = pass && isa(sparse_matrix,class(expdata));
    pass = pass && issparse(sparse_matrix);
    pass = pass && all(size(sparse_matrix)==size(expdata));
    pass = pass && all(sparse_matrix(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:594: \$builddir/test_mat -v 5 -c double write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c double write_complex_sparse" "mat5_uncompressed_write.at:594"
( $at_check_trace; $builddir/test_mat -v 5 -c double write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:594"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:596" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:596"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:597: \$MATLABEXE -nosplash -nojvm -r 'test_write_sparse_complex_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:597"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_sparse_complex_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:597"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_306
#AT_START_307
at_fn_group_banner 307 'mat5_uncompressed_write.at:601' \
  "Write 2D empty array" "                           " 8
at_xfail=no
(
  $as_echo "307. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_empty.m <<'_ATEOF'

try
    load test_write_empty_2d_numeric.mat
    expdata = zeros(0,10);
    pass = true;
    pass = pass && isa(empty,class(expdata));
    pass = pass && isempty(empty);
    pass = pass && all(size(empty)==size(expdata));
    pass = pass && all(empty(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:621: \$builddir/test_mat -v 5 -c double write_empty_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c double write_empty_2d_numeric" "mat5_uncompressed_write.at:621"
( $at_check_trace; $builddir/test_mat -v 5 -c double write_empty_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:621"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:623" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:623"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:624: \$MATLABEXE -nosplash -nojvm -r 'test_write_empty;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:624"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_empty;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:624"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_307
#AT_START_308
at_fn_group_banner 308 'mat5_uncompressed_write.at:628' \
  "Write character array" "                          " 8
at_xfail=no
(
  $as_echo "308. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_char.m <<'_ATEOF'

try
    load test_write_char.mat
    expdata = ['abcdefghijklmnopqrstuvwxyz';
               'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
               '1234567890!@#$%^&*()-_=+`~';
               '[{]}\|;:''",<.>/?          '];
    pass = true;
    pass = pass && isequal(expdata,a);
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:648: \$builddir/test_mat -v 5 write_char"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 write_char" "mat5_uncompressed_write.at:648"
( $at_check_trace; $builddir/test_mat -v 5 write_char
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:648"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:649" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:649"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:650: \$MATLABEXE -nosplash -nojvm -r 'test_write_char;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:650"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_char;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:650"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_308
#AT_START_309
at_fn_group_banner 309 'mat5_uncompressed_write.at:654' \
  "Write empty structure array" "                    " 8
at_xfail=no
(
  $as_echo "309. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >test_write_empty_struct.m <<'_ATEOF'

try
    load test_write_empty_struct.mat
    expdata1 = repmat(struct,0,1);
    expdata2 = repmat(struct('field1',zeros(0,0),'field2',zeros(0,0)),0,1);
    expdata3 = struct('field1',zeros(0,1),'field2',zeros(0,1));
    expdata4(1).field1 = zeros(0,1);
    expdata4(1).field2 = repmat(' ',0,1);
    expdata4(2).field1 = repmat(struct,0,1);
    expdata4(2).field2 = repmat({zeros(0,0)},0,1);
    pass = true;
    pass = pass && isequal(var1,expdata1);
    pass = pass && isequal(var2,expdata2);
    pass = pass && isequal(var3,expdata3);
    pass = pass && isequal(var4,expdata4(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:681: \$builddir/test_mat -v 5 write_empty_struct"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 write_empty_struct" "mat5_uncompressed_write.at:681"
( $at_check_trace; $builddir/test_mat -v 5 write_empty_struct
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:681"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:683" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:683"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:684: \$MATLABEXE -nosplash -nojvm -r 'test_write_empty_struct;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:684"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_empty_struct;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:684"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_309
#AT_START_310
at_fn_group_banner 310 'mat5_uncompressed_write.at:688' \
  "Write structure array with 2D double-precision fields" "" 8
at_xfail=no
(
  $as_echo "310. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape((1:12),3,4);
    expdata(1).field2 = reshape((13:24),3,4);
    expdata(2).field1 = reshape((25:36),3,4);
    expdata(2).field2 = reshape((37:48),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:712: \$builddir/test_mat -v 5 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 write_struct_2d_numeric" "mat5_uncompressed_write.at:712"
( $at_check_trace; $builddir/test_mat -v 5 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:712"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:714" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:714"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:715: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:715"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:715"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_310
#AT_START_311
at_fn_group_banner 311 'mat5_uncompressed_write.at:719' \
  "Write structure array with 2D single-precision fields" "" 8
at_xfail=no
(
  $as_echo "311. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(single((1:12)),3,4);
    expdata(1).field2 = reshape(single((13:24)),3,4);
    expdata(2).field1 = reshape(single((25:36)),3,4);
    expdata(2).field2 = reshape(single((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:743: \$builddir/test_mat -v 5 -c single write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c single write_struct_2d_numeric" "mat5_uncompressed_write.at:743"
( $at_check_trace; $builddir/test_mat -v 5 -c single write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:743"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:745" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:745"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:746: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:746"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:746"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_311
#AT_START_312
at_fn_group_banner 312 'mat5_uncompressed_write.at:750' \
  "Write structure array with 2D 64-bit signed integer fields" "" 8
at_xfail=no
(
  $as_echo "312. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_write.at:751" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:751"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int64((1:12)),3,4);
    expdata(1).field2 = reshape(int64((13:24)),3,4);
    expdata(2).field1 = reshape(int64((25:36)),3,4);
    expdata(2).field2 = reshape(int64((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:775: \$builddir/test_mat -v 5 -c int64 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int64 write_struct_2d_numeric" "mat5_uncompressed_write.at:775"
( $at_check_trace; $builddir/test_mat -v 5 -c int64 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:775"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:777" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:777"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:778: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:778"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:778"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_312
#AT_START_313
at_fn_group_banner 313 'mat5_uncompressed_write.at:782' \
  "Write structure array with 2D 64-bit unsigned integer fields" "" 8
at_xfail=no
(
  $as_echo "313. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_write.at:783" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:783"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint64((1:12)),3,4);
    expdata(1).field2 = reshape(uint64((13:24)),3,4);
    expdata(2).field1 = reshape(uint64((25:36)),3,4);
    expdata(2).field2 = reshape(uint64((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:807: \$builddir/test_mat -v 5 -c uint64 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint64 write_struct_2d_numeric" "mat5_uncompressed_write.at:807"
( $at_check_trace; $builddir/test_mat -v 5 -c uint64 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:807"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:809" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:809"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:810: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:810"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:810"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_313
#AT_START_314
at_fn_group_banner 314 'mat5_uncompressed_write.at:814' \
  "Write structure array with 2D 32-bit signed integer fields" "" 8
at_xfail=no
(
  $as_echo "314. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int32((1:12)),3,4);
    expdata(1).field2 = reshape(int32((13:24)),3,4);
    expdata(2).field1 = reshape(int32((25:36)),3,4);
    expdata(2).field2 = reshape(int32((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:838: \$builddir/test_mat -v 5 -c int32 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int32 write_struct_2d_numeric" "mat5_uncompressed_write.at:838"
( $at_check_trace; $builddir/test_mat -v 5 -c int32 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:838"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:840" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:840"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:841: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:841"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:841"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_314
#AT_START_315
at_fn_group_banner 315 'mat5_uncompressed_write.at:845' \
  "Write structure array with 2D 32-bit unsigned integer fields" "" 8
at_xfail=no
(
  $as_echo "315. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint32((1:12)),3,4);
    expdata(1).field2 = reshape(uint32((13:24)),3,4);
    expdata(2).field1 = reshape(uint32((25:36)),3,4);
    expdata(2).field2 = reshape(uint32((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:869: \$builddir/test_mat -v 5 -c uint32 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint32 write_struct_2d_numeric" "mat5_uncompressed_write.at:869"
( $at_check_trace; $builddir/test_mat -v 5 -c uint32 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:869"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:871" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:871"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:872: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:872"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:872"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_315
#AT_START_316
at_fn_group_banner 316 'mat5_uncompressed_write.at:876' \
  "Write structure array with 2D 16-bit signed integer fields" "" 8
at_xfail=no
(
  $as_echo "316. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int16((1:12)),3,4);
    expdata(1).field2 = reshape(int16((13:24)),3,4);
    expdata(2).field1 = reshape(int16((25:36)),3,4);
    expdata(2).field2 = reshape(int16((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:900: \$builddir/test_mat -v 5 -c int16 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int16 write_struct_2d_numeric" "mat5_uncompressed_write.at:900"
( $at_check_trace; $builddir/test_mat -v 5 -c int16 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:900"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:902" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:902"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:903: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:903"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:903"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_316
#AT_START_317
at_fn_group_banner 317 'mat5_uncompressed_write.at:907' \
  "Write structure array with 2D 16-bit unsigned integer fields" "" 8
at_xfail=no
(
  $as_echo "317. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint16((1:12)),3,4);
    expdata(1).field2 = reshape(uint16((13:24)),3,4);
    expdata(2).field1 = reshape(uint16((25:36)),3,4);
    expdata(2).field2 = reshape(uint16((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:931: \$builddir/test_mat -v 5 -c uint16 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint16 write_struct_2d_numeric" "mat5_uncompressed_write.at:931"
( $at_check_trace; $builddir/test_mat -v 5 -c uint16 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:931"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:933" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:933"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:934: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:934"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:934"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_317
#AT_START_318
at_fn_group_banner 318 'mat5_uncompressed_write.at:938' \
  "Write structure array with 2D 8-bit signed integer fields" "" 8
at_xfail=no
(
  $as_echo "318. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int8((1:12)),3,4);
    expdata(1).field2 = reshape(int8((13:24)),3,4);
    expdata(2).field1 = reshape(int8((25:36)),3,4);
    expdata(2).field2 = reshape(int8((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:962: \$builddir/test_mat -v 5 -c int8 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int8 write_struct_2d_numeric" "mat5_uncompressed_write.at:962"
( $at_check_trace; $builddir/test_mat -v 5 -c int8 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:962"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:964" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:964"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:965: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:965"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:965"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_318
#AT_START_319
at_fn_group_banner 319 'mat5_uncompressed_write.at:969' \
  "Write structure array with 2D 8-bit unsigned integer fields" "" 8
at_xfail=no
(
  $as_echo "319. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint8((1:12)),3,4);
    expdata(1).field2 = reshape(uint8((13:24)),3,4);
    expdata(2).field1 = reshape(uint8((25:36)),3,4);
    expdata(2).field2 = reshape(uint8((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:993: \$builddir/test_mat -v 5 -c uint8 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint8 write_struct_2d_numeric" "mat5_uncompressed_write.at:993"
( $at_check_trace; $builddir/test_mat -v 5 -c uint8 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:993"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:995" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:995"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:996: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:996"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:996"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_319
#AT_START_320
at_fn_group_banner 320 'mat5_uncompressed_write.at:1000' \
  "Write structure array with 2D double-precision complex fields" "" 8
at_xfail=no
(
  $as_echo "320. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape((1:12) + j*(51:62),3,4);
    expdata(1).field2 = reshape((13:24) + j*(63:74),3,4);
    expdata(2).field1 = reshape((25:36) + j*(75:86),3,4);
    expdata(2).field2 = reshape((37:48) + j*(87:98),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1024: \$builddir/test_mat -v 5 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 write_struct_complex_2d_numeric" "mat5_uncompressed_write.at:1024"
( $at_check_trace; $builddir/test_mat -v 5 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1024"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1026" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1026"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1027: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1027"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1027"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_320
#AT_START_321
at_fn_group_banner 321 'mat5_uncompressed_write.at:1031' \
  "Write structure array with 2D single-precision complex fields" "" 8
at_xfail=no
(
  $as_echo "321. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(single((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(single((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(single((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(single((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1055: \$builddir/test_mat -v 5 -c single write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c single write_struct_complex_2d_numeric" "mat5_uncompressed_write.at:1055"
( $at_check_trace; $builddir/test_mat -v 5 -c single write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1055"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1057" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1057"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1058: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1058"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1058"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_321
#AT_START_322
at_fn_group_banner 322 'mat5_uncompressed_write.at:1062' \
  "Write structure array with 2D 64-bit signed integer complex fields" "" 8
at_xfail=no
(
  $as_echo "322. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_write.at:1063" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1063"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int64((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int64((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int64((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int64((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1087: \$builddir/test_mat -v 5 -c int64 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int64 write_struct_complex_2d_numeric" "mat5_uncompressed_write.at:1087"
( $at_check_trace; $builddir/test_mat -v 5 -c int64 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1087"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1089" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1089"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1090: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1090"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1090"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_322
#AT_START_323
at_fn_group_banner 323 'mat5_uncompressed_write.at:1094' \
  "Write structure array with 2D 64-bit unsigned integer complex fields" "" 8
at_xfail=no
(
  $as_echo "323. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_write.at:1095" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1095"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint64((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint64((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint64((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint64((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1119: \$builddir/test_mat -v 5 -c uint64 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint64 write_struct_complex_2d_numeric" "mat5_uncompressed_write.at:1119"
( $at_check_trace; $builddir/test_mat -v 5 -c uint64 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1119"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1121" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1121"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1122: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1122"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1122"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_323
#AT_START_324
at_fn_group_banner 324 'mat5_uncompressed_write.at:1126' \
  "Write structure array with 2D 32-bit signed integer complex fields" "" 8
at_xfail=no
(
  $as_echo "324. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int32((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int32((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int32((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int32((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1150: \$builddir/test_mat -v 5 -c int32 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int32 write_struct_complex_2d_numeric" "mat5_uncompressed_write.at:1150"
( $at_check_trace; $builddir/test_mat -v 5 -c int32 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1150"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1152" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1152"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1153: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1153"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1153"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_324
#AT_START_325
at_fn_group_banner 325 'mat5_uncompressed_write.at:1157' \
  "Write structure array with 2D 32-bit unsigned integer complex fields" "" 8
at_xfail=no
(
  $as_echo "325. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint32((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint32((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint32((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint32((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1181: \$builddir/test_mat -v 5 -c uint32 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint32 write_struct_complex_2d_numeric" "mat5_uncompressed_write.at:1181"
( $at_check_trace; $builddir/test_mat -v 5 -c uint32 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1181"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1183" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1183"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1184: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1184"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1184"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_325
#AT_START_326
at_fn_group_banner 326 'mat5_uncompressed_write.at:1188' \
  "Write structure array with 2D 16-bit signed integer complex fields" "" 8
at_xfail=no
(
  $as_echo "326. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int16((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int16((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int16((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int16((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1212: \$builddir/test_mat -v 5 -c int16 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int16 write_struct_complex_2d_numeric" "mat5_uncompressed_write.at:1212"
( $at_check_trace; $builddir/test_mat -v 5 -c int16 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1212"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1214" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1214"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1215: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1215"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1215"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_326
#AT_START_327
at_fn_group_banner 327 'mat5_uncompressed_write.at:1219' \
  "Write structure array with 2D 16-bit unsigned integer complex fields" "" 8
at_xfail=no
(
  $as_echo "327. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint16((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint16((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint16((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint16((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1243: \$builddir/test_mat -v 5 -c uint16 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint16 write_struct_complex_2d_numeric" "mat5_uncompressed_write.at:1243"
( $at_check_trace; $builddir/test_mat -v 5 -c uint16 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1243"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1245" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1245"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1246: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1246"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1246"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_327
#AT_START_328
at_fn_group_banner 328 'mat5_uncompressed_write.at:1250' \
  "Write structure array with 2D 8-bit signed integer complex fields" "" 8
at_xfail=no
(
  $as_echo "328. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int8((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int8((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int8((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int8((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1274: \$builddir/test_mat -v 5 -c int8 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int8 write_struct_complex_2d_numeric" "mat5_uncompressed_write.at:1274"
( $at_check_trace; $builddir/test_mat -v 5 -c int8 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1274"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1276" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1276"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1277: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1277"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1277"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_328
#AT_START_329
at_fn_group_banner 329 'mat5_uncompressed_write.at:1281' \
  "Write structure array with 2D 8-bit unsigned integer complex fields" "" 8
at_xfail=no
(
  $as_echo "329. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint8((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint8((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint8((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint8((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1305: \$builddir/test_mat -v 5 -c uint8 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint8 write_struct_complex_2d_numeric" "mat5_uncompressed_write.at:1305"
( $at_check_trace; $builddir/test_mat -v 5 -c uint8 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1305"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1307" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1307"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1308: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1308"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1308"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_329
#AT_START_330
at_fn_group_banner 330 'mat5_uncompressed_write.at:1312' \
  "Write empty cell array" "                         " 8
at_xfail=no
(
  $as_echo "330. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_empty_cell.m <<'_ATEOF'

try
    load test_write_empty_cell.mat
    expdata1 = cell(0,1);
    expdata2 = {zeros(0,1);zeros(0,1)};
    pass = true;
    pass = pass && isequal(var1,expdata1);
    pass = pass && isequal(var2,expdata2);
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1330: \$builddir/test_mat -v 5 write_empty_cell"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 write_empty_cell" "mat5_uncompressed_write.at:1330"
( $at_check_trace; $builddir/test_mat -v 5 write_empty_cell
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1330"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1332" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1332"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1333: \$MATLABEXE -nosplash -nojvm -r 'test_write_empty_cell;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1333"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_empty_cell;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1333"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_330
#AT_START_331
at_fn_group_banner 331 'mat5_uncompressed_write.at:1337' \
  "Write cell array with 2D double-precision fields" "" 8
at_xfail=no
(
  $as_echo "331. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape((1:12),3,4);reshape((13:24),3,4);...
               reshape((25:36),3,4);reshape((37:48),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1359: \$builddir/test_mat -v 5 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 write_cell_2d_numeric" "mat5_uncompressed_write.at:1359"
( $at_check_trace; $builddir/test_mat -v 5 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1359"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1361" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1361"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1362: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1362"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1362"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_331
#AT_START_332
at_fn_group_banner 332 'mat5_uncompressed_write.at:1366' \
  "Write cell array with 2D single-precision fields" "" 8
at_xfail=no
(
  $as_echo "332. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(single((1:12)),3,4);reshape(single((13:24)),3,4);...
               reshape(single((25:36)),3,4);reshape(single((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1388: \$builddir/test_mat -v 5 -c single write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c single write_cell_2d_numeric" "mat5_uncompressed_write.at:1388"
( $at_check_trace; $builddir/test_mat -v 5 -c single write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1388"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1390" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1390"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1391: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1391"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1391"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_332
#AT_START_333
at_fn_group_banner 333 'mat5_uncompressed_write.at:1395' \
  "Write cell array with 2D 64-bit signed integer fields" "" 8
at_xfail=no
(
  $as_echo "333. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_write.at:1396" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1396"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int64((1:12)),3,4);reshape(int64((13:24)),3,4);...
               reshape(int64((25:36)),3,4);reshape(int64((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1418: \$builddir/test_mat -v 5 -c int64 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int64 write_cell_2d_numeric" "mat5_uncompressed_write.at:1418"
( $at_check_trace; $builddir/test_mat -v 5 -c int64 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1418"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1420" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1420"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1421: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1421"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1421"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_333
#AT_START_334
at_fn_group_banner 334 'mat5_uncompressed_write.at:1425' \
  "Write cell array with 2D 64-bit unsigned integer fields" "" 8
at_xfail=no
(
  $as_echo "334. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_write.at:1426" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1426"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint64((1:12)),3,4);reshape(uint64((13:24)),3,4);...
               reshape(uint64((25:36)),3,4);reshape(uint64((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1448: \$builddir/test_mat -v 5 -c uint64 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint64 write_cell_2d_numeric" "mat5_uncompressed_write.at:1448"
( $at_check_trace; $builddir/test_mat -v 5 -c uint64 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1448"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1450" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1450"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1451: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1451"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1451"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_334
#AT_START_335
at_fn_group_banner 335 'mat5_uncompressed_write.at:1455' \
  "Write cell array with 2D 32-bit signed integer fields" "" 8
at_xfail=no
(
  $as_echo "335. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int32((1:12)),3,4);reshape(int32((13:24)),3,4);...
               reshape(int32((25:36)),3,4);reshape(int32((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1477: \$builddir/test_mat -v 5 -c int32 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int32 write_cell_2d_numeric" "mat5_uncompressed_write.at:1477"
( $at_check_trace; $builddir/test_mat -v 5 -c int32 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1477"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1479" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1479"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1480: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1480"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1480"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_335
#AT_START_336
at_fn_group_banner 336 'mat5_uncompressed_write.at:1484' \
  "Write cell array with 2D 32-bit unsigned integer fields" "" 8
at_xfail=no
(
  $as_echo "336. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint32((1:12)),3,4);reshape(uint32((13:24)),3,4);...
               reshape(uint32((25:36)),3,4);reshape(uint32((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1506: \$builddir/test_mat -v 5 -c uint32 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint32 write_cell_2d_numeric" "mat5_uncompressed_write.at:1506"
( $at_check_trace; $builddir/test_mat -v 5 -c uint32 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1506"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1508" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1508"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1509: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1509"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1509"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_336
#AT_START_337
at_fn_group_banner 337 'mat5_uncompressed_write.at:1513' \
  "Write cell array with 2D 16-bit signed integer fields" "" 8
at_xfail=no
(
  $as_echo "337. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int16((1:12)),3,4);reshape(int16((13:24)),3,4);...
               reshape(int16((25:36)),3,4);reshape(int16((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1535: \$builddir/test_mat -v 5 -c int16 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int16 write_cell_2d_numeric" "mat5_uncompressed_write.at:1535"
( $at_check_trace; $builddir/test_mat -v 5 -c int16 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1535"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1537" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1537"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1538: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1538"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1538"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_337
#AT_START_338
at_fn_group_banner 338 'mat5_uncompressed_write.at:1542' \
  "Write cell array with 2D 16-bit unsigned integer fields" "" 8
at_xfail=no
(
  $as_echo "338. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint16((1:12)),3,4);reshape(uint16((13:24)),3,4);...
               reshape(uint16((25:36)),3,4);reshape(uint16((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1564: \$builddir/test_mat -v 5 -c uint16 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint16 write_cell_2d_numeric" "mat5_uncompressed_write.at:1564"
( $at_check_trace; $builddir/test_mat -v 5 -c uint16 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1564"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1566" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1566"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1567: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1567"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1567"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_338
#AT_START_339
at_fn_group_banner 339 'mat5_uncompressed_write.at:1571' \
  "Write cell array with 2D 8-bit signed integer fields" "" 8
at_xfail=no
(
  $as_echo "339. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int8((1:12)),3,4);reshape(int8((13:24)),3,4);...
               reshape(int8((25:36)),3,4);reshape(int8((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1593: \$builddir/test_mat -v 5 -c int8 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int8 write_cell_2d_numeric" "mat5_uncompressed_write.at:1593"
( $at_check_trace; $builddir/test_mat -v 5 -c int8 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1593"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1595" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1595"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1596: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1596"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1596"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_339
#AT_START_340
at_fn_group_banner 340 'mat5_uncompressed_write.at:1600' \
  "Write cell array with 2D 8-bit unsigned integer fields" "" 8
at_xfail=no
(
  $as_echo "340. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint8((1:12)),3,4);reshape(uint8((13:24)),3,4);...
               reshape(uint8((25:36)),3,4);reshape(uint8((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1622: \$builddir/test_mat -v 5 -c uint8 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint8 write_cell_2d_numeric" "mat5_uncompressed_write.at:1622"
( $at_check_trace; $builddir/test_mat -v 5 -c uint8 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1622"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1624" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1624"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1625: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1625"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1625"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_340
#AT_START_341
at_fn_group_banner 341 'mat5_uncompressed_write.at:1629' \
  "Write cell array with 2D double-precision complex fields" "" 8
at_xfail=no
(
  $as_echo "341. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape((1:12)+j*(51:62),3,4);...
               reshape((13:24)+j*(63:74),3,4);...
               reshape((25:36)+j*(75:86),3,4);...
               reshape((37:48)+j*(87:98),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1653: \$builddir/test_mat -v 5 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 write_cell_complex_2d_numeric" "mat5_uncompressed_write.at:1653"
( $at_check_trace; $builddir/test_mat -v 5 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1653"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1655" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1655"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1656: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1656"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1656"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_341
#AT_START_342
at_fn_group_banner 342 'mat5_uncompressed_write.at:1660' \
  "Write cell array with 2D single-precision complex fields" "" 8
at_xfail=no
(
  $as_echo "342. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(single((1:12)+j*(51:62)),3,4);...
               reshape(single((13:24)+j*(63:74)),3,4);...
               reshape(single((25:36)+j*(75:86)),3,4);...
               reshape(single((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1684: \$builddir/test_mat -v 5 -c single write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c single write_cell_complex_2d_numeric" "mat5_uncompressed_write.at:1684"
( $at_check_trace; $builddir/test_mat -v 5 -c single write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1684"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1686" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1686"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1687: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1687"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1687"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_342
#AT_START_343
at_fn_group_banner 343 'mat5_uncompressed_write.at:1691' \
  "Write cell array with 2D 64-bit signed integer complex fields" "" 8
at_xfail=no
(
  $as_echo "343. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_write.at:1692" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1692"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int64((1:12)+j*(51:62)),3,4);...
               reshape(int64((13:24)+j*(63:74)),3,4);...
               reshape(int64((25:36)+j*(75:86)),3,4);...
               reshape(int64((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1716: \$builddir/test_mat -v 5 -c int64 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int64 write_cell_complex_2d_numeric" "mat5_uncompressed_write.at:1716"
( $at_check_trace; $builddir/test_mat -v 5 -c int64 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1716"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1718" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1718"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1719: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1719"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1719"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_343
#AT_START_344
at_fn_group_banner 344 'mat5_uncompressed_write.at:1723' \
  "Write cell array with 2D 64-bit unsigned integer complex fields" "" 8
at_xfail=no
(
  $as_echo "344. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_write.at:1724" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1724"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint64((1:12)+j*(51:62)),3,4);...
               reshape(uint64((13:24)+j*(63:74)),3,4);...
               reshape(uint64((25:36)+j*(75:86)),3,4);...
               reshape(uint64((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1748: \$builddir/test_mat -v 5 -c uint64 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint64 write_cell_complex_2d_numeric" "mat5_uncompressed_write.at:1748"
( $at_check_trace; $builddir/test_mat -v 5 -c uint64 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1748"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1750" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1750"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1751: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1751"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1751"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_344
#AT_START_345
at_fn_group_banner 345 'mat5_uncompressed_write.at:1755' \
  "Write cell array with 2D 32-bit signed integer complex fields" "" 8
at_xfail=no
(
  $as_echo "345. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int32((1:12)+j*(51:62)),3,4);...
               reshape(int32((13:24)+j*(63:74)),3,4);...
               reshape(int32((25:36)+j*(75:86)),3,4);...
               reshape(int32((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1779: \$builddir/test_mat -v 5 -c int32 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int32 write_cell_complex_2d_numeric" "mat5_uncompressed_write.at:1779"
( $at_check_trace; $builddir/test_mat -v 5 -c int32 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1779"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1781" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1781"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1782: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1782"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1782"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_345
#AT_START_346
at_fn_group_banner 346 'mat5_uncompressed_write.at:1786' \
  "Write cell array with 2D 32-bit unsigned integer complex fields" "" 8
at_xfail=no
(
  $as_echo "346. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint32((1:12)+j*(51:62)),3,4);...
               reshape(uint32((13:24)+j*(63:74)),3,4);...
               reshape(uint32((25:36)+j*(75:86)),3,4);...
               reshape(uint32((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1810: \$builddir/test_mat -v 5 -c uint32 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint32 write_cell_complex_2d_numeric" "mat5_uncompressed_write.at:1810"
( $at_check_trace; $builddir/test_mat -v 5 -c uint32 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1810"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1812" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1812"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1813: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1813"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1813"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_346
#AT_START_347
at_fn_group_banner 347 'mat5_uncompressed_write.at:1817' \
  "Write cell array with 2D 16-bit signed integer complex fields" "" 8
at_xfail=no
(
  $as_echo "347. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int16((1:12)+j*(51:62)),3,4);...
               reshape(int16((13:24)+j*(63:74)),3,4);...
               reshape(int16((25:36)+j*(75:86)),3,4);...
               reshape(int16((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1841: \$builddir/test_mat -v 5 -c int16 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int16 write_cell_complex_2d_numeric" "mat5_uncompressed_write.at:1841"
( $at_check_trace; $builddir/test_mat -v 5 -c int16 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1841"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1843" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1843"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1844: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1844"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1844"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_347
#AT_START_348
at_fn_group_banner 348 'mat5_uncompressed_write.at:1848' \
  "Write cell array with 2D 16-bit unsigned integer complex fields" "" 8
at_xfail=no
(
  $as_echo "348. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint16((1:12)+j*(51:62)),3,4);...
               reshape(uint16((13:24)+j*(63:74)),3,4);...
               reshape(uint16((25:36)+j*(75:86)),3,4);...
               reshape(uint16((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1872: \$builddir/test_mat -v 5 -c uint16 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint16 write_cell_complex_2d_numeric" "mat5_uncompressed_write.at:1872"
( $at_check_trace; $builddir/test_mat -v 5 -c uint16 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1872"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1874" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1874"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1875: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1875"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1875"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_348
#AT_START_349
at_fn_group_banner 349 'mat5_uncompressed_write.at:1879' \
  "Write cell array with 2D 8-bit signed integer complex fields" "" 8
at_xfail=no
(
  $as_echo "349. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int8((1:12)+j*(51:62)),3,4);...
               reshape(int8((13:24)+j*(63:74)),3,4);...
               reshape(int8((25:36)+j*(75:86)),3,4);...
               reshape(int8((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1903: \$builddir/test_mat -v 5 -c int8 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int8 write_cell_complex_2d_numeric" "mat5_uncompressed_write.at:1903"
( $at_check_trace; $builddir/test_mat -v 5 -c int8 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1903"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1905" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1905"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1906: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1906"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1906"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_349
#AT_START_350
at_fn_group_banner 350 'mat5_uncompressed_write.at:1910' \
  "Write cell array with 2D 8-bit unsigned integer complex fields" "" 8
at_xfail=no
(
  $as_echo "350. $at_setup_line: testing $at_desc ..."
  $at_traceon

cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint8((1:12)+j*(51:62)),3,4);...
               reshape(uint8((13:24)+j*(63:74)),3,4);...
               reshape(uint8((25:36)+j*(75:86)),3,4);...
               reshape(uint8((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1934: \$builddir/test_mat -v 5 -c uint8 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint8 write_cell_complex_2d_numeric" "mat5_uncompressed_write.at:1934"
( $at_check_trace; $builddir/test_mat -v 5 -c uint8 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1934"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1936" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1936"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1937: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1937"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1937"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_350
#AT_START_351
at_fn_group_banner 351 'mat5_compressed_write.at:17' \
  "Write 2D double-precision array" "                " 9
at_xfail=no
(
  $as_echo "351. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:18" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:18"
cat >test_write_2d_numeric_double.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = reshape(1:50,5,10);
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:37: \$builddir/test_mat -v 5 -z -c double write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c double write_2d_numeric" "mat5_compressed_write.at:37"
( $at_check_trace; $builddir/test_mat -v 5 -z -c double write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:37"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:39" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:39"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:40: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:40"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:40"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_351
#AT_START_352
at_fn_group_banner 352 'mat5_compressed_write.at:44' \
  "Write 2D single-precision array" "                " 9
at_xfail=no
(
  $as_echo "352. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:45" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:45"
cat >test_write_2d_numeric_single.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = single(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:64: \$builddir/test_mat -v 5 -z -c single write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c single write_2d_numeric" "mat5_compressed_write.at:64"
( $at_check_trace; $builddir/test_mat -v 5 -z -c single write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:64"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:66" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:66"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:67: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_single;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:67"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_single;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:67"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_352
#AT_START_353
at_fn_group_banner 353 'mat5_compressed_write.at:71' \
  "Write 2D 64-bit integer array" "                  " 9
at_xfail=no
(
  $as_echo "353. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:72" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:72"
$as_echo "mat5_compressed_write.at:73" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:73"
cat >test_write_2d_numeric_int64.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int64(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:92: \$builddir/test_mat -v 5 -z -c int64 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int64 write_2d_numeric" "mat5_compressed_write.at:92"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int64 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:92"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:94" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:94"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:95: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:95"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:95"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_353
#AT_START_354
at_fn_group_banner 354 'mat5_compressed_write.at:99' \
  "Write 2D 64-bit unsigned integer array" "         " 9
at_xfail=no
(
  $as_echo "354. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:100" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:100"
$as_echo "mat5_compressed_write.at:101" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:101"
cat >test_write_2d_numeric_int64.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint64(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:120: \$builddir/test_mat -v 5 -z -c uint64 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint64 write_2d_numeric" "mat5_compressed_write.at:120"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint64 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:120"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:122" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:122"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:123: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:123"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:123"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_354
#AT_START_355
at_fn_group_banner 355 'mat5_compressed_write.at:127' \
  "Write 2D 32-bit integer array" "                  " 9
at_xfail=no
(
  $as_echo "355. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:128" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:128"
cat >test_write_2d_numeric_int32.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int32(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:147: \$builddir/test_mat -v 5 -z -c int32 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int32 write_2d_numeric" "mat5_compressed_write.at:147"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int32 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:147"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:149" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:149"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:150: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:150"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:150"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_355
#AT_START_356
at_fn_group_banner 356 'mat5_compressed_write.at:154' \
  "Write 2D 32-bit unsigned integer array" "         " 9
at_xfail=no
(
  $as_echo "356. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:155" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:155"
cat >test_write_2d_numeric_int32.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint32(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:174: \$builddir/test_mat -v 5 -z -c uint32 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint32 write_2d_numeric" "mat5_compressed_write.at:174"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint32 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:174"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:176" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:176"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:177: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:177"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:177"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_356
#AT_START_357
at_fn_group_banner 357 'mat5_compressed_write.at:181' \
  "Write 2D 16-bit integer array" "                  " 9
at_xfail=no
(
  $as_echo "357. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:182" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:182"
cat >test_write_2d_numeric_int16.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int16(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:201: \$builddir/test_mat -v 5 -z -c int16 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int16 write_2d_numeric" "mat5_compressed_write.at:201"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int16 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:201"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:203" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:203"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:204: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:204"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:204"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_357
#AT_START_358
at_fn_group_banner 358 'mat5_compressed_write.at:208' \
  "Write 2D 16-bit unsigned integer array" "         " 9
at_xfail=no
(
  $as_echo "358. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:209" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:209"
cat >test_write_2d_numeric_int16.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint16(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:228: \$builddir/test_mat -v 5 -z -c uint16 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint16 write_2d_numeric" "mat5_compressed_write.at:228"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint16 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:228"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:230" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:230"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:231: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:231"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:231"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_358
#AT_START_359
at_fn_group_banner 359 'mat5_compressed_write.at:235' \
  "Write 2D 8-bit integer array" "                   " 9
at_xfail=no
(
  $as_echo "359. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:236" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:236"
cat >test_write_2d_numeric_int8.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int8(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:255: \$builddir/test_mat -v 5 -z -c int8 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int8 write_2d_numeric" "mat5_compressed_write.at:255"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int8 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:255"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:257" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:257"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:258: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:258"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:258"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_359
#AT_START_360
at_fn_group_banner 360 'mat5_compressed_write.at:262' \
  "Write 2D 8-bit unsigned integer array" "          " 9
at_xfail=no
(
  $as_echo "360. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:263" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:263"
cat >test_write_2d_numeric_int8.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint8(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:282: \$builddir/test_mat -v 5 -z -c uint8 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint8 write_2d_numeric" "mat5_compressed_write.at:282"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint8 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:282"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:284" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:284"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:285: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:285"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:285"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_360
#AT_START_361
at_fn_group_banner 361 'mat5_compressed_write.at:289' \
  "Write 2D double-precision complex array" "        " 9
at_xfail=no
(
  $as_echo "361. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:290" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:290"
cat >test_write_complex_2d_numeric_double.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = reshape((1:50) + j*(51:100),5,10);
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:309: \$builddir/test_mat -v 5 -z -c double write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c double write_complex_2d_numeric" "mat5_compressed_write.at:309"
( $at_check_trace; $builddir/test_mat -v 5 -z -c double write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:309"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:311" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:311"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:312: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:312"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:312"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_361
#AT_START_362
at_fn_group_banner 362 'mat5_compressed_write.at:316' \
  "Write 2D single-precision complex array" "        " 9
at_xfail=no
(
  $as_echo "362. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:317" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:317"
cat >test_write_complex_2d_numeric_single.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = single(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:336: \$builddir/test_mat -v 5 -z -c single write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c single write_complex_2d_numeric" "mat5_compressed_write.at:336"
( $at_check_trace; $builddir/test_mat -v 5 -z -c single write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:336"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:338" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:338"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:339: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_single;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:339"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_single;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:339"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_362
#AT_START_363
at_fn_group_banner 363 'mat5_compressed_write.at:343' \
  "Write 2D 64-bit integer complex array" "          " 9
at_xfail=no
(
  $as_echo "363. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:344" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:344"
$as_echo "mat5_compressed_write.at:345" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:345"
cat >test_write_complex_2d_numeric_int64.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int64(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:364: \$builddir/test_mat -v 5 -z -c int64 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int64 write_complex_2d_numeric" "mat5_compressed_write.at:364"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int64 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:364"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:366" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:366"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:367: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:367"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:367"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_363
#AT_START_364
at_fn_group_banner 364 'mat5_compressed_write.at:371' \
  "Write 2D 64-bit unsigned integer complex array" " " 9
at_xfail=no
(
  $as_echo "364. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:372" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:372"
$as_echo "mat5_compressed_write.at:373" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:373"
cat >test_write_complex_2d_numeric_uint64.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint64(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:392: \$builddir/test_mat -v 5 -z -c uint64 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint64 write_complex_2d_numeric" "mat5_compressed_write.at:392"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint64 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:392"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:394" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:394"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:395: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:395"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:395"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_364
#AT_START_365
at_fn_group_banner 365 'mat5_compressed_write.at:399' \
  "Write 2D 32-bit integer complex array" "          " 9
at_xfail=no
(
  $as_echo "365. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:400" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:400"
cat >test_write_complex_2d_numeric_int32.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int32(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:419: \$builddir/test_mat -v 5 -z -c int32 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int32 write_complex_2d_numeric" "mat5_compressed_write.at:419"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int32 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:419"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:421" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:421"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:422: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:422"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:422"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_365
#AT_START_366
at_fn_group_banner 366 'mat5_compressed_write.at:426' \
  "Write 2D 32-bit unsigned integer complex array" " " 9
at_xfail=no
(
  $as_echo "366. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:427" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:427"
cat >test_write_complex_2d_numeric_uint32.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint32(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:446: \$builddir/test_mat -v 5 -z -c uint32 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint32 write_complex_2d_numeric" "mat5_compressed_write.at:446"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint32 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:446"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:448" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:448"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:449: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:449"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:449"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_366
#AT_START_367
at_fn_group_banner 367 'mat5_compressed_write.at:453' \
  "Write 2D 16-bit integer complex array" "          " 9
at_xfail=no
(
  $as_echo "367. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:454" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:454"
cat >test_write_complex_2d_numeric_int16.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int16(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:473: \$builddir/test_mat -v 5 -z -c int16 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int16 write_complex_2d_numeric" "mat5_compressed_write.at:473"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int16 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:473"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:475" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:475"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:476: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:476"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:476"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_367
#AT_START_368
at_fn_group_banner 368 'mat5_compressed_write.at:480' \
  "Write 2D 16-bit unsigned integer complex array" " " 9
at_xfail=no
(
  $as_echo "368. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:481" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:481"
cat >test_write_complex_2d_numeric_uint16.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint16(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:500: \$builddir/test_mat -v 5 -z -c uint16 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint16 write_complex_2d_numeric" "mat5_compressed_write.at:500"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint16 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:500"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:502" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:502"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:503: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:503"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:503"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_368
#AT_START_369
at_fn_group_banner 369 'mat5_compressed_write.at:507' \
  "Write 2D 8-bit integer complex array" "           " 9
at_xfail=no
(
  $as_echo "369. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:508" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:508"
cat >test_write_complex_2d_numeric_int8.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int8(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:527: \$builddir/test_mat -v 5 -z -c int8 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int8 write_complex_2d_numeric" "mat5_compressed_write.at:527"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int8 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:527"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:529" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:529"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:530: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:530"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:530"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_369
#AT_START_370
at_fn_group_banner 370 'mat5_compressed_write.at:534' \
  "Write 2D 8-bit unsigned integer complex array" "  " 9
at_xfail=no
(
  $as_echo "370. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:535" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:535"
cat >test_write_complex_2d_numeric_uint8.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint8(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:554: \$builddir/test_mat -v 5 -z -c uint8 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint8 write_complex_2d_numeric" "mat5_compressed_write.at:554"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint8 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:554"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:556" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:556"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:557: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:557"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:557"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_370
#AT_START_371
at_fn_group_banner 371 'mat5_compressed_write.at:561' \
  "Write 2D sparse double-precision array" "         " 9
at_xfail=no
(
  $as_echo "371. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:562" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:562"
cat >test_write_sparse_double.m <<'_ATEOF'

try
    load test_write_sparse.mat
    expdata = zeros(5,10);
    expdata(1:4:end,1:2:end) = 1;
    expdata(2:4,2:2:end) = 1;
    expdata = expdata.*reshape(1:50,5,10);
    pass = true;
    pass = pass && isa(sparse_matrix,class(expdata));
    pass = pass && issparse(sparse_matrix);
    pass = pass && all(size(sparse_matrix)==size(expdata));
    pass = pass && all(sparse_matrix(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:585: \$builddir/test_mat -v 5 -z -c double write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c double write_sparse" "mat5_compressed_write.at:585"
( $at_check_trace; $builddir/test_mat -v 5 -z -c double write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:585"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:587" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:587"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:588: \$MATLABEXE -nosplash -nojvm -r 'test_write_sparse_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:588"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_sparse_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:588"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_371
#AT_START_372
at_fn_group_banner 372 'mat5_compressed_write.at:592' \
  "Write 2D sparse complex double-precision array" " " 9
at_xfail=no
(
  $as_echo "372. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:593" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:593"
cat >test_write_sparse_complex_double.m <<'_ATEOF'

try
    load test_write_sparse_complex.mat
    expdata = zeros(5,10);
    expdata(1:4:end,1:2:end) = 1;
    expdata(2:4,2:2:end) = 1;
    expdata = expdata.*reshape((1:50) + j*(51:100),5,10);
    pass = true;
    pass = pass && isa(sparse_matrix,class(expdata));
    pass = pass && issparse(sparse_matrix);
    pass = pass && all(size(sparse_matrix)==size(expdata));
    pass = pass && all(sparse_matrix(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:616: \$builddir/test_mat -v 5 -z -c double write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c double write_complex_sparse" "mat5_compressed_write.at:616"
( $at_check_trace; $builddir/test_mat -v 5 -z -c double write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:616"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:618" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:618"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:619: \$MATLABEXE -nosplash -nojvm -r 'test_write_sparse_complex_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:619"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_sparse_complex_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:619"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_372
#AT_START_373
at_fn_group_banner 373 'mat5_compressed_write.at:623' \
  "Write 2D empty array" "                           " 9
at_xfail=no
(
  $as_echo "373. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:624" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:624"
cat >test_write_empty.m <<'_ATEOF'

try
    load test_write_empty_2d_numeric.mat
    expdata = zeros(0,10);
    pass = true;
    pass = pass && isa(empty,class(expdata));
    pass = pass && isempty(empty);
    pass = pass && all(size(empty)==size(expdata));
    pass = pass && all(empty(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:644: \$builddir/test_mat -v 5 -z -c double write_empty_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c double write_empty_2d_numeric" "mat5_compressed_write.at:644"
( $at_check_trace; $builddir/test_mat -v 5 -z -c double write_empty_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:644"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:646" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:646"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:647: \$MATLABEXE -nosplash -nojvm -r 'test_write_empty;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:647"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_empty;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:647"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_373
#AT_START_374
at_fn_group_banner 374 'mat5_compressed_write.at:651' \
  "Write character array" "                          " 9
at_xfail=no
(
  $as_echo "374. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:652" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:652"
cat >test_write_char.m <<'_ATEOF'

try
    load test_write_char.mat
    expdata = ['abcdefghijklmnopqrstuvwxyz';
               'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
               '1234567890!@#$%^&*()-_=+`~';
               '[{]}\|;:''",<.>/?          '];
    pass = true;
    pass = pass && isequal(expdata,a);
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:672: \$builddir/test_mat -v 5 write_char"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 write_char" "mat5_compressed_write.at:672"
( $at_check_trace; $builddir/test_mat -v 5 write_char
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:672"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:673" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:673"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:674: \$MATLABEXE -nosplash -nojvm -r 'test_write_char;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:674"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_char;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:674"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_374
#AT_START_375
at_fn_group_banner 375 'mat5_compressed_write.at:678' \
  "Write empty structure array" "                    " 9
at_xfail=no
(
  $as_echo "375. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:679" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:679"
cat >test_write_empty_struct.m <<'_ATEOF'

try
    load test_write_empty_struct.mat
    expdata1 = repmat(struct,0,1);
    expdata2 = repmat(struct('field1',zeros(0,0),'field2',zeros(0,0)),0,1);
    expdata3 = struct('field1',zeros(0,1),'field2',zeros(0,1));
    expdata4(1).field1 = zeros(0,1);
    expdata4(1).field2 = repmat(' ',0,1);
    expdata4(2).field1 = repmat(struct,0,1);
    expdata4(2).field2 = repmat({zeros(0,0)},0,1);
    pass = true;
    pass = pass && isequal(var1,expdata1);
    pass = pass && isequal(var2,expdata2);
    pass = pass && isequal(var3,expdata3);
    pass = pass && isequal(var4,expdata4(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:705: \$builddir/test_mat -v 5 -z write_empty_struct"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z write_empty_struct" "mat5_compressed_write.at:705"
( $at_check_trace; $builddir/test_mat -v 5 -z write_empty_struct
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:705"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:707" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:707"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:708: \$MATLABEXE -nosplash -nojvm -r 'test_write_empty_struct;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:708"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_empty_struct;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:708"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_375
#AT_START_376
at_fn_group_banner 376 'mat5_compressed_write.at:712' \
  "Write structure array with 2D double-precision fields" "" 9
at_xfail=no
(
  $as_echo "376. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:713" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:713"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape((1:12),3,4);
    expdata(1).field2 = reshape((13:24),3,4);
    expdata(2).field1 = reshape((25:36),3,4);
    expdata(2).field2 = reshape((37:48),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:737: \$builddir/test_mat -v 5 -z write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z write_struct_2d_numeric" "mat5_compressed_write.at:737"
( $at_check_trace; $builddir/test_mat -v 5 -z write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:737"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:739" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:739"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:740: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:740"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:740"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_376
#AT_START_377
at_fn_group_banner 377 'mat5_compressed_write.at:744' \
  "Write structure array with 2D single-precision fields" "" 9
at_xfail=no
(
  $as_echo "377. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:745" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:745"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(single((1:12)),3,4);
    expdata(1).field2 = reshape(single((13:24)),3,4);
    expdata(2).field1 = reshape(single((25:36)),3,4);
    expdata(2).field2 = reshape(single((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:769: \$builddir/test_mat -v 5 -z -c single write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c single write_struct_2d_numeric" "mat5_compressed_write.at:769"
( $at_check_trace; $builddir/test_mat -v 5 -z -c single write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:769"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:771" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:771"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:772: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:772"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:772"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_377
#AT_START_378
at_fn_group_banner 378 'mat5_compressed_write.at:776' \
  "Write structure array with 2D 64-bit signed integer fields" "" 9
at_xfail=no
(
  $as_echo "378. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:777" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:777"
$as_echo "mat5_compressed_write.at:778" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:778"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int64((1:12)),3,4);
    expdata(1).field2 = reshape(int64((13:24)),3,4);
    expdata(2).field1 = reshape(int64((25:36)),3,4);
    expdata(2).field2 = reshape(int64((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:802: \$builddir/test_mat -v 5 -z -c int64 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int64 write_struct_2d_numeric" "mat5_compressed_write.at:802"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int64 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:802"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:804" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:804"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:805: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:805"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:805"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_378
#AT_START_379
at_fn_group_banner 379 'mat5_compressed_write.at:809' \
  "Write structure array with 2D 64-bit unsigned integer fields" "" 9
at_xfail=no
(
  $as_echo "379. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:810" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:810"
$as_echo "mat5_compressed_write.at:811" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:811"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint64((1:12)),3,4);
    expdata(1).field2 = reshape(uint64((13:24)),3,4);
    expdata(2).field1 = reshape(uint64((25:36)),3,4);
    expdata(2).field2 = reshape(uint64((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:835: \$builddir/test_mat -v 5 -z -c uint64 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint64 write_struct_2d_numeric" "mat5_compressed_write.at:835"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint64 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:835"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:837" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:837"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:838: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:838"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:838"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_379
#AT_START_380
at_fn_group_banner 380 'mat5_compressed_write.at:842' \
  "Write structure array with 2D 32-bit signed integer fields" "" 9
at_xfail=no
(
  $as_echo "380. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:843" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:843"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int32((1:12)),3,4);
    expdata(1).field2 = reshape(int32((13:24)),3,4);
    expdata(2).field1 = reshape(int32((25:36)),3,4);
    expdata(2).field2 = reshape(int32((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:867: \$builddir/test_mat -v 5 -z -c int32 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int32 write_struct_2d_numeric" "mat5_compressed_write.at:867"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int32 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:867"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:869" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:869"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:870: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:870"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:870"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_380
#AT_START_381
at_fn_group_banner 381 'mat5_compressed_write.at:874' \
  "Write structure array with 2D 32-bit unsigned integer fields" "" 9
at_xfail=no
(
  $as_echo "381. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:875" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:875"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint32((1:12)),3,4);
    expdata(1).field2 = reshape(uint32((13:24)),3,4);
    expdata(2).field1 = reshape(uint32((25:36)),3,4);
    expdata(2).field2 = reshape(uint32((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:899: \$builddir/test_mat -v 5 -z -c uint32 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint32 write_struct_2d_numeric" "mat5_compressed_write.at:899"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint32 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:899"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:901" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:901"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:902: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:902"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:902"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_381
#AT_START_382
at_fn_group_banner 382 'mat5_compressed_write.at:906' \
  "Write structure array with 2D 16-bit signed integer fields" "" 9
at_xfail=no
(
  $as_echo "382. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:907" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:907"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int16((1:12)),3,4);
    expdata(1).field2 = reshape(int16((13:24)),3,4);
    expdata(2).field1 = reshape(int16((25:36)),3,4);
    expdata(2).field2 = reshape(int16((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:931: \$builddir/test_mat -v 5 -z -c int16 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int16 write_struct_2d_numeric" "mat5_compressed_write.at:931"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int16 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:931"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:933" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:933"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:934: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:934"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:934"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_382
#AT_START_383
at_fn_group_banner 383 'mat5_compressed_write.at:938' \
  "Write structure array with 2D 16-bit unsigned integer fields" "" 9
at_xfail=no
(
  $as_echo "383. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:939" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:939"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint16((1:12)),3,4);
    expdata(1).field2 = reshape(uint16((13:24)),3,4);
    expdata(2).field1 = reshape(uint16((25:36)),3,4);
    expdata(2).field2 = reshape(uint16((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:963: \$builddir/test_mat -v 5 -z -c uint16 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint16 write_struct_2d_numeric" "mat5_compressed_write.at:963"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint16 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:963"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:965" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:965"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:966: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:966"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:966"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_383
#AT_START_384
at_fn_group_banner 384 'mat5_compressed_write.at:970' \
  "Write structure array with 2D 8-bit signed integer fields" "" 9
at_xfail=no
(
  $as_echo "384. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:971" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:971"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int8((1:12)),3,4);
    expdata(1).field2 = reshape(int8((13:24)),3,4);
    expdata(2).field1 = reshape(int8((25:36)),3,4);
    expdata(2).field2 = reshape(int8((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:995: \$builddir/test_mat -v 5 -z -c int8 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int8 write_struct_2d_numeric" "mat5_compressed_write.at:995"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int8 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:995"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:997" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:997"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:998: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:998"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:998"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_384
#AT_START_385
at_fn_group_banner 385 'mat5_compressed_write.at:1002' \
  "Write structure array with 2D 8-bit unsigned integer fields" "" 9
at_xfail=no
(
  $as_echo "385. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1003" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1003"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint8((1:12)),3,4);
    expdata(1).field2 = reshape(uint8((13:24)),3,4);
    expdata(2).field1 = reshape(uint8((25:36)),3,4);
    expdata(2).field2 = reshape(uint8((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1027: \$builddir/test_mat -v 5 -z -c uint8 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint8 write_struct_2d_numeric" "mat5_compressed_write.at:1027"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint8 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1027"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1029" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1029"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1030: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1030"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1030"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_385
#AT_START_386
at_fn_group_banner 386 'mat5_compressed_write.at:1034' \
  "Write structure array with 2D double-precision complex fields" "" 9
at_xfail=no
(
  $as_echo "386. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1035" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1035"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape((1:12) + j*(51:62),3,4);
    expdata(1).field2 = reshape((13:24) + j*(63:74),3,4);
    expdata(2).field1 = reshape((25:36) + j*(75:86),3,4);
    expdata(2).field2 = reshape((37:48) + j*(87:98),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1059: \$builddir/test_mat -v 5 -z write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z write_struct_complex_2d_numeric" "mat5_compressed_write.at:1059"
( $at_check_trace; $builddir/test_mat -v 5 -z write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1059"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1061" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1061"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1062: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1062"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1062"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_386
#AT_START_387
at_fn_group_banner 387 'mat5_compressed_write.at:1066' \
  "Write structure array with 2D single-precision complex fields" "" 9
at_xfail=no
(
  $as_echo "387. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1067" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1067"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(single((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(single((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(single((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(single((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1091: \$builddir/test_mat -v 5 -z -c single write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c single write_struct_complex_2d_numeric" "mat5_compressed_write.at:1091"
( $at_check_trace; $builddir/test_mat -v 5 -z -c single write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1091"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1093" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1093"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1094: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1094"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1094"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_387
#AT_START_388
at_fn_group_banner 388 'mat5_compressed_write.at:1098' \
  "Write structure array with 2D 64-bit signed integer complex fields" "" 9
at_xfail=no
(
  $as_echo "388. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1099" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1099"
$as_echo "mat5_compressed_write.at:1100" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1100"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int64((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int64((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int64((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int64((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1124: \$builddir/test_mat -v 5 -z -c int64 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int64 write_struct_complex_2d_numeric" "mat5_compressed_write.at:1124"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int64 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1124"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1126" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1126"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1127: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1127"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1127"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_388
#AT_START_389
at_fn_group_banner 389 'mat5_compressed_write.at:1131' \
  "Write structure array with 2D 64-bit unsigned integer complex fields" "" 9
at_xfail=no
(
  $as_echo "389. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1132" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1132"
$as_echo "mat5_compressed_write.at:1133" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1133"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint64((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint64((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint64((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint64((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1157: \$builddir/test_mat -v 5 -z -c uint64 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint64 write_struct_complex_2d_numeric" "mat5_compressed_write.at:1157"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint64 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1157"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1159" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1159"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1160: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1160"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1160"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_389
#AT_START_390
at_fn_group_banner 390 'mat5_compressed_write.at:1164' \
  "Write structure array with 2D 32-bit signed integer complex fields" "" 9
at_xfail=no
(
  $as_echo "390. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1165" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1165"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int32((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int32((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int32((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int32((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1189: \$builddir/test_mat -v 5 -z -c int32 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int32 write_struct_complex_2d_numeric" "mat5_compressed_write.at:1189"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int32 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1189"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1191" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1191"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1192: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1192"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1192"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_390
#AT_START_391
at_fn_group_banner 391 'mat5_compressed_write.at:1196' \
  "Write structure array with 2D 32-bit unsigned integer complex fields" "" 9
at_xfail=no
(
  $as_echo "391. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1197" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1197"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint32((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint32((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint32((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint32((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1221: \$builddir/test_mat -v 5 -z -c uint32 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint32 write_struct_complex_2d_numeric" "mat5_compressed_write.at:1221"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint32 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1221"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1223" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1223"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1224: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1224"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1224"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_391
#AT_START_392
at_fn_group_banner 392 'mat5_compressed_write.at:1228' \
  "Write structure array with 2D 16-bit signed integer complex fields" "" 9
at_xfail=no
(
  $as_echo "392. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1229" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1229"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int16((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int16((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int16((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int16((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1253: \$builddir/test_mat -v 5 -z -c int16 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int16 write_struct_complex_2d_numeric" "mat5_compressed_write.at:1253"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int16 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1253"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1255" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1255"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1256: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1256"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1256"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_392
#AT_START_393
at_fn_group_banner 393 'mat5_compressed_write.at:1260' \
  "Write structure array with 2D 16-bit unsigned integer complex fields" "" 9
at_xfail=no
(
  $as_echo "393. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1261" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1261"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint16((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint16((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint16((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint16((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1285: \$builddir/test_mat -v 5 -z -c uint16 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint16 write_struct_complex_2d_numeric" "mat5_compressed_write.at:1285"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint16 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1285"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1287" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1287"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1288: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1288"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1288"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_393
#AT_START_394
at_fn_group_banner 394 'mat5_compressed_write.at:1292' \
  "Write structure array with 2D 8-bit signed integer complex fields" "" 9
at_xfail=no
(
  $as_echo "394. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1293" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1293"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int8((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int8((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int8((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int8((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1317: \$builddir/test_mat -v 5 -z -c int8 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int8 write_struct_complex_2d_numeric" "mat5_compressed_write.at:1317"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int8 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1317"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1319" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1319"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1320: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1320"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1320"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_394
#AT_START_395
at_fn_group_banner 395 'mat5_compressed_write.at:1324' \
  "Write structure array with 2D 8-bit unsigned integer complex fields" "" 9
at_xfail=no
(
  $as_echo "395. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1325" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1325"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint8((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint8((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint8((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint8((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1349: \$builddir/test_mat -v 5 -z -c uint8 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint8 write_struct_complex_2d_numeric" "mat5_compressed_write.at:1349"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint8 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1349"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1351" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1351"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1352: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1352"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1352"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_395
#AT_START_396
at_fn_group_banner 396 'mat5_compressed_write.at:1356' \
  "Write empty cell array" "                         " 9
at_xfail=no
(
  $as_echo "396. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1357" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1357"
cat >test_write_empty_cell.m <<'_ATEOF'

try
    load test_write_empty_cell.mat
    expdata1 = cell(0,1);
    expdata2 = {zeros(0,1);zeros(0,1)};
    pass = true;
    pass = pass && isequal(var1,expdata1);
    pass = pass && isequal(var2,expdata2);
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1375: \$builddir/test_mat -v 5 -z write_empty_cell"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z write_empty_cell" "mat5_compressed_write.at:1375"
( $at_check_trace; $builddir/test_mat -v 5 -z write_empty_cell
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1375"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1377" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1377"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1378: \$MATLABEXE -nosplash -nojvm -r 'test_write_empty_cell;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1378"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_empty_cell;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1378"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_396
#AT_START_397
at_fn_group_banner 397 'mat5_compressed_write.at:1382' \
  "Write cell array with 2D double-precision fields" "" 9
at_xfail=no
(
  $as_echo "397. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1383" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1383"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape((1:12),3,4);reshape((13:24),3,4);...
               reshape((25:36),3,4);reshape((37:48),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1405: \$builddir/test_mat -v 5 -z write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z write_cell_2d_numeric" "mat5_compressed_write.at:1405"
( $at_check_trace; $builddir/test_mat -v 5 -z write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1405"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1407" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1407"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1408: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1408"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1408"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_397
#AT_START_398
at_fn_group_banner 398 'mat5_compressed_write.at:1412' \
  "Write cell array with 2D single-precision fields" "" 9
at_xfail=no
(
  $as_echo "398. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1413" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1413"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(single((1:12)),3,4);reshape(single((13:24)),3,4);...
               reshape(single((25:36)),3,4);reshape(single((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1435: \$builddir/test_mat -v 5 -z -c single write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c single write_cell_2d_numeric" "mat5_compressed_write.at:1435"
( $at_check_trace; $builddir/test_mat -v 5 -z -c single write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1435"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1437" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1437"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1438: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1438"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1438"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_398
#AT_START_399
at_fn_group_banner 399 'mat5_compressed_write.at:1442' \
  "Write cell array with 2D 64-bit signed integer fields" "" 9
at_xfail=no
(
  $as_echo "399. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1443" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1443"
$as_echo "mat5_compressed_write.at:1444" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1444"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int64((1:12)),3,4);reshape(int64((13:24)),3,4);...
               reshape(int64((25:36)),3,4);reshape(int64((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1466: \$builddir/test_mat -v 5 -z -c int64 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int64 write_cell_2d_numeric" "mat5_compressed_write.at:1466"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int64 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1466"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1468" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1468"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1469: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1469"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1469"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_399
#AT_START_400
at_fn_group_banner 400 'mat5_compressed_write.at:1473' \
  "Write cell array with 2D 64-bit unsigned integer fields" "" 9
at_xfail=no
(
  $as_echo "400. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1474" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1474"
$as_echo "mat5_compressed_write.at:1475" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1475"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint64((1:12)),3,4);reshape(uint64((13:24)),3,4);...
               reshape(uint64((25:36)),3,4);reshape(uint64((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1497: \$builddir/test_mat -v 5 -z -c uint64 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint64 write_cell_2d_numeric" "mat5_compressed_write.at:1497"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint64 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1497"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1499" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1499"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1500: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1500"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1500"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_400
#AT_START_401
at_fn_group_banner 401 'mat5_compressed_write.at:1504' \
  "Write cell array with 2D 32-bit signed integer fields" "" 9
at_xfail=no
(
  $as_echo "401. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1505" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1505"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int32((1:12)),3,4);reshape(int32((13:24)),3,4);...
               reshape(int32((25:36)),3,4);reshape(int32((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1527: \$builddir/test_mat -v 5 -z -c int32 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int32 write_cell_2d_numeric" "mat5_compressed_write.at:1527"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int32 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1527"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1529" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1529"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1530: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1530"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1530"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_401
#AT_START_402
at_fn_group_banner 402 'mat5_compressed_write.at:1534' \
  "Write cell array with 2D 32-bit unsigned integer fields" "" 9
at_xfail=no
(
  $as_echo "402. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1535" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1535"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint32((1:12)),3,4);reshape(uint32((13:24)),3,4);...
               reshape(uint32((25:36)),3,4);reshape(uint32((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1557: \$builddir/test_mat -v 5 -z -c uint32 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint32 write_cell_2d_numeric" "mat5_compressed_write.at:1557"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint32 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1557"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1559" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1559"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1560: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1560"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1560"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_402
#AT_START_403
at_fn_group_banner 403 'mat5_compressed_write.at:1564' \
  "Write cell array with 2D 16-bit signed integer fields" "" 9
at_xfail=no
(
  $as_echo "403. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1565" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1565"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int16((1:12)),3,4);reshape(int16((13:24)),3,4);...
               reshape(int16((25:36)),3,4);reshape(int16((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1587: \$builddir/test_mat -v 5 -z -c int16 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int16 write_cell_2d_numeric" "mat5_compressed_write.at:1587"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int16 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1587"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1589" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1589"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1590: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1590"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1590"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_403
#AT_START_404
at_fn_group_banner 404 'mat5_compressed_write.at:1594' \
  "Write cell array with 2D 16-bit unsigned integer fields" "" 9
at_xfail=no
(
  $as_echo "404. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1595" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1595"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint16((1:12)),3,4);reshape(uint16((13:24)),3,4);...
               reshape(uint16((25:36)),3,4);reshape(uint16((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1617: \$builddir/test_mat -v 5 -z -c uint16 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint16 write_cell_2d_numeric" "mat5_compressed_write.at:1617"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint16 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1617"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1619" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1619"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1620: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1620"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1620"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_404
#AT_START_405
at_fn_group_banner 405 'mat5_compressed_write.at:1624' \
  "Write cell array with 2D 8-bit signed integer fields" "" 9
at_xfail=no
(
  $as_echo "405. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1625" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1625"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int8((1:12)),3,4);reshape(int8((13:24)),3,4);...
               reshape(int8((25:36)),3,4);reshape(int8((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1647: \$builddir/test_mat -v 5 -z -c int8 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int8 write_cell_2d_numeric" "mat5_compressed_write.at:1647"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int8 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1647"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1649" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1649"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1650: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1650"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1650"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_405
#AT_START_406
at_fn_group_banner 406 'mat5_compressed_write.at:1654' \
  "Write cell array with 2D 8-bit unsigned integer fields" "" 9
at_xfail=no
(
  $as_echo "406. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1655" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1655"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint8((1:12)),3,4);reshape(uint8((13:24)),3,4);...
               reshape(uint8((25:36)),3,4);reshape(uint8((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1677: \$builddir/test_mat -v 5 -z -c uint8 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint8 write_cell_2d_numeric" "mat5_compressed_write.at:1677"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint8 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1677"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1679" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1679"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1680: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1680"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1680"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_406
#AT_START_407
at_fn_group_banner 407 'mat5_compressed_write.at:1684' \
  "Write cell array with 2D double-precision complex fields" "" 9
at_xfail=no
(
  $as_echo "407. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1685" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1685"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape((1:12)+j*(51:62),3,4);...
               reshape((13:24)+j*(63:74),3,4);...
               reshape((25:36)+j*(75:86),3,4);...
               reshape((37:48)+j*(87:98),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1709: \$builddir/test_mat -v 5 -z write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z write_cell_complex_2d_numeric" "mat5_compressed_write.at:1709"
( $at_check_trace; $builddir/test_mat -v 5 -z write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1709"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1711" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1711"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1712: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1712"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1712"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_407
#AT_START_408
at_fn_group_banner 408 'mat5_compressed_write.at:1716' \
  "Write cell array with 2D single-precision complex fields" "" 9
at_xfail=no
(
  $as_echo "408. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1717" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1717"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(single((1:12)+j*(51:62)),3,4);...
               reshape(single((13:24)+j*(63:74)),3,4);...
               reshape(single((25:36)+j*(75:86)),3,4);...
               reshape(single((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1741: \$builddir/test_mat -v 5 -z -c single write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c single write_cell_complex_2d_numeric" "mat5_compressed_write.at:1741"
( $at_check_trace; $builddir/test_mat -v 5 -z -c single write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1741"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1743" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1743"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1744: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1744"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1744"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_408
#AT_START_409
at_fn_group_banner 409 'mat5_compressed_write.at:1748' \
  "Write cell array with 2D 64-bit signed integer complex fields" "" 9
at_xfail=no
(
  $as_echo "409. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1749" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1749"
$as_echo "mat5_compressed_write.at:1750" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1750"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int64((1:12)+j*(51:62)),3,4);...
               reshape(int64((13:24)+j*(63:74)),3,4);...
               reshape(int64((25:36)+j*(75:86)),3,4);...
               reshape(int64((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1774: \$builddir/test_mat -v 5 -z -c int64 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int64 write_cell_complex_2d_numeric" "mat5_compressed_write.at:1774"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int64 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1774"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1776" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1776"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1777: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1777"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1777"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_409
#AT_START_410
at_fn_group_banner 410 'mat5_compressed_write.at:1781' \
  "Write cell array with 2D 64-bit unsigned integer complex fields" "" 9
at_xfail=no
(
  $as_echo "410. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1782" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1782"
$as_echo "mat5_compressed_write.at:1783" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1783"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint64((1:12)+j*(51:62)),3,4);...
               reshape(uint64((13:24)+j*(63:74)),3,4);...
               reshape(uint64((25:36)+j*(75:86)),3,4);...
               reshape(uint64((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1807: \$builddir/test_mat -v 5 -z -c uint64 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint64 write_cell_complex_2d_numeric" "mat5_compressed_write.at:1807"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint64 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1807"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1809" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1809"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1810: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1810"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1810"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_410
#AT_START_411
at_fn_group_banner 411 'mat5_compressed_write.at:1814' \
  "Write cell array with 2D 32-bit signed integer complex fields" "" 9
at_xfail=no
(
  $as_echo "411. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1815" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1815"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int32((1:12)+j*(51:62)),3,4);...
               reshape(int32((13:24)+j*(63:74)),3,4);...
               reshape(int32((25:36)+j*(75:86)),3,4);...
               reshape(int32((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1839: \$builddir/test_mat -v 5 -z -c int32 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int32 write_cell_complex_2d_numeric" "mat5_compressed_write.at:1839"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int32 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1839"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1841" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1841"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1842: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1842"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1842"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_411
#AT_START_412
at_fn_group_banner 412 'mat5_compressed_write.at:1846' \
  "Write cell array with 2D 32-bit unsigned integer complex fields" "" 9
at_xfail=no
(
  $as_echo "412. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1847" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1847"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint32((1:12)+j*(51:62)),3,4);...
               reshape(uint32((13:24)+j*(63:74)),3,4);...
               reshape(uint32((25:36)+j*(75:86)),3,4);...
               reshape(uint32((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1871: \$builddir/test_mat -v 5 -z -c uint32 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint32 write_cell_complex_2d_numeric" "mat5_compressed_write.at:1871"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint32 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1871"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1873" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1873"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1874: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1874"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1874"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_412
#AT_START_413
at_fn_group_banner 413 'mat5_compressed_write.at:1878' \
  "Write cell array with 2D 16-bit signed integer complex fields" "" 9
at_xfail=no
(
  $as_echo "413. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1879" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1879"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int16((1:12)+j*(51:62)),3,4);...
               reshape(int16((13:24)+j*(63:74)),3,4);...
               reshape(int16((25:36)+j*(75:86)),3,4);...
               reshape(int16((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1903: \$builddir/test_mat -v 5 -z -c int16 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int16 write_cell_complex_2d_numeric" "mat5_compressed_write.at:1903"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int16 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1903"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1905" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1905"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1906: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1906"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1906"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_413
#AT_START_414
at_fn_group_banner 414 'mat5_compressed_write.at:1910' \
  "Write cell array with 2D 16-bit unsigned integer complex fields" "" 9
at_xfail=no
(
  $as_echo "414. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1911" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1911"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint16((1:12)+j*(51:62)),3,4);...
               reshape(uint16((13:24)+j*(63:74)),3,4);...
               reshape(uint16((25:36)+j*(75:86)),3,4);...
               reshape(uint16((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1935: \$builddir/test_mat -v 5 -z -c uint16 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint16 write_cell_complex_2d_numeric" "mat5_compressed_write.at:1935"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint16 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1935"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1937" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1937"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1938: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1938"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1938"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_414
#AT_START_415
at_fn_group_banner 415 'mat5_compressed_write.at:1942' \
  "Write cell array with 2D 8-bit signed integer complex fields" "" 9
at_xfail=no
(
  $as_echo "415. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1943" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1943"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int8((1:12)+j*(51:62)),3,4);...
               reshape(int8((13:24)+j*(63:74)),3,4);...
               reshape(int8((25:36)+j*(75:86)),3,4);...
               reshape(int8((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1967: \$builddir/test_mat -v 5 -z -c int8 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int8 write_cell_complex_2d_numeric" "mat5_compressed_write.at:1967"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int8 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1967"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1969" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1969"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1970: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1970"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1970"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_415
#AT_START_416
at_fn_group_banner 416 'mat5_compressed_write.at:1974' \
  "Write cell array with 2D 8-bit unsigned integer complex fields" "" 9
at_xfail=no
(
  $as_echo "416. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1975" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1975"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint8((1:12)+j*(51:62)),3,4);...
               reshape(uint8((13:24)+j*(63:74)),3,4);...
               reshape(uint8((25:36)+j*(75:86)),3,4);...
               reshape(uint8((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1999: \$builddir/test_mat -v 5 -z -c uint8 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint8 write_cell_complex_2d_numeric" "mat5_compressed_write.at:1999"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint8 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1999"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:2001" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2001"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2002: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:2002"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2002"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_416
#AT_START_417
at_fn_group_banner 417 'mat73_write.at:17' \
  "Write 2D double-precision array" "                " 10
at_xfail=no
(
  $as_echo "417. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:18" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:18"
cat >test_write_2d_numeric_double.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = reshape(1:50,5,10);
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:37: \$builddir/test_mat -v 7.3 -c double write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c double write_2d_numeric" "mat73_write.at:37"
( $at_check_trace; $builddir/test_mat -v 7.3 -c double write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:37"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:39" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:39"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:40: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:40"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:40"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_417
#AT_START_418
at_fn_group_banner 418 'mat73_write.at:44' \
  "Write 2D single-precision array" "                " 10
at_xfail=no
(
  $as_echo "418. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:45" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:45"
cat >test_write_2d_numeric_single.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = single(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:64: \$builddir/test_mat -v 7.3 -c single write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c single write_2d_numeric" "mat73_write.at:64"
( $at_check_trace; $builddir/test_mat -v 7.3 -c single write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:64"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:66" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:66"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:67: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_single;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:67"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_single;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:67"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_418
#AT_START_419
at_fn_group_banner 419 'mat73_write.at:71' \
  "Write 2D 64-bit integer array" "                  " 10
at_xfail=no
(
  $as_echo "419. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:72" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:72"
$as_echo "mat73_write.at:73" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:73"
cat >test_write_2d_numeric_int64.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int64(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:92: \$builddir/test_mat -v 7.3 -c int64 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int64 write_2d_numeric" "mat73_write.at:92"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int64 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:92"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:94" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:94"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:95: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:95"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:95"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_419
#AT_START_420
at_fn_group_banner 420 'mat73_write.at:99' \
  "Write 2D 64-bit unsigned integer array" "         " 10
at_xfail=no
(
  $as_echo "420. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:100" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:100"
$as_echo "mat73_write.at:101" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:101"
cat >test_write_2d_numeric_int64.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint64(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:120: \$builddir/test_mat -v 7.3 -c uint64 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint64 write_2d_numeric" "mat73_write.at:120"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint64 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:120"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:122" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:122"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:123: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:123"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:123"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_420
#AT_START_421
at_fn_group_banner 421 'mat73_write.at:127' \
  "Write 2D 32-bit integer array" "                  " 10
at_xfail=no
(
  $as_echo "421. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:128" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:128"
cat >test_write_2d_numeric_int32.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int32(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:147: \$builddir/test_mat -v 7.3 -c int32 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int32 write_2d_numeric" "mat73_write.at:147"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int32 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:147"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:149" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:149"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:150: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:150"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:150"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_421
#AT_START_422
at_fn_group_banner 422 'mat73_write.at:154' \
  "Write 2D 32-bit unsigned integer array" "         " 10
at_xfail=no
(
  $as_echo "422. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:155" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:155"
cat >test_write_2d_numeric_int32.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint32(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:174: \$builddir/test_mat -v 7.3 -c uint32 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint32 write_2d_numeric" "mat73_write.at:174"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint32 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:174"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:176" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:176"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:177: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:177"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:177"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_422
#AT_START_423
at_fn_group_banner 423 'mat73_write.at:181' \
  "Write 2D 16-bit integer array" "                  " 10
at_xfail=no
(
  $as_echo "423. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:182" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:182"
cat >test_write_2d_numeric_int16.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int16(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:201: \$builddir/test_mat -v 7.3 -c int16 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int16 write_2d_numeric" "mat73_write.at:201"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int16 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:201"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:203" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:203"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:204: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:204"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:204"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_423
#AT_START_424
at_fn_group_banner 424 'mat73_write.at:208' \
  "Write 2D 16-bit unsigned integer array" "         " 10
at_xfail=no
(
  $as_echo "424. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:209" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:209"
cat >test_write_2d_numeric_int16.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint16(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:228: \$builddir/test_mat -v 7.3 -c uint16 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint16 write_2d_numeric" "mat73_write.at:228"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint16 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:228"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:230" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:230"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:231: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:231"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:231"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_424
#AT_START_425
at_fn_group_banner 425 'mat73_write.at:235' \
  "Write 2D 8-bit integer array" "                   " 10
at_xfail=no
(
  $as_echo "425. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:236" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:236"
cat >test_write_2d_numeric_int8.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int8(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:255: \$builddir/test_mat -v 7.3 -c int8 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int8 write_2d_numeric" "mat73_write.at:255"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int8 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:255"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:257" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:257"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:258: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:258"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:258"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_425
#AT_START_426
at_fn_group_banner 426 'mat73_write.at:262' \
  "Write 2D 8-bit unsigned integer array" "          " 10
at_xfail=no
(
  $as_echo "426. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:263" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:263"
cat >test_write_2d_numeric_int8.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint8(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:282: \$builddir/test_mat -v 7.3 -c uint8 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint8 write_2d_numeric" "mat73_write.at:282"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint8 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:282"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:284" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:284"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:285: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:285"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:285"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_426
#AT_START_427
at_fn_group_banner 427 'mat73_write.at:289' \
  "Write 2D double-precision complex array" "        " 10
at_xfail=no
(
  $as_echo "427. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:290" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:290"
cat >test_write_complex_2d_numeric_double.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = reshape((1:50) + j*(51:100),5,10);
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:309: \$builddir/test_mat -v 7.3 -c double write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c double write_complex_2d_numeric" "mat73_write.at:309"
( $at_check_trace; $builddir/test_mat -v 7.3 -c double write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:309"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:311" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:311"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:312: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:312"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:312"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_427
#AT_START_428
at_fn_group_banner 428 'mat73_write.at:316' \
  "Write 2D single-precision complex array" "        " 10
at_xfail=no
(
  $as_echo "428. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:317" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:317"
cat >test_write_complex_2d_numeric_single.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = single(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:336: \$builddir/test_mat -v 7.3 -c single write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c single write_complex_2d_numeric" "mat73_write.at:336"
( $at_check_trace; $builddir/test_mat -v 7.3 -c single write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:336"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:338" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:338"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:339: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_single;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:339"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_single;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:339"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_428
#AT_START_429
at_fn_group_banner 429 'mat73_write.at:343' \
  "Write 2D 64-bit integer complex array" "          " 10
at_xfail=no
(
  $as_echo "429. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:344" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:344"
$as_echo "mat73_write.at:345" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:345"
cat >test_write_complex_2d_numeric_int64.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int64(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:364: \$builddir/test_mat -v 7.3 -c int64 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int64 write_complex_2d_numeric" "mat73_write.at:364"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int64 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:364"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:366" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:366"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:367: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:367"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:367"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_429
#AT_START_430
at_fn_group_banner 430 'mat73_write.at:371' \
  "Write 2D 64-bit unsigned integer complex array" " " 10
at_xfail=no
(
  $as_echo "430. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:372" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:372"
$as_echo "mat73_write.at:373" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:373"
cat >test_write_complex_2d_numeric_uint64.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint64(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:392: \$builddir/test_mat -v 7.3 -c uint64 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint64 write_complex_2d_numeric" "mat73_write.at:392"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint64 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:392"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:394" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:394"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:395: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:395"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:395"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_430
#AT_START_431
at_fn_group_banner 431 'mat73_write.at:399' \
  "Write 2D 32-bit integer complex array" "          " 10
at_xfail=no
(
  $as_echo "431. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:400" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:400"
cat >test_write_complex_2d_numeric_int32.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int32(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:419: \$builddir/test_mat -v 7.3 -c int32 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int32 write_complex_2d_numeric" "mat73_write.at:419"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int32 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:419"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:421" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:421"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:422: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:422"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:422"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_431
#AT_START_432
at_fn_group_banner 432 'mat73_write.at:426' \
  "Write 2D 32-bit unsigned integer complex array" " " 10
at_xfail=no
(
  $as_echo "432. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:427" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:427"
cat >test_write_complex_2d_numeric_uint32.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint32(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:446: \$builddir/test_mat -v 7.3 -c uint32 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint32 write_complex_2d_numeric" "mat73_write.at:446"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint32 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:446"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:448" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:448"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:449: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:449"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:449"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_432
#AT_START_433
at_fn_group_banner 433 'mat73_write.at:453' \
  "Write 2D 16-bit integer complex array" "          " 10
at_xfail=no
(
  $as_echo "433. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:454" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:454"
cat >test_write_complex_2d_numeric_int16.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int16(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:473: \$builddir/test_mat -v 7.3 -c int16 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int16 write_complex_2d_numeric" "mat73_write.at:473"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int16 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:473"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:475" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:475"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:476: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:476"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:476"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_433
#AT_START_434
at_fn_group_banner 434 'mat73_write.at:480' \
  "Write 2D 16-bit unsigned integer complex array" " " 10
at_xfail=no
(
  $as_echo "434. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:481" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:481"
cat >test_write_complex_2d_numeric_uint16.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint16(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:500: \$builddir/test_mat -v 7.3 -c uint16 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint16 write_complex_2d_numeric" "mat73_write.at:500"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint16 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:500"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:502" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:502"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:503: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:503"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:503"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_434
#AT_START_435
at_fn_group_banner 435 'mat73_write.at:507' \
  "Write 2D 8-bit integer complex array" "           " 10
at_xfail=no
(
  $as_echo "435. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:508" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:508"
cat >test_write_complex_2d_numeric_int8.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int8(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:527: \$builddir/test_mat -v 7.3 -c int8 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int8 write_complex_2d_numeric" "mat73_write.at:527"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int8 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:527"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:529" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:529"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:530: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:530"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:530"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_435
#AT_START_436
at_fn_group_banner 436 'mat73_write.at:534' \
  "Write 2D 8-bit unsigned integer complex array" "  " 10
at_xfail=no
(
  $as_echo "436. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:535" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:535"
cat >test_write_complex_2d_numeric_uint8.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint8(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:554: \$builddir/test_mat -v 7.3 -c uint8 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint8 write_complex_2d_numeric" "mat73_write.at:554"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint8 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:554"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:556" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:556"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:557: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:557"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:557"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_436
#AT_START_437
at_fn_group_banner 437 'mat73_write.at:561' \
  "Write 2D sparse double-precision array" "         " 10
at_xfail=no
(
  $as_echo "437. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:562" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:562"
cat >test_write_sparse_double.m <<'_ATEOF'

try
    load test_write_sparse.mat
    expdata = zeros(5,10);
    expdata(1:4:end,1:2:end) = 1;
    expdata(2:4,2:2:end) = 1;
    expdata = expdata.*reshape(1:50,5,10);
    pass = true;
    pass = pass && isa(sparse_matrix,class(expdata));
    pass = pass && issparse(sparse_matrix);
    pass = pass && all(size(sparse_matrix)==size(expdata));
    pass = pass && all(sparse_matrix(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:585: \$builddir/test_mat -v 7.3 -c double write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c double write_sparse" "mat73_write.at:585"
( $at_check_trace; $builddir/test_mat -v 7.3 -c double write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:585"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:587" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:587"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:588: \$MATLABEXE -nosplash -nojvm -r 'test_write_sparse_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:588"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_sparse_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:588"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_437
#AT_START_438
at_fn_group_banner 438 'mat73_write.at:592' \
  "Write 2D sparse complex double-precision array" " " 10
at_xfail=no
(
  $as_echo "438. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:593" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:593"
cat >test_write_sparse_complex_double.m <<'_ATEOF'

try
    load test_write_sparse_complex.mat
    expdata = zeros(5,10);
    expdata(1:4:end,1:2:end) = 1;
    expdata(2:4,2:2:end) = 1;
    expdata = expdata.*reshape((1:50) + j*(51:100),5,10);
    pass = true;
    pass = pass && isa(sparse_matrix,class(expdata));
    pass = pass && issparse(sparse_matrix);
    pass = pass && all(size(sparse_matrix)==size(expdata));
    pass = pass && all(sparse_matrix(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:616: \$builddir/test_mat -v 7.3 -c double write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c double write_complex_sparse" "mat73_write.at:616"
( $at_check_trace; $builddir/test_mat -v 7.3 -c double write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:616"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:618" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:618"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:619: \$MATLABEXE -nosplash -nojvm -r 'test_write_sparse_complex_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:619"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_sparse_complex_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:619"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_438
#AT_START_439
at_fn_group_banner 439 'mat73_write.at:623' \
  "Write 2D empty array" "                           " 10
at_xfail=no
(
  $as_echo "439. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:624" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:624"
cat >test_write_empty.m <<'_ATEOF'

try
    load test_write_empty_2d_numeric.mat
    expdata = zeros(0,10);
    pass = true;
    pass = pass && isa(empty,class(expdata));
    pass = pass && isempty(empty);
    pass = pass && all(size(empty)==size(expdata));
    pass = pass && all(empty(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:644: \$builddir/test_mat -v 7.3 -c double write_empty_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c double write_empty_2d_numeric" "mat73_write.at:644"
( $at_check_trace; $builddir/test_mat -v 7.3 -c double write_empty_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:644"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:646" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:646"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:647: \$MATLABEXE -nosplash -nojvm -r 'test_write_empty;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:647"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_empty;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:647"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_439
#AT_START_440
at_fn_group_banner 440 'mat73_write.at:651' \
  "Write character array" "                          " 10
at_xfail=no
(
  $as_echo "440. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:652" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:652"
cat >test_write_char.m <<'_ATEOF'

try
    load test_write_char.mat
    expdata = ['abcdefghijklmnopqrstuvwxyz';
               'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
               '1234567890!@#$%^&*()-_=+`~';
               '[{]}\|;:''",<.>/?          '];
    pass = true;
    pass = pass && isequal(expdata,a);
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:672: \$builddir/test_mat -v 7.3 write_char"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 write_char" "mat73_write.at:672"
( $at_check_trace; $builddir/test_mat -v 7.3 write_char
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:672"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:673" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:673"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:674: \$MATLABEXE -nosplash -nojvm -r 'test_write_char;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:674"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_char;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:674"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_440
#AT_START_441
at_fn_group_banner 441 'mat73_write.at:678' \
  "Write empty structure array" "                    " 10
at_xfail=no
(
  $as_echo "441. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:679" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:679"
cat >test_write_empty_struct.m <<'_ATEOF'

try
    load test_write_empty_struct.mat
    expdata1 = repmat(struct,0,1);
    expdata2 = repmat(struct('field1',zeros(0,0),'field2',zeros(0,0)),0,1);
    expdata3 = struct('field1',zeros(0,1),'field2',zeros(0,1));
    expdata4(1).field1 = zeros(0,1);
    expdata4(1).field2 = repmat(' ',0,1);
    expdata4(2).field1 = repmat(struct,0,1);
    expdata4(2).field2 = repmat({zeros(0,0)},0,1);
    pass = true;
    pass = pass && isequal(var1,expdata1);
    pass = pass && isequal(var2,expdata2);
    pass = pass && isequal(var3,expdata3);
    pass = pass && isequal(var4,expdata4(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:705: \$builddir/test_mat -v 7.3 write_empty_struct"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 write_empty_struct" "mat73_write.at:705"
( $at_check_trace; $builddir/test_mat -v 7.3 write_empty_struct
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:705"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:707" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:707"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:708: \$MATLABEXE -nosplash -nojvm -r 'test_write_empty_struct;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:708"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_empty_struct;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:708"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_441
#AT_START_442
at_fn_group_banner 442 'mat73_write.at:712' \
  "Write structure array with 2D double-precision fields" "" 10
at_xfail=no
(
  $as_echo "442. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:713" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:713"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape((1:12),3,4);
    expdata(1).field2 = reshape((13:24),3,4);
    expdata(2).field1 = reshape((25:36),3,4);
    expdata(2).field2 = reshape((37:48),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:737: \$builddir/test_mat -v 7.3 -z write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z write_struct_2d_numeric" "mat73_write.at:737"
( $at_check_trace; $builddir/test_mat -v 7.3 -z write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:737"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:739" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:739"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:740: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:740"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:740"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_442
#AT_START_443
at_fn_group_banner 443 'mat73_write.at:744' \
  "Write structure array with 2D single-precision fields" "" 10
at_xfail=no
(
  $as_echo "443. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:745" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:745"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(single((1:12)),3,4);
    expdata(1).field2 = reshape(single((13:24)),3,4);
    expdata(2).field1 = reshape(single((25:36)),3,4);
    expdata(2).field2 = reshape(single((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:769: \$builddir/test_mat -v 7.3 -c single write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c single write_struct_2d_numeric" "mat73_write.at:769"
( $at_check_trace; $builddir/test_mat -v 7.3 -c single write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:769"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:771" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:771"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:772: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:772"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:772"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_443
#AT_START_444
at_fn_group_banner 444 'mat73_write.at:776' \
  "Write structure array with 2D 64-bit signed integer fields" "" 10
at_xfail=no
(
  $as_echo "444. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:777" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:777"
$as_echo "mat73_write.at:778" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:778"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int64((1:12)),3,4);
    expdata(1).field2 = reshape(int64((13:24)),3,4);
    expdata(2).field1 = reshape(int64((25:36)),3,4);
    expdata(2).field2 = reshape(int64((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:802: \$builddir/test_mat -v 7.3 -c int64 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int64 write_struct_2d_numeric" "mat73_write.at:802"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int64 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:802"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:804" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:804"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:805: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:805"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:805"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_444
#AT_START_445
at_fn_group_banner 445 'mat73_write.at:809' \
  "Write structure array with 2D 64-bit unsigned integer fields" "" 10
at_xfail=no
(
  $as_echo "445. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:810" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:810"
$as_echo "mat73_write.at:811" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:811"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint64((1:12)),3,4);
    expdata(1).field2 = reshape(uint64((13:24)),3,4);
    expdata(2).field1 = reshape(uint64((25:36)),3,4);
    expdata(2).field2 = reshape(uint64((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:835: \$builddir/test_mat -v 7.3 -c uint64 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint64 write_struct_2d_numeric" "mat73_write.at:835"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint64 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:835"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:837" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:837"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:838: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:838"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:838"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_445
#AT_START_446
at_fn_group_banner 446 'mat73_write.at:842' \
  "Write structure array with 2D 32-bit signed integer fields" "" 10
at_xfail=no
(
  $as_echo "446. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:843" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:843"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int32((1:12)),3,4);
    expdata(1).field2 = reshape(int32((13:24)),3,4);
    expdata(2).field1 = reshape(int32((25:36)),3,4);
    expdata(2).field2 = reshape(int32((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:867: \$builddir/test_mat -v 7.3 -c int32 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int32 write_struct_2d_numeric" "mat73_write.at:867"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int32 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:867"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:869" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:869"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:870: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:870"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:870"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_446
#AT_START_447
at_fn_group_banner 447 'mat73_write.at:874' \
  "Write structure array with 2D 32-bit unsigned integer fields" "" 10
at_xfail=no
(
  $as_echo "447. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:875" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:875"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint32((1:12)),3,4);
    expdata(1).field2 = reshape(uint32((13:24)),3,4);
    expdata(2).field1 = reshape(uint32((25:36)),3,4);
    expdata(2).field2 = reshape(uint32((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:899: \$builddir/test_mat -v 7.3 -c uint32 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint32 write_struct_2d_numeric" "mat73_write.at:899"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint32 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:899"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:901" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:901"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:902: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:902"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:902"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_447
#AT_START_448
at_fn_group_banner 448 'mat73_write.at:906' \
  "Write structure array with 2D 16-bit signed integer fields" "" 10
at_xfail=no
(
  $as_echo "448. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:907" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:907"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int16((1:12)),3,4);
    expdata(1).field2 = reshape(int16((13:24)),3,4);
    expdata(2).field1 = reshape(int16((25:36)),3,4);
    expdata(2).field2 = reshape(int16((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:931: \$builddir/test_mat -v 7.3 -c int16 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int16 write_struct_2d_numeric" "mat73_write.at:931"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int16 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:931"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:933" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:933"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:934: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:934"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:934"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_448
#AT_START_449
at_fn_group_banner 449 'mat73_write.at:938' \
  "Write structure array with 2D 16-bit unsigned integer fields" "" 10
at_xfail=no
(
  $as_echo "449. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:939" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:939"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint16((1:12)),3,4);
    expdata(1).field2 = reshape(uint16((13:24)),3,4);
    expdata(2).field1 = reshape(uint16((25:36)),3,4);
    expdata(2).field2 = reshape(uint16((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:963: \$builddir/test_mat -v 7.3 -c uint16 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint16 write_struct_2d_numeric" "mat73_write.at:963"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint16 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:963"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:965" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:965"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:966: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:966"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:966"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_449
#AT_START_450
at_fn_group_banner 450 'mat73_write.at:970' \
  "Write structure array with 2D 8-bit signed integer fields" "" 10
at_xfail=no
(
  $as_echo "450. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:971" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:971"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int8((1:12)),3,4);
    expdata(1).field2 = reshape(int8((13:24)),3,4);
    expdata(2).field1 = reshape(int8((25:36)),3,4);
    expdata(2).field2 = reshape(int8((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:995: \$builddir/test_mat -v 7.3 -c int8 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int8 write_struct_2d_numeric" "mat73_write.at:995"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int8 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:995"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:997" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:997"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:998: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:998"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:998"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_450
#AT_START_451
at_fn_group_banner 451 'mat73_write.at:1002' \
  "Write structure array with 2D 8-bit unsigned integer fields" "" 10
at_xfail=no
(
  $as_echo "451. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1003" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1003"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint8((1:12)),3,4);
    expdata(1).field2 = reshape(uint8((13:24)),3,4);
    expdata(2).field1 = reshape(uint8((25:36)),3,4);
    expdata(2).field2 = reshape(uint8((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1027: \$builddir/test_mat -v 7.3 -c uint8 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint8 write_struct_2d_numeric" "mat73_write.at:1027"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint8 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1027"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1029" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1029"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1030: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1030"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1030"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_451
#AT_START_452
at_fn_group_banner 452 'mat73_write.at:1034' \
  "Write structure array with 2D double-precision complex fields" "" 10
at_xfail=no
(
  $as_echo "452. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1035" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1035"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape((1:12) + j*(51:62),3,4);
    expdata(1).field2 = reshape((13:24) + j*(63:74),3,4);
    expdata(2).field1 = reshape((25:36) + j*(75:86),3,4);
    expdata(2).field2 = reshape((37:48) + j*(87:98),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1059: \$builddir/test_mat -v 7.3 -z write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z write_struct_complex_2d_numeric" "mat73_write.at:1059"
( $at_check_trace; $builddir/test_mat -v 7.3 -z write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1059"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1061" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1061"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1062: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1062"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1062"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_452
#AT_START_453
at_fn_group_banner 453 'mat73_write.at:1066' \
  "Write structure array with 2D single-precision complex fields" "" 10
at_xfail=no
(
  $as_echo "453. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1067" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1067"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(single((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(single((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(single((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(single((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1091: \$builddir/test_mat -v 7.3 -c single write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c single write_struct_complex_2d_numeric" "mat73_write.at:1091"
( $at_check_trace; $builddir/test_mat -v 7.3 -c single write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1091"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1093" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1093"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1094: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1094"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1094"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_453
#AT_START_454
at_fn_group_banner 454 'mat73_write.at:1098' \
  "Write structure array with 2D 64-bit signed integer complex fields" "" 10
at_xfail=no
(
  $as_echo "454. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1099" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1099"
$as_echo "mat73_write.at:1100" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1100"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int64((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int64((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int64((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int64((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1124: \$builddir/test_mat -v 7.3 -c int64 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int64 write_struct_complex_2d_numeric" "mat73_write.at:1124"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int64 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1124"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1126" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1126"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1127: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1127"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1127"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_454
#AT_START_455
at_fn_group_banner 455 'mat73_write.at:1131' \
  "Write structure array with 2D 64-bit unsigned integer complex fields" "" 10
at_xfail=no
(
  $as_echo "455. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1132" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1132"
$as_echo "mat73_write.at:1133" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1133"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint64((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint64((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint64((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint64((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1157: \$builddir/test_mat -v 7.3 -c uint64 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint64 write_struct_complex_2d_numeric" "mat73_write.at:1157"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint64 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1157"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1159" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1159"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1160: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1160"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1160"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_455
#AT_START_456
at_fn_group_banner 456 'mat73_write.at:1164' \
  "Write structure array with 2D 32-bit signed integer complex fields" "" 10
at_xfail=no
(
  $as_echo "456. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1165" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1165"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int32((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int32((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int32((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int32((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1189: \$builddir/test_mat -v 7.3 -c int32 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int32 write_struct_complex_2d_numeric" "mat73_write.at:1189"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int32 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1189"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1191" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1191"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1192: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1192"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1192"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_456
#AT_START_457
at_fn_group_banner 457 'mat73_write.at:1196' \
  "Write structure array with 2D 32-bit unsigned integer complex fields" "" 10
at_xfail=no
(
  $as_echo "457. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1197" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1197"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint32((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint32((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint32((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint32((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1221: \$builddir/test_mat -v 7.3 -c uint32 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint32 write_struct_complex_2d_numeric" "mat73_write.at:1221"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint32 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1221"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1223" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1223"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1224: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1224"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1224"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_457
#AT_START_458
at_fn_group_banner 458 'mat73_write.at:1228' \
  "Write structure array with 2D 16-bit signed integer complex fields" "" 10
at_xfail=no
(
  $as_echo "458. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1229" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1229"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int16((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int16((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int16((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int16((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1253: \$builddir/test_mat -v 7.3 -c int16 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int16 write_struct_complex_2d_numeric" "mat73_write.at:1253"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int16 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1253"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1255" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1255"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1256: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1256"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1256"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_458
#AT_START_459
at_fn_group_banner 459 'mat73_write.at:1260' \
  "Write structure array with 2D 16-bit unsigned integer complex fields" "" 10
at_xfail=no
(
  $as_echo "459. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1261" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1261"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint16((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint16((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint16((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint16((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1285: \$builddir/test_mat -v 7.3 -c uint16 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint16 write_struct_complex_2d_numeric" "mat73_write.at:1285"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint16 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1285"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1287" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1287"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1288: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1288"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1288"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_459
#AT_START_460
at_fn_group_banner 460 'mat73_write.at:1292' \
  "Write structure array with 2D 8-bit signed integer complex fields" "" 10
at_xfail=no
(
  $as_echo "460. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1293" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1293"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int8((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int8((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int8((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int8((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1317: \$builddir/test_mat -v 7.3 -c int8 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int8 write_struct_complex_2d_numeric" "mat73_write.at:1317"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int8 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1317"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1319" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1319"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1320: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1320"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1320"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_460
#AT_START_461
at_fn_group_banner 461 'mat73_write.at:1324' \
  "Write structure array with 2D 8-bit unsigned integer complex fields" "" 10
at_xfail=no
(
  $as_echo "461. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1325" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1325"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint8((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint8((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint8((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint8((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1349: \$builddir/test_mat -v 7.3 -c uint8 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint8 write_struct_complex_2d_numeric" "mat73_write.at:1349"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint8 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1349"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1351" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1351"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1352: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1352"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1352"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_461
#AT_START_462
at_fn_group_banner 462 'mat73_write.at:1356' \
  "Write empty cell array" "                         " 10
at_xfail=no
(
  $as_echo "462. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1357" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1357"
cat >test_write_empty_cell.m <<'_ATEOF'

try
    load test_write_empty_cell.mat
    expdata1 = cell(0,1);
    expdata2 = {zeros(0,1);zeros(0,1)};
    pass = true;
    pass = pass && isequal(var1,expdata1);
    pass = pass && isequal(var2,expdata2);
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1375: \$builddir/test_mat -v 7.3 write_empty_cell"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 write_empty_cell" "mat73_write.at:1375"
( $at_check_trace; $builddir/test_mat -v 7.3 write_empty_cell
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1375"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1377" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1377"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1378: \$MATLABEXE -nosplash -nojvm -r 'test_write_empty_cell;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1378"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_empty_cell;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1378"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_462
#AT_START_463
at_fn_group_banner 463 'mat73_write.at:1382' \
  "Write cell array with 2D double-precision fields" "" 10
at_xfail=no
(
  $as_echo "463. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1383" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1383"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape((1:12),3,4);reshape((13:24),3,4);...
               reshape((25:36),3,4);reshape((37:48),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1405: \$builddir/test_mat -v 7.3 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 write_cell_2d_numeric" "mat73_write.at:1405"
( $at_check_trace; $builddir/test_mat -v 7.3 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1405"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1407" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1407"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1408: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1408"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1408"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_463
#AT_START_464
at_fn_group_banner 464 'mat73_write.at:1412' \
  "Write cell array with 2D single-precision fields" "" 10
at_xfail=no
(
  $as_echo "464. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1413" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1413"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(single((1:12)),3,4);reshape(single((13:24)),3,4);...
               reshape(single((25:36)),3,4);reshape(single((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1435: \$builddir/test_mat -v 7.3 -c single write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c single write_cell_2d_numeric" "mat73_write.at:1435"
( $at_check_trace; $builddir/test_mat -v 7.3 -c single write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1435"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1437" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1437"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1438: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1438"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1438"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_464
#AT_START_465
at_fn_group_banner 465 'mat73_write.at:1442' \
  "Write cell array with 2D 64-bit signed integer fields" "" 10
at_xfail=no
(
  $as_echo "465. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1443" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1443"
$as_echo "mat73_write.at:1444" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1444"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int64((1:12)),3,4);reshape(int64((13:24)),3,4);...
               reshape(int64((25:36)),3,4);reshape(int64((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1466: \$builddir/test_mat -v 7.3 -c int64 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int64 write_cell_2d_numeric" "mat73_write.at:1466"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int64 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1466"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1468" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1468"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1469: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1469"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1469"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_465
#AT_START_466
at_fn_group_banner 466 'mat73_write.at:1473' \
  "Write cell array with 2D 64-bit unsigned integer fields" "" 10
at_xfail=no
(
  $as_echo "466. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1474" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1474"
$as_echo "mat73_write.at:1475" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1475"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint64((1:12)),3,4);reshape(uint64((13:24)),3,4);...
               reshape(uint64((25:36)),3,4);reshape(uint64((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1497: \$builddir/test_mat -v 7.3 -c uint64 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint64 write_cell_2d_numeric" "mat73_write.at:1497"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint64 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1497"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1499" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1499"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1500: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1500"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1500"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_466
#AT_START_467
at_fn_group_banner 467 'mat73_write.at:1504' \
  "Write cell array with 2D 32-bit signed integer fields" "" 10
at_xfail=no
(
  $as_echo "467. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1505" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1505"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int32((1:12)),3,4);reshape(int32((13:24)),3,4);...
               reshape(int32((25:36)),3,4);reshape(int32((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1527: \$builddir/test_mat -v 7.3 -c int32 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int32 write_cell_2d_numeric" "mat73_write.at:1527"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int32 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1527"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1529" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1529"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1530: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1530"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1530"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_467
#AT_START_468
at_fn_group_banner 468 'mat73_write.at:1534' \
  "Write cell array with 2D 32-bit unsigned integer fields" "" 10
at_xfail=no
(
  $as_echo "468. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1535" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1535"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint32((1:12)),3,4);reshape(uint32((13:24)),3,4);...
               reshape(uint32((25:36)),3,4);reshape(uint32((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1557: \$builddir/test_mat -v 7.3 -c uint32 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint32 write_cell_2d_numeric" "mat73_write.at:1557"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint32 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1557"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1559" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1559"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1560: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1560"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1560"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_468
#AT_START_469
at_fn_group_banner 469 'mat73_write.at:1564' \
  "Write cell array with 2D 16-bit signed integer fields" "" 10
at_xfail=no
(
  $as_echo "469. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1565" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1565"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int16((1:12)),3,4);reshape(int16((13:24)),3,4);...
               reshape(int16((25:36)),3,4);reshape(int16((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1587: \$builddir/test_mat -v 7.3 -c int16 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int16 write_cell_2d_numeric" "mat73_write.at:1587"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int16 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1587"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1589" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1589"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1590: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1590"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1590"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_469
#AT_START_470
at_fn_group_banner 470 'mat73_write.at:1594' \
  "Write cell array with 2D 16-bit unsigned integer fields" "" 10
at_xfail=no
(
  $as_echo "470. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1595" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1595"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint16((1:12)),3,4);reshape(uint16((13:24)),3,4);...
               reshape(uint16((25:36)),3,4);reshape(uint16((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1617: \$builddir/test_mat -v 7.3 -c uint16 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint16 write_cell_2d_numeric" "mat73_write.at:1617"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint16 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1617"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1619" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1619"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1620: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1620"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1620"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_470
#AT_START_471
at_fn_group_banner 471 'mat73_write.at:1624' \
  "Write cell array with 2D 8-bit signed integer fields" "" 10
at_xfail=no
(
  $as_echo "471. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1625" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1625"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int8((1:12)),3,4);reshape(int8((13:24)),3,4);...
               reshape(int8((25:36)),3,4);reshape(int8((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1647: \$builddir/test_mat -v 7.3 -c int8 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int8 write_cell_2d_numeric" "mat73_write.at:1647"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int8 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1647"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1649" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1649"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1650: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1650"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1650"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_471
#AT_START_472
at_fn_group_banner 472 'mat73_write.at:1654' \
  "Write cell array with 2D 8-bit unsigned integer fields" "" 10
at_xfail=no
(
  $as_echo "472. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1655" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1655"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint8((1:12)),3,4);reshape(uint8((13:24)),3,4);...
               reshape(uint8((25:36)),3,4);reshape(uint8((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1677: \$builddir/test_mat -v 7.3 -c uint8 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint8 write_cell_2d_numeric" "mat73_write.at:1677"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint8 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1677"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1679" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1679"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1680: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1680"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1680"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_472
#AT_START_473
at_fn_group_banner 473 'mat73_write.at:1684' \
  "Write cell array with 2D double-precision complex fields" "" 10
at_xfail=no
(
  $as_echo "473. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1685" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1685"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape((1:12)+j*(51:62),3,4);...
               reshape((13:24)+j*(63:74),3,4);...
               reshape((25:36)+j*(75:86),3,4);...
               reshape((37:48)+j*(87:98),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1709: \$builddir/test_mat -v 7.3 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 write_cell_complex_2d_numeric" "mat73_write.at:1709"
( $at_check_trace; $builddir/test_mat -v 7.3 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1709"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1711" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1711"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1712: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1712"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1712"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_473
#AT_START_474
at_fn_group_banner 474 'mat73_write.at:1716' \
  "Write cell array with 2D single-precision complex fields" "" 10
at_xfail=no
(
  $as_echo "474. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1717" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1717"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(single((1:12)+j*(51:62)),3,4);...
               reshape(single((13:24)+j*(63:74)),3,4);...
               reshape(single((25:36)+j*(75:86)),3,4);...
               reshape(single((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1741: \$builddir/test_mat -v 7.3 -c single write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c single write_cell_complex_2d_numeric" "mat73_write.at:1741"
( $at_check_trace; $builddir/test_mat -v 7.3 -c single write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1741"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1743" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1743"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1744: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1744"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1744"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_474
#AT_START_475
at_fn_group_banner 475 'mat73_write.at:1748' \
  "Write cell array with 2D 64-bit signed integer complex fields" "" 10
at_xfail=no
(
  $as_echo "475. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1749" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1749"
$as_echo "mat73_write.at:1750" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1750"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int64((1:12)+j*(51:62)),3,4);...
               reshape(int64((13:24)+j*(63:74)),3,4);...
               reshape(int64((25:36)+j*(75:86)),3,4);...
               reshape(int64((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1774: \$builddir/test_mat -v 7.3 -c int64 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int64 write_cell_complex_2d_numeric" "mat73_write.at:1774"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int64 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1774"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1776" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1776"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1777: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1777"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1777"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_475
#AT_START_476
at_fn_group_banner 476 'mat73_write.at:1781' \
  "Write cell array with 2D 64-bit unsigned integer complex fields" "" 10
at_xfail=no
(
  $as_echo "476. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1782" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1782"
$as_echo "mat73_write.at:1783" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1783"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint64((1:12)+j*(51:62)),3,4);...
               reshape(uint64((13:24)+j*(63:74)),3,4);...
               reshape(uint64((25:36)+j*(75:86)),3,4);...
               reshape(uint64((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1807: \$builddir/test_mat -v 7.3 -c uint64 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint64 write_cell_complex_2d_numeric" "mat73_write.at:1807"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint64 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1807"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1809" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1809"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1810: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1810"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1810"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_476
#AT_START_477
at_fn_group_banner 477 'mat73_write.at:1814' \
  "Write cell array with 2D 32-bit signed integer complex fields" "" 10
at_xfail=no
(
  $as_echo "477. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1815" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1815"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int32((1:12)+j*(51:62)),3,4);...
               reshape(int32((13:24)+j*(63:74)),3,4);...
               reshape(int32((25:36)+j*(75:86)),3,4);...
               reshape(int32((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1839: \$builddir/test_mat -v 7.3 -c int32 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int32 write_cell_complex_2d_numeric" "mat73_write.at:1839"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int32 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1839"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1841" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1841"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1842: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1842"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1842"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_477
#AT_START_478
at_fn_group_banner 478 'mat73_write.at:1846' \
  "Write cell array with 2D 32-bit unsigned integer complex fields" "" 10
at_xfail=no
(
  $as_echo "478. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1847" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1847"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint32((1:12)+j*(51:62)),3,4);...
               reshape(uint32((13:24)+j*(63:74)),3,4);...
               reshape(uint32((25:36)+j*(75:86)),3,4);...
               reshape(uint32((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1871: \$builddir/test_mat -v 7.3 -c uint32 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint32 write_cell_complex_2d_numeric" "mat73_write.at:1871"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint32 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1871"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1873" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1873"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1874: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1874"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1874"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_478
#AT_START_479
at_fn_group_banner 479 'mat73_write.at:1878' \
  "Write cell array with 2D 16-bit signed integer complex fields" "" 10
at_xfail=no
(
  $as_echo "479. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1879" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1879"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int16((1:12)+j*(51:62)),3,4);...
               reshape(int16((13:24)+j*(63:74)),3,4);...
               reshape(int16((25:36)+j*(75:86)),3,4);...
               reshape(int16((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1903: \$builddir/test_mat -v 7.3 -c int16 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int16 write_cell_complex_2d_numeric" "mat73_write.at:1903"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int16 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1903"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1905" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1905"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1906: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1906"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1906"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_479
#AT_START_480
at_fn_group_banner 480 'mat73_write.at:1910' \
  "Write cell array with 2D 16-bit unsigned integer complex fields" "" 10
at_xfail=no
(
  $as_echo "480. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1911" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1911"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint16((1:12)+j*(51:62)),3,4);...
               reshape(uint16((13:24)+j*(63:74)),3,4);...
               reshape(uint16((25:36)+j*(75:86)),3,4);...
               reshape(uint16((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1935: \$builddir/test_mat -v 7.3 -c uint16 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint16 write_cell_complex_2d_numeric" "mat73_write.at:1935"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint16 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1935"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1937" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1937"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1938: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1938"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1938"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_480
#AT_START_481
at_fn_group_banner 481 'mat73_write.at:1942' \
  "Write cell array with 2D 8-bit signed integer complex fields" "" 10
at_xfail=no
(
  $as_echo "481. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1943" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1943"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int8((1:12)+j*(51:62)),3,4);...
               reshape(int8((13:24)+j*(63:74)),3,4);...
               reshape(int8((25:36)+j*(75:86)),3,4);...
               reshape(int8((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1967: \$builddir/test_mat -v 7.3 -c int8 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int8 write_cell_complex_2d_numeric" "mat73_write.at:1967"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int8 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1967"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1969" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1969"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1970: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1970"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1970"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_481
#AT_START_482
at_fn_group_banner 482 'mat73_write.at:1974' \
  "Write cell array with 2D 8-bit unsigned integer complex fields" "" 10
at_xfail=no
(
  $as_echo "482. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1975" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1975"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint8((1:12)+j*(51:62)),3,4);...
               reshape(uint8((13:24)+j*(63:74)),3,4);...
               reshape(uint8((25:36)+j*(75:86)),3,4);...
               reshape(uint8((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1999: \$builddir/test_mat -v 7.3 -c uint8 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint8 write_cell_complex_2d_numeric" "mat73_write.at:1999"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint8 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1999"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:2001" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2001"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:2002: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:2002"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2002"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_482
